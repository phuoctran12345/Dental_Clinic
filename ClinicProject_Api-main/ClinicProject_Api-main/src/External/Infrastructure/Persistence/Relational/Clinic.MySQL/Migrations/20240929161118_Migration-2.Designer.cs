// <auto-generated />
using System;
using Clinic.MySQL.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clinic.MySQL.Migrations
{
    [DbContext(typeof(ClinicContext))]
    [Migration("20240929161118_Migration-2")]
    partial class Migration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("DepositPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("ReExamination")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("Appointments", null, t =>
                        {
                            t.HasComment("Contain appointment records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.AppointmentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Constant")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentStatuses", null, t =>
                        {
                            t.HasComment("Contain appointment status records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChatContentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.HasKey("Id");

                    b.HasIndex("ChatContentId");

                    b.ToTable("Assets", null, t =>
                        {
                            t.HasComment("Contain asset content records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.ChatContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TextContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatContents", null, t =>
                        {
                            t.HasComment("Contain chat content records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastMessage")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("ChatRooms", null, t =>
                        {
                            t.HasComment("Contain chat room records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Doctor", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Achievement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOnDuty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<Guid>("PositionId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId");

                    b.HasIndex("PositionId");

                    b.ToTable("Doctors", null, t =>
                        {
                            t.HasComment("Contain doctor records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.DoctorSpecialty", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SpecialtyID")
                        .HasColumnType("char(36)");

                    b.HasKey("DoctorId", "SpecialtyID");

                    b.HasIndex("SpecialtyID");

                    b.ToTable("DoctorSpecialties", null, t =>
                        {
                            t.HasComment("Contain Doctor Specialty record");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Vote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Feedbacks", null, t =>
                        {
                            t.HasComment("Contain Feedback records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Constant")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id");

                    b.ToTable("Genders", null, t =>
                        {
                            t.HasComment("Contain Gender records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.MedicalReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodPresser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralCondition")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.Property<Guid>("MedicineOrderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("PatientInformationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Pulse")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ServiceOrderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("MedicineOrderId")
                        .IsUnique();

                    b.HasIndex("PatientInformationId")
                        .IsUnique();

                    b.HasIndex("ServiceOrderId")
                        .IsUnique();

                    b.ToTable("MedicalReports", null, t =>
                        {
                            t.HasComment("Contain medical report records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Ingredient")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Manufacture")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("MedicineGroupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MedicineTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineGroupId");

                    b.HasIndex("MedicineTypeId");

                    b.ToTable("Medicines", null, t =>
                        {
                            t.HasComment("Contain medicine's infomation.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.MedicineGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Constant")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id");

                    b.ToTable("MedicineGroups", null, t =>
                        {
                            t.HasComment("Contain medicine's group.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.MedicineOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("TotalItem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MedicineOrder");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.MedicineOrderItem", b =>
                {
                    b.Property<Guid>("MedicineId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MedicalOrderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MedicineOrderId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("MedicineId", "MedicalOrderId");

                    b.HasIndex("MedicineOrderId");

                    b.ToTable("MedicineOrderItems", null, t =>
                        {
                            t.HasComment("Contain Medicine Orders record");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.MedicineType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Constant")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id");

                    b.ToTable("MedicineTypes", null, t =>
                        {
                            t.HasComment("Contain medicine's type.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.OnlinePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("TransactionID")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("OnlinePayments", null, t =>
                        {
                            t.HasComment("Contain online payment records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Patient", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("VARCHAR(225)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Patients", null, t =>
                        {
                            t.HasComment("Contain patient's infomation.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.PatientInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("DATETIME");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR(12)");

                    b.HasKey("Id");

                    b.ToTable("PatientInformations", null, t =>
                        {
                            t.HasComment("Contain PatientInformation records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Constant")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id");

                    b.ToTable("Positions", null, t =>
                        {
                            t.HasComment("Contain doctor status records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.QueueRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsSuported")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("QueueRooms", null, t =>
                        {
                            t.HasComment("Contain queue room records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("AccessTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("RefreshTokenValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("AccessTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", null, t =>
                        {
                            t.HasComment("Contain refresh token records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.RetreatmentNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RetreatmentTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RetreatmentTypeId");

                    b.ToTable("RetreatmentNotifications", null, t =>
                        {
                            t.HasComment("Contain RetreatmentNotification status records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.RetreatmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Constant")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id");

                    b.ToTable("RetreatmentTypes", null, t =>
                        {
                            t.HasComment("Contain RetreatmentType status records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", null, t =>
                        {
                            t.HasComment("Contain role records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.RoleDetail", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("RoleId");

                    b.ToTable("RoleDetails", null, t =>
                        {
                            t.HasComment("Contain role detail records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules", null, t =>
                        {
                            t.HasComment("Contain Schedule records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Descripiton")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Services", null, t =>
                        {
                            t.HasComment("Contain service.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.ServiceOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsAllUpdated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ServiceOrder");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.ServiceOrderItem", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ServiceOrderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("ServiceId", "ServiceOrderId");

                    b.HasIndex("ServiceOrderId");

                    b.ToTable("ServiceOrderItems", null, t =>
                        {
                            t.HasComment("Contain Service Orders record");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Constant")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.HasKey("Id");

                    b.ToTable("Specialtys", null, t =>
                        {
                            t.HasComment("Contain doctorSpecialties status records.");
                        });
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", null, t =>
                        {
                            t.HasComment("Contain user records.");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserRole<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserToken<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.UserToken", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("DATETIME");

                    b.ToTable("UserTokens", null, t =>
                        {
                            t.HasComment("Contain user record.");
                        });

                    b.HasDiscriminator().HasValue("UserToken");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Appointment", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.Schedule", "Schedule")
                        .WithOne("Appointment")
                        .HasForeignKey("Clinic.Domain.Commons.Entities.Appointment", "ScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.AppointmentStatus", "AppointmentStatus")
                        .WithMany("Appointment")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppointmentStatus");

                    b.Navigation("Patient");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Asset", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.ChatContent", "ChatContent")
                        .WithMany("Assets")
                        .HasForeignKey("ChatContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChatContent");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.ChatContent", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.ChatRoom", "ChatRoom")
                        .WithMany("ChatContents")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.User", "User")
                        .WithMany("ChatContents")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.ChatRoom", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Doctor", "Doctor")
                        .WithMany("ChatRooms")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.Patient", "Patient")
                        .WithMany("ChatRooms")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Doctor", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Position", "Position")
                        .WithMany("Doctors")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Clinic.Domain.Commons.Entities.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.DoctorSpecialty", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Doctor", "Doctor")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.Specialty", "Specialty")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("SpecialtyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Feedback", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Appointment", "Appointment")
                        .WithOne("Feedback")
                        .HasForeignKey("Clinic.Domain.Commons.Entities.Feedback", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.MedicalReport", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Appointment", "Appointment")
                        .WithOne("MedicalReport")
                        .HasForeignKey("Clinic.Domain.Commons.Entities.MedicalReport", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.MedicineOrder", "MedicineOrder")
                        .WithOne("MedicalReport")
                        .HasForeignKey("Clinic.Domain.Commons.Entities.MedicalReport", "MedicineOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.PatientInformation", "PatientInformation")
                        .WithOne("MedicalReport")
                        .HasForeignKey("Clinic.Domain.Commons.Entities.MedicalReport", "PatientInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.ServiceOrder", "ServiceOrder")
                        .WithOne("MedicalReport")
                        .HasForeignKey("Clinic.Domain.Commons.Entities.MedicalReport", "ServiceOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("MedicineOrder");

                    b.Navigation("PatientInformation");

                    b.Navigation("ServiceOrder");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Medicine", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.MedicineGroup", "MedicineGroup")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicineGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.MedicineType", "MedicineType")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicineGroup");

                    b.Navigation("MedicineType");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.MedicineOrderItem", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Medicine", "Medicine")
                        .WithMany("MedicineOrderItems")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.MedicineOrder", "MedicineOrder")
                        .WithMany("MedicineOrderItems")
                        .HasForeignKey("MedicineOrderId");

                    b.Navigation("Medicine");

                    b.Navigation("MedicineOrder");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.OnlinePayment", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Appointment", "Appointment")
                        .WithOne("OnlinePayment")
                        .HasForeignKey("Clinic.Domain.Commons.Entities.OnlinePayment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Patient", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Clinic.Domain.Commons.Entities.Patient", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.QueueRoom", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Patient", "Patient")
                        .WithOne("QueueRooms")
                        .HasForeignKey("Clinic.Domain.Commons.Entities.QueueRoom", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.RefreshToken", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.RetreatmentNotification", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Patient", "Patient")
                        .WithMany("RetreatmentNotifications")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.RetreatmentType", "RetreatmentType")
                        .WithMany("RetreatmentNotifications")
                        .HasForeignKey("RetreatmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("RetreatmentType");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.RoleDetail", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Role", "Role")
                        .WithOne("RoleDetail")
                        .HasForeignKey("Clinic.Domain.Commons.Entities.RoleDetail", "RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Schedule", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.ServiceOrderItem", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Service", "Service")
                        .WithMany("ServiceOrderItems")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.ServiceOrder", "ServiceOrder")
                        .WithMany("ServiceOrderItems")
                        .HasForeignKey("ServiceOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("ServiceOrder");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.User", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.UserRole", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Domain.Commons.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.UserToken", b =>
                {
                    b.HasOne("Clinic.Domain.Commons.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Appointment", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("MedicalReport");

                    b.Navigation("OnlinePayment");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.AppointmentStatus", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.ChatContent", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.ChatRoom", b =>
                {
                    b.Navigation("ChatContents");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Doctor", b =>
                {
                    b.Navigation("ChatRooms");

                    b.Navigation("DoctorSpecialties");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Medicine", b =>
                {
                    b.Navigation("MedicineOrderItems");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.MedicineGroup", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.MedicineOrder", b =>
                {
                    b.Navigation("MedicalReport");

                    b.Navigation("MedicineOrderItems");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.MedicineType", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ChatRooms");

                    b.Navigation("QueueRooms");

                    b.Navigation("RetreatmentNotifications");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.PatientInformation", b =>
                {
                    b.Navigation("MedicalReport");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Position", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.RetreatmentType", b =>
                {
                    b.Navigation("RetreatmentNotifications");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Role", b =>
                {
                    b.Navigation("RoleDetail");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Schedule", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Service", b =>
                {
                    b.Navigation("ServiceOrderItems");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.ServiceOrder", b =>
                {
                    b.Navigation("MedicalReport");

                    b.Navigation("ServiceOrderItems");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.Specialty", b =>
                {
                    b.Navigation("DoctorSpecialties");
                });

            modelBuilder.Entity("Clinic.Domain.Commons.Entities.User", b =>
                {
                    b.Navigation("ChatContents");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
