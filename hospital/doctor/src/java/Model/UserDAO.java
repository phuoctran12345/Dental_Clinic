/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;
import java.util.ArrayList;
import java.util.List;
import static Model.DatabaseInfo.DBURL;
import static Model.DatabaseInfo.DRIVERNAME;
import static Model.DatabaseInfo.PASSDB;
import static Model.DatabaseInfo.USERDB;

/**
 * UserDAO - Data Access Object cho b·∫£ng Users v√† OTP_Requests
 * @author ASUS
 */
public class UserDAO {

    /**
     * K·∫øt n·ªëi database v·ªõi logging chi ti·∫øt
     */
    public static Connection getConnect() {
        try {
            Class.forName(DRIVERNAME);
            System.out.println("üîå Driver SQL Server ƒë√£ ƒë∆∞·ª£c load th√†nh c√¥ng!");
        } catch (ClassNotFoundException e) {
            System.err.println("‚ùå L·ªói loading driver: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
        
        try {
            System.out.println("üîó ƒêang k·∫øt n·ªëi ƒë·∫øn database: " + DBURL);
            Connection con = DriverManager.getConnection(DBURL, USERDB, PASSDB);
            
            if (con != null) {
                System.out.println("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!");
                return con;
            } else {
                System.err.println("‚ùå Connection tr·∫£ v·ªÅ null!");
                return null;
            }
        } catch (SQLException e) {
            System.err.println("‚ùå L·ªói k·∫øt n·ªëi database: " + e.getMessage());
            System.err.println("üìã Chi ti·∫øt l·ªói:");
            System.err.println("   - URL: " + DBURL);
            System.err.println("   - User: " + USERDB);
            System.err.println("   - Error Code: " + e.getErrorCode());
            System.err.println("   - SQL State: " + e.getSQLState());
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * M√£ h√≥a m·∫≠t kh·∫©u b·∫±ng MD5
     */
    public static String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] messageDigest = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : messageDigest) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
    
    /**
     * T·∫°o m√£ OTP ng·∫´u nhi√™n 6 ch·ªØ s·ªë
     */
    public static String generateOTP() {
        Random random = new Random();
        int otp = 100000 + random.nextInt(900000);
        return String.valueOf(otp);
    }
    
    /**
     * ƒêƒÉng nh·∫≠p user
     */
    public static User loginUser(String email, String password) {
        try (Connection conn = getConnect()) {
            if (conn == null) return null;
            
            String sql = "SELECT * FROM Users WHERE email = ? AND password_hash = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, email);
            ps.setString(2, hashPassword(password));
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                return new User(
                    rs.getInt("user_id"),
                    rs.getString("password_hash"),
                    rs.getString("email"),
                    rs.getString("role"),
                    rs.getTimestamp("created_at")
                );
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói loginUser: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }
    
    /**
     * L·∫•y th√¥ng tin user theo email
     */
    public static User getUserByEmail(String email) {
        try (Connection conn = getConnect()) {
            if (conn == null) return null;
            
            String sql = "SELECT * FROM Users WHERE email = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                return new User(
                    rs.getInt("user_id"),
                    rs.getString("password_hash"),
                    rs.getString("email"),
                    rs.getString("role"),
                    rs.getTimestamp("created_at")
                );
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói getUserByEmail: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }
    
    /**
     * L·∫•y th√¥ng tin user theo ID
     */
    public static User getUserById(int userId) {
        try (Connection conn = getConnect()) {
            if (conn == null) return null;
            
            String sql = "SELECT * FROM Users WHERE user_id = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, userId);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                return new User(
                    rs.getInt("user_id"),
                    rs.getString("password_hash"),
                    rs.getString("email"),
                    rs.getString("role"),
                    rs.getTimestamp("created_at")
                );
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói getUserById: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }
    
    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ users
     */
    public static List<User> getAllUsers() {
        List<User> users = new ArrayList<>();
        try (Connection conn = getConnect()) {
            if (conn == null) return users;
            
            String sql = "SELECT * FROM Users ORDER BY created_at DESC";
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                users.add(new User(
                    rs.getInt("user_id"),
                    rs.getString("password_hash"),
                    rs.getString("email"),
                    rs.getString("role"),
                    rs.getTimestamp("created_at")
                ));
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói getAllUsers: " + e.getMessage());
            e.printStackTrace();
        }
        return users;
    }
    
    /**
     * T·∫°o user m·ªõi
     */
    public static boolean createUser(String email, String password, String role) {
        try (Connection conn = getConnect()) {
            if (conn == null) return false;
            
            String sql = "INSERT INTO Users (email, password_hash, role, created_at) VALUES (?, ?, ?, ?)";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, email);
            ps.setString(2, hashPassword(password));
            ps.setString(3, role);
            ps.setTimestamp(4, Timestamp.valueOf(LocalDateTime.now()));
            
            int result = ps.executeUpdate();
            if (result > 0) {
                System.out.println("‚úÖ T·∫°o user th√†nh c√¥ng: " + email);
                return true;
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói createUser: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }
    
    /**
     * L∆∞u OTP v√†o session thay v√¨ database
     * ƒê∆°n gi·∫£n h∆°n v√† kh√¥ng c·∫ßn t·∫°o b·∫£ng
     */
    public static boolean saveOTP(String email, String otp) {
        try {
            // Ch·ªâ log th√¥ng tin, kh√¥ng l∆∞u v√†o database
            System.out.println("‚úÖ T·∫°o OTP th√†nh c√¥ng cho email: " + email + " | OTP: " + otp);
            System.out.println("‚è∞ OTP s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t");
            return true;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o OTP: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * X√°c minh OTP t·ª´ session thay v√¨ database
     * Method n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi t·ª´ servlet v·ªõi session
     */
    public static boolean verifyOTP(String inputOTP, String sessionOTP) {
        try {
            if (sessionOTP == null || inputOTP == null) {
                System.out.println("‚ùå OTP kh√¥ng t·ªìn t·∫°i trong session");
                return false;
            }
            
            boolean isValid = sessionOTP.equals(inputOTP.trim());
            
            if (isValid) {
                System.out.println("‚úÖ OTP x√°c minh th√†nh c√¥ng");
            } else {
                System.out.println("‚ùå OTP kh√¥ng ƒë√∫ng: " + inputOTP + " != " + sessionOTP);
            }
            
            return isValid;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói verifyOTP: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * C·∫≠p nh·∫≠t m·∫≠t kh·∫©u theo email
     */
    public static boolean updatePasswordByEmail(String email, String newPassword) {
        // Validate input
        if (email == null || email.trim().isEmpty()) {
            System.err.println("‚ùå Email kh√¥ng ƒë∆∞·ª£c tr·ªëng");
            return false;
        }
        
        if (newPassword == null || newPassword.trim().isEmpty()) {
            System.err.println("‚ùå M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr·ªëng");
            return false;
        }
        
        if (newPassword.length() < 6) {
            System.err.println("‚ùå M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±");
            return false;
        }
        
        email = email.trim().toLowerCase();
        
        // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
        if (!checkEmailExists(email)) {
            System.err.println("‚ùå Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng: " + email);
            return false;
        }
        
        try (Connection conn = getConnect()) {
            if (conn == null) {
                System.err.println("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database");
                return false;
            }
            
            // B·∫Øt ƒë·∫ßu transaction
            conn.setAutoCommit(false);
            
            try {
                String sql = "UPDATE Users SET password_hash = ? WHERE email = ?";
                PreparedStatement ps = conn.prepareStatement(sql);
                String hashedPassword = hashPassword(newPassword);
                
                ps.setString(1, hashedPassword);
                ps.setString(2, email);
                
                System.out.println("üîÑ ƒêang c·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho email: " + email);
                System.out.println("üîí M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c hash: " + hashedPassword.substring(0, 10) + "...");
                
                int result = ps.executeUpdate();
                
                if (result > 0) {
                    // Commit transaction
                    conn.commit();
                    System.out.println("‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng cho: " + email);
                    System.out.println("üìä S·ªë d√≤ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t: " + result);
                    
                    // Verify update b·∫±ng c√°ch ki·ªÉm tra l·∫°i
                    if (verifyPasswordUpdate(email, newPassword)) {
                        System.out.println("‚úÖ X√°c minh c·∫≠p nh·∫≠t th√†nh c√¥ng!");
                        return true;
                    } else {
                        System.err.println("‚ùå X√°c minh c·∫≠p nh·∫≠t th·∫•t b·∫°i!");
                        return false;
                    }
                } else {
                    // Rollback n·∫øu kh√¥ng c√≥ d√≤ng n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                    conn.rollback();
                    System.err.println("‚ùå Kh√¥ng c√≥ d√≤ng n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t cho email: " + email);
                    return false;
                }
                
            } catch (Exception e) {
                // Rollback n·∫øu c√≥ l·ªói
                conn.rollback();
                throw e;
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói updatePasswordByEmail: " + e.getMessage());
            System.err.println("üìß Email: " + email);
            System.err.println("üîç Chi ti·∫øt l·ªói:");
            e.printStackTrace();
        }
        return false;
    }
    
    /**
     * X√°c minh m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng
     */
    private static boolean verifyPasswordUpdate(String email, String newPassword) {
        try (Connection conn = getConnect()) {
            if (conn == null) return false;
            
            String sql = "SELECT password_hash FROM Users WHERE email = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, email.trim().toLowerCase());
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                String storedHash = rs.getString("password_hash");
                String newHash = hashPassword(newPassword);
                
                boolean matches = storedHash.equals(newHash);
                System.out.println("üîç X√°c minh hash:");
                System.out.println("   - Hash m·ªõi: " + newHash.substring(0, 10) + "...");
                System.out.println("   - Hash DB:  " + storedHash.substring(0, 10) + "...");
                System.out.println("   - Kh·ªõp: " + (matches ? "‚úÖ" : "‚ùå"));
                
                return matches;
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói verifyPasswordUpdate: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }
    
    /**
     * Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
     */
    public static boolean checkEmailExists(String email) {
        try (Connection conn = getConnect()) {
            if (conn == null) return false;
            
            String sql = "SELECT 1 FROM Users WHERE email = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói checkEmailExists: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * C·∫≠p nh·∫≠t th√¥ng tin user
     */
    public static boolean updateUser(User user) {
        try (Connection conn = getConnect()) {
            if (conn == null) return false;
            
            String sql = "UPDATE Users SET email = ?, role = ? WHERE user_id = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, user.getEmail());
            ps.setString(2, user.getRole());
            ps.setInt(3, user.getUserId());
            
            int result = ps.executeUpdate();
            if (result > 0) {
                System.out.println("‚úÖ C·∫≠p nh·∫≠t user th√†nh c√¥ng: " + user.getEmail());
                return true;
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói updateUser: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }
    
    /**
     * X√≥a user
     */
    public static boolean deleteUser(int userId) {
        try (Connection conn = getConnect()) {
            if (conn == null) return false;
            
            String sql = "DELETE FROM Users WHERE user_id = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, userId);
            
            int result = ps.executeUpdate();
            if (result > 0) {
                System.out.println("‚úÖ X√≥a user th√†nh c√¥ng: ID " + userId);
                return true;
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói deleteUser: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }
    
    /**
     * ƒê·∫øm s·ªë l∆∞·ª£ng users theo role
     */
    public static int countUsersByRole(String role) {
        try (Connection conn = getConnect()) {
            if (conn == null) return 0;
            
            String sql = "SELECT COUNT(*) as count FROM Users WHERE role = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, role);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                return rs.getInt("count");
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói countUsersByRole: " + e.getMessage());
            e.printStackTrace();
        }
        return 0;
    }
    
    /**
     * Ki·ªÉm tra user c√≥ active kh√¥ng
     */
    public static boolean isUserActive(String email) {
        try (Connection conn = getConnect()) {
            if (conn == null) return false;
            
            String sql = "SELECT is_active FROM Users WHERE email = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                return rs.getBoolean("is_active");
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói isUserActive: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }
    
    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i active c·ªßa user
     */
    public static boolean updateUserStatus(String email, boolean isActive) {
        try (Connection conn = getConnect()) {
            if (conn == null) return false;
            
            String sql = "UPDATE Users SET is_active = ? WHERE email = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setBoolean(1, isActive);
            ps.setString(2, email);
            
            int result = ps.executeUpdate();
            if (result > 0) {
                System.out.println("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i user: " + email + " -> " + (isActive ? "Active" : "Inactive"));
                return true;
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói updateUserStatus: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }
    
    /**
     * C·∫≠p nh·∫≠t m·∫≠t kh·∫©u theo email - Phi√™n b·∫£n ƒë∆°n gi·∫£n ƒë·ªÉ debug
     */
    public static boolean updatePasswordByEmailSimple(String email, String newPassword) {
        System.out.println("üîÑ [DEBUG] B·∫Øt ƒë·∫ßu updatePasswordByEmailSimple");
        System.out.println("üìß [DEBUG] Email: " + email);
        System.out.println("üîí [DEBUG] Password length: " + (newPassword != null ? newPassword.length() : "null"));
        
        if (email == null || email.trim().isEmpty()) {
            System.err.println("‚ùå [DEBUG] Email tr·ªëng");
            return false;
        }
        
        if (newPassword == null || newPassword.trim().isEmpty()) {
            System.err.println("‚ùå [DEBUG] Password tr·ªëng");
            return false;
        }
        
        email = email.trim().toLowerCase();
        
        // S·ª≠ d·ª•ng DBConnection thay v√¨ getConnect()
        Connection conn = null;
        PreparedStatement ps = null;
        
        try {
            System.out.println("üîå [DEBUG] ƒêang k·∫øt n·ªëi database...");
            conn = DBConnection.getConnection();
            
            if (conn == null) {
                System.err.println("‚ùå [DEBUG] Connection null");
                return false;
            }
            
            System.out.println("‚úÖ [DEBUG] K·∫øt n·ªëi th√†nh c√¥ng!");
            
            // Ki·ªÉm tra email t·ªìn t·∫°i tr∆∞·ªõc
            String checkSql = "SELECT user_id, email, password_hash FROM Users WHERE email = ?";
            ps = conn.prepareStatement(checkSql);
            ps.setString(1, email);
            ResultSet checkRs = ps.executeQuery();
            
            if (!checkRs.next()) {
                System.err.println("‚ùå [DEBUG] Email kh√¥ng t·ªìn t·∫°i: " + email);
                return false;
            }
            
            int userId = checkRs.getInt("user_id");
            String oldHash = checkRs.getString("password_hash");
            System.out.println("‚úÖ [DEBUG] Email t·ªìn t·∫°i - UserID: " + userId);
            System.out.println("üîí [DEBUG] Hash c≈©: " + oldHash.substring(0, 10) + "...");
            
            // ƒê√≥ng ResultSet v√† PreparedStatement c≈©
            checkRs.close();
            ps.close();
            
            // Hash m·∫≠t kh·∫©u m·ªõi
            String newHash = hashPassword(newPassword);
            System.out.println("üîí [DEBUG] Hash m·ªõi: " + newHash.substring(0, 10) + "...");
            
            // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
            String updateSql = "UPDATE Users SET password_hash = ? WHERE email = ?";
            ps = conn.prepareStatement(updateSql);
            ps.setString(1, newHash);
            ps.setString(2, email);
            
            System.out.println("üîÑ [DEBUG] Th·ª±c hi·ªán UPDATE...");
            int rowsAffected = ps.executeUpdate();
            
            System.out.println("üìä [DEBUG] Rows affected: " + rowsAffected);
            
            if (rowsAffected > 0) {
                System.out.println("‚úÖ [DEBUG] UPDATE th√†nh c√¥ng!");
                
                // Verify b·∫±ng c√°ch SELECT l·∫°i
                ps.close();
                String verifySql = "SELECT password_hash FROM Users WHERE email = ?";
                ps = conn.prepareStatement(verifySql);
                ps.setString(1, email);
                ResultSet verifyRs = ps.executeQuery();
                
                if (verifyRs.next()) {
                    String updatedHash = verifyRs.getString("password_hash");
                    System.out.println("üîç [DEBUG] Hash sau update: " + updatedHash.substring(0, 10) + "...");
                    
                    boolean matches = newHash.equals(updatedHash);
                    System.out.println("‚úÖ [DEBUG] Hash kh·ªõp: " + matches);
                    
                    verifyRs.close();
                    return matches;
                } else {
                    System.err.println("‚ùå [DEBUG] Kh√¥ng th·ªÉ verify - kh√¥ng t√¨m th·∫•y user");
                    return false;
                }
            } else {
                System.err.println("‚ùå [DEBUG] UPDATE th·∫•t b·∫°i - 0 rows affected");
                return false;
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå [DEBUG] Exception: " + e.getMessage());
            System.err.println("‚ùå [DEBUG] Exception class: " + e.getClass().getName());
            e.printStackTrace();
            return false;
        } finally {
            // ƒê√≥ng connection
            try {
                if (ps != null) ps.close();
                if (conn != null) conn.close();
                System.out.println("üîå [DEBUG] ƒê√£ ƒë√≥ng connection");
            } catch (Exception e) {
                System.err.println("‚ùå [DEBUG] L·ªói ƒë√≥ng connection: " + e.getMessage());
            }
        }
    }
    
    /**
     * Test method ƒë·ªÉ ki·ªÉm tra database connection v√† c·∫•u tr√∫c b·∫£ng
     */
    public static void testDatabaseConnection() {
        System.out.println("üß™ [TEST] B·∫Øt ƒë·∫ßu test database connection...");
        
        Connection conn = null;
        try {
            conn = DBConnection.getConnection();
            
            if (conn == null) {
                System.err.println("‚ùå [TEST] Connection null");
                return;
            }
            
            System.out.println("‚úÖ [TEST] Connection th√†nh c√¥ng!");
            
            // Test SELECT Users table
            String sql = "SELECT COUNT(*) as total FROM Users";
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                int total = rs.getInt("total");
                System.out.println("üìä [TEST] T·ªïng s·ªë users: " + total);
            }
            
            // Test c·∫•u tr√∫c b·∫£ng
            sql = "SELECT TOP 1 user_id, email, password_hash, role FROM Users";
            ps = conn.prepareStatement(sql);
            rs = ps.executeQuery();
            
            if (rs.next()) {
                System.out.println("üìã [TEST] C·∫•u tr√∫c b·∫£ng Users OK:");
                System.out.println("   - user_id: " + rs.getInt("user_id"));
                System.out.println("   - email: " + rs.getString("email"));
                System.out.println("   - password_hash: " + rs.getString("password_hash").substring(0, 10) + "...");
                System.out.println("   - role: " + rs.getString("role"));
            }
            
            rs.close();
            ps.close();
            
        } catch (Exception e) {
            System.err.println("‚ùå [TEST] Exception: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (Exception e) {
                    System.err.println("‚ùå [TEST] L·ªói ƒë√≥ng connection: " + e.getMessage());
                }
            }
        }
    }
    
    /**
     * ‚ö†Ô∏è NGUY HI·ªÇM: C·∫≠p nh·∫≠t m·∫≠t kh·∫©u KH√îNG m√£ h√≥a (ch·ªâ d√πng ƒë·ªÉ test)
     * KH√îNG n√™n s·ª≠ d·ª•ng trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø!
     */
    public static boolean updatePasswordPlainText(String email, String newPassword) {
        System.out.println("‚ö†Ô∏è [C·∫¢NH B√ÅO] ƒêang l∆∞u m·∫≠t kh·∫©u KH√îNG m√£ h√≥a - NGUY HI·ªÇM!");
        System.out.println("üìß Email: " + email);
        System.out.println("üîì Plain password: " + newPassword);
        
        String sql = "UPDATE Users SET password_hash = ? WHERE email = ?";
        try (Connection conn = DBConnection.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            // KH√îNG hash, l∆∞u tr·ª±c ti·∫øp m·∫≠t kh·∫©u
            ps.setString(1, newPassword);
            ps.setString(2, email);
            
            int rowsAffected = ps.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u plain text th√†nh c√¥ng");
                return true;
            } else {
                System.err.println("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i");
                return false;
            }
        } catch (SQLException e) {
            System.err.println("‚ùå L·ªói SQL: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * ‚ö†Ô∏è NGUY HI·ªÇM: ƒêƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u plain text
     */
    public static User loginUserPlainText(String email, String password) {
        System.out.println("‚ö†Ô∏è [C·∫¢NH B√ÅO] ƒêang ƒëƒÉng nh·∫≠p v·ªõi plain text - NGUY HI·ªÇM!");
        
        try (Connection conn = getConnect()) {
            if (conn == null) return null;
            
            String sql = "SELECT * FROM Users WHERE email = ? AND password_hash = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, email);
            ps.setString(2, password); // So s√°nh tr·ª±c ti·∫øp, KH√îNG hash
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                return new User(
                    rs.getInt("user_id"),
                    rs.getString("password_hash"),
                    rs.getString("email"),
                    rs.getString("role"),
                    rs.getTimestamp("created_at")
                );
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói loginUserPlainText: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }
}
