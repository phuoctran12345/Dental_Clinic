package utils;

import jakarta.mail.*;
import jakarta.mail.internet.*;
import java.util.Properties;

/**
 * Service ƒë·ªÉ g·ª≠i email qua SMTP Gmail
 * @author ASUS
 */
public class EmailService {
    
    // C·∫•u h√¨nh email g·ª≠i (l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng)
    private static final String FROM_EMAIL = System.getenv("EMAIL_FROM"); // Email c·ªßa b·∫°n
    private static final String FROM_PASSWORD = System.getenv("EMAIL_PASSWORD"); // App password
    private static final String SMTP_HOST = "smtp.gmail.com";
    private static final String SMTP_PORT = "587";
    
    /**
     * G·ª≠i email OTP
     * @param toEmail Email ng∆∞·ªùi nh·∫≠n
     * @param otp M√£ OTP
     * @return true n·∫øu g·ª≠i th√†nh c√¥ng
     */
    public static boolean sendOTPEmail(String toEmail, String otp) {
        System.out.println("üìß B·∫Øt ƒë·∫ßu g·ª≠i email OTP...");
        System.out.println("From: " + FROM_EMAIL);
        System.out.println("To: " + toEmail);
        
        try {
            // C·∫•u h√¨nh properties cho SMTP v·ªõi STARTTLS (chu·∫©n Gmail hi·ªán t·∫°i)
            Properties props = new Properties();
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.starttls.enable", "true"); // S·ª≠ d·ª•ng STARTTLS thay v√¨ SSL
            props.put("mail.smtp.host", SMTP_HOST);
            props.put("mail.smtp.port", SMTP_PORT); // Port 587 cho STARTTLS
            props.put("mail.smtp.ssl.protocols", "TLSv1.2");
            props.put("mail.smtp.ssl.trust", SMTP_HOST); // Trust Gmail server
            props.put("mail.smtp.localhost", "localhost"); // Fix hostname issue
            props.put("mail.smtp.localhost.address", "127.0.0.1"); // Set valid hostname for HELO
            props.put("mail.debug", "true"); // B·∫≠t debug ƒë·ªÉ xem l·ªói chi ti·∫øt
            
            System.out.println("üîß C·∫•u h√¨nh SMTP STARTTLS: " + SMTP_HOST + ":" + SMTP_PORT);
            System.out.println("üîê Email: " + FROM_EMAIL);
            System.out.println("üîë Password length: " + FROM_PASSWORD.trim().length());
            System.out.println("üîë Password preview: " + FROM_PASSWORD.substring(0, Math.min(4, FROM_PASSWORD.length())) + "****");
            
            // T·∫°o session
            Session session = Session.getInstance(props, new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    System.out.println("üîê ƒêang x√°c th·ª±c v·ªõi Gmail (STARTTLS)...");
                    return new PasswordAuthentication(FROM_EMAIL, FROM_PASSWORD.trim());
                }
            });
            
            // T·∫°o message
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(FROM_EMAIL));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
            message.setSubject("M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - H·ªá th·ªëng Qu·∫£n l√Ω B·ªánh vi·ªán");
            
            // N·ªôi dung email
            String emailContent = createOTPEmailContent(otp);
            message.setContent(emailContent, "text/html; charset=utf-8");
            
            System.out.println("üì§ ƒêang g·ª≠i email qua STARTTLS...");
            
            // G·ª≠i email
            Transport.send(message);
            
            System.out.println("‚úÖ OTP email sent successfully to: " + toEmail);
            return true;
            
        } catch (jakarta.mail.AuthenticationFailedException e) {
            System.err.println("‚ùå L·ªói x√°c th·ª±c Gmail: " + e.getMessage());
            System.err.println("üí° Gi·∫£i ph√°p:");
            System.err.println("   1. Ki·ªÉm tra email: " + FROM_EMAIL);
            System.err.println("   2. T·∫°o l·∫°i App Password t·∫°i: https://myaccount.google.com/apppasswords");
            System.err.println("   3. ƒê·∫£m b·∫£o 2-Factor Authentication ƒë√£ ƒë∆∞·ª£c b·∫≠t");
            System.err.println("   4. App Password hi·ªán t·∫°i: " + FROM_PASSWORD.substring(0, 4) + "****");
            e.printStackTrace();
            return false;
        } catch (MessagingException e) {
            System.err.println("‚ùå L·ªói g·ª≠i email: " + e.getMessage());
            System.err.println("üí° Chi ti·∫øt l·ªói:");
            if (e.getMessage().contains("Connection")) {
                System.err.println("   - Ki·ªÉm tra k·∫øt n·ªëi internet");
                System.err.println("   - Ki·ªÉm tra firewall/antivirus ch·∫∑n port 587");
            }
            if (e.getMessage().contains("Authentication")) {
                System.err.println("   - App Password c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n");
                System.err.println("   - T·∫°o App Password m·ªõi t·∫°i Google Account");
            }
            e.printStackTrace();
            return false;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * T·∫°o n·ªôi dung email OTP
     * @param otp M√£ OTP
     * @return HTML content
     */
    private static String createOTPEmailContent(String otp) {
        return "<!DOCTYPE html>" +
               "<html lang='vi'>" +
               "<head>" +
               "    <meta charset='UTF-8'>" +
               "    <meta name='viewport' content='width=device-width, initial-scale=1.0'>" +
               "    <title>M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</title>" +
               "    <style>" +
               "        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }" +
               "        .container { max-width: 600px; margin: 0 auto; padding: 20px; }" +
               "        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }" +
               "        .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }" +
               "        .otp-box { background: white; border: 2px dashed #667eea; border-radius: 10px; padding: 20px; text-align: center; margin: 20px 0; }" +
               "        .otp-code { font-size: 32px; font-weight: bold; color: #667eea; letter-spacing: 5px; }" +
               "        .warning { background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 5px; padding: 15px; margin: 20px 0; }" +
               "        .footer { text-align: center; margin-top: 30px; color: #666; font-size: 12px; }" +
               "    </style>" +
               "</head>" +
               "<body>" +
               "    <div class='container'>" +
               "        <div class='header'>" +
               "            <h1>üè• H·ªá th·ªëng Qu·∫£n l√Ω B·ªánh vi·ªán</h1>" +
               "            <p>M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</p>" +
               "        </div>" +
               "        <div class='content'>" +
               "            <h2>Xin ch√†o!</h2>" +
               "            <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa m√¨nh. Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ ti·∫øp t·ª•c:</p>" +
               "            <div class='otp-box'>" +
               "                <p>M√£ OTP c·ªßa b·∫°n l√†:</p>" +
               "                <div class='otp-code'>" + otp + "</div>" +
               "            </div>" +
               "            <div class='warning'>" +
               "                <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>" +
               "                <ul>" +
               "                    <li>M√£ OTP n√†y c√≥ hi·ªáu l·ª±c trong <strong>5 ph√∫t</strong></li>" +
               "                    <li>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>" +
               "                    <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y</li>" +
               "                </ul>" +
               "            </div>" +
               "            <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>" +
               "            <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© H·ªá th·ªëng Qu·∫£n l√Ω B·ªánh vi·ªán</strong></p>" +
               "        </div>" +
               "        <div class='footer'>" +
               "            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>" +
               "        </div>" +
               "    </div>" +
               "</body>" +
               "</html>";
    }
    
    /**
     * Ki·ªÉm tra c·∫•u h√¨nh email
     * @return true n·∫øu ƒë√£ c·∫•u h√¨nh
     */
    public static boolean isConfigured() {
        return !FROM_EMAIL.equals("your-email@gmail.com") && 
               !FROM_PASSWORD.equals("your-app-password");
    }
    
    /**
     * G·ª≠i email OTP v·ªõi fallback configs
     * @param toEmail Email ng∆∞·ªùi nh·∫≠n
     * @param otp M√£ OTP
     * @return true n·∫øu g·ª≠i th√†nh c√¥ng
     */
    public static boolean sendOTPEmailWithFallback(String toEmail, String otp) {
        // Th·ª≠ STARTTLS port 587 tr∆∞·ªõc (chu·∫©n Gmail hi·ªán t·∫°i)
        System.out.println("üîÑ Th·ª≠ g·ª≠i qua STARTTLS (port 587) - Gmail standard...");
        if (sendOTPEmailSTARTTLS(toEmail, otp)) {
            return true;
        }
        
        System.out.println("‚ö†Ô∏è STARTTLS th·∫•t b·∫°i, th·ª≠ SSL fallback...");
        
        // Fallback: th·ª≠ SSL port 465
        if (sendOTPEmailSSL(toEmail, otp)) {
            return true;
        }
        
        System.out.println("‚ùå C·∫£ 2 ph∆∞∆°ng th·ª©c ƒë·ªÅu th·∫•t b·∫°i");
        System.out.println("üí° H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:");
        System.out.println("   1. Ki·ªÉm tra App Password Gmail t·∫°i: https://myaccount.google.com/apppasswords");
        System.out.println("   2. T·∫°o App Password m·ªõi n·∫øu c≈© ƒë√£ h·∫øt h·∫°n");
        System.out.println("   3. ƒê·∫£m b·∫£o 2FA ƒë√£ ƒë∆∞·ª£c b·∫≠t cho t√†i kho·∫£n Gmail");
        System.out.println("   4. Ki·ªÉm tra firewall/antivirus c√≥ ch·∫∑n port 587, 465 kh√¥ng");
        
        return false;
    }
    
    /**
     * G·ª≠i email qua SSL (port 465)
     */
    private static boolean sendOTPEmailSSL(String toEmail, String otp) {
        System.out.println("üîÑ Th·ª≠ g·ª≠i qua SSL (port 465)...");
        System.out.println("üìß From: " + FROM_EMAIL);
        System.out.println("üìß To: " + toEmail);
        System.out.println("üîë Password length: " + FROM_PASSWORD.trim().length());
        
        try {
            Properties props = new Properties();
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.ssl.enable", "true");
            props.put("mail.smtp.host", SMTP_HOST);
            props.put("mail.smtp.port", "465");
            props.put("mail.smtp.ssl.protocols", "TLSv1.2");
            props.put("mail.smtp.localhost", "localhost"); // Fix hostname issue
            props.put("mail.smtp.localhost.address", "127.0.0.1"); // Set valid hostname for HELO
            props.put("mail.debug", "true"); // B·∫≠t debug ƒë·ªÉ xem chi ti·∫øt
            
            System.out.println("üîß Properties configured for SSL");
            
            Session session = Session.getInstance(props, new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    System.out.println("üîê Authenticating with Gmail...");
                    return new PasswordAuthentication(FROM_EMAIL, FROM_PASSWORD.trim());
                }
            });
            
            session.setDebug(true); // B·∫≠t debug session
            
            System.out.println("üìù Creating message...");
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(FROM_EMAIL));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
            message.setSubject("M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - H·ªá th·ªëng Qu·∫£n l√Ω B·ªánh vi·ªán");
            message.setContent(createOTPEmailContent(otp), "text/html; charset=utf-8");
            
            System.out.println("üì§ Sending message via SSL...");
            Transport.send(message);
            System.out.println("‚úÖ SSL th√†nh c√¥ng!");
            return true;
            
        } catch (Exception e) {
            System.out.println("‚ùå SSL th·∫•t b·∫°i: " + e.getClass().getSimpleName() + " - " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * G·ª≠i email qua STARTTLS (port 587)
     */
    private static boolean sendOTPEmailSTARTTLS(String toEmail, String otp) {
        System.out.println("üîÑ Th·ª≠ g·ª≠i qua STARTTLS (port 587)...");
        System.out.println("üìß From: " + FROM_EMAIL);
        System.out.println("üìß To: " + toEmail);
        
        try {
            Properties props = new Properties();
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.starttls.enable", "true");
            props.put("mail.smtp.starttls.required", "true"); // B·∫Øt bu·ªôc STARTTLS
            props.put("mail.smtp.host", SMTP_HOST);
            props.put("mail.smtp.port", "587");
            props.put("mail.smtp.ssl.protocols", "TLSv1.2");
            props.put("mail.smtp.ssl.trust", SMTP_HOST); // Trust Gmail
            props.put("mail.smtp.localhost", "localhost"); // Fix hostname issue
            props.put("mail.smtp.localhost.address", "127.0.0.1"); // Set valid hostname for HELO
            props.put("mail.debug", "false"); // T·∫Øt debug ƒë·ªÉ clean log
            
            System.out.println("üîß Properties configured for STARTTLS");
            
            Session session = Session.getInstance(props, new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    System.out.println("üîê Authenticating with Gmail (STARTTLS)...");
                    return new PasswordAuthentication(FROM_EMAIL, FROM_PASSWORD.trim());
                }
            });
            
            System.out.println("üìù Creating message...");
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(FROM_EMAIL));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
            message.setSubject("M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - H·ªá th·ªëng Qu·∫£n l√Ω B·ªánh vi·ªán");
            message.setContent(createOTPEmailContent(otp), "text/html; charset=utf-8");
            
            System.out.println("üì§ Sending message via STARTTLS...");
            Transport.send(message);
            System.out.println("‚úÖ STARTTLS th√†nh c√¥ng!");
            return true;
            
        } catch (jakarta.mail.AuthenticationFailedException e) {
            System.out.println("‚ùå STARTTLS Authentication th·∫•t b·∫°i: " + e.getMessage());
            System.out.println("üí° App Password c√≥ th·ªÉ c·∫ßn c·∫≠p nh·∫≠t");
            return false;
        } catch (Exception e) {
            System.out.println("‚ùå STARTTLS th·∫•t b·∫°i: " + e.getClass().getSimpleName() + " - " + e.getMessage());
            if (e.getMessage().contains("Connection")) {
                System.out.println("üí° Ki·ªÉm tra firewall c√≥ ch·∫∑n port 587 kh√¥ng");
            }
            return false;
        }
    }
    
    /**
     * Development mode - ch·ªâ log OTP ra console cho vi·ªác test
     * @param toEmail Email ng∆∞·ªùi nh·∫≠n
     * @param otp M√£ OTP
     * @return lu√¥n tr·∫£ v·ªÅ true
     */
    public static boolean sendOTPEmailDevelopmentMode(String toEmail, String otp) {
        System.out.println("üß™ =================================");
        System.out.println("üß™ DEVELOPMENT MODE - OTP EMAIL");
        System.out.println("üß™ =================================");
        System.out.println("üìß To: " + toEmail);
        System.out.println("üî¢ OTP: " + otp);
        System.out.println("‚è∞ Valid for: 5 minutes");
        System.out.println("üß™ =================================");
        System.out.println("üí° Copy OTP n√†y ƒë·ªÉ test: " + otp);
        System.out.println("üß™ =================================");
        
        return true;
    }
    
    /**
     * Ki·ªÉm tra c√≥ ph·∫£i development mode kh√¥ng
     * @return true n·∫øu l√† development mode
     */
    public static boolean isDevelopmentMode() {
        // C√≥ th·ªÉ check environment variable ho·∫∑c config
        // ·ªû ƒë√¢y t√¥i d√πng c√°ch ƒë∆°n gi·∫£n: ki·ªÉm tra email config
        return FROM_EMAIL.contains("lechitrung1810") || FROM_EMAIL.equals("test@example.com");
    }
} 
