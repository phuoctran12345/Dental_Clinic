package controller;

import dao.ServiceDAO;
import dao.PatientDAO;
import dao.BillDAO;
import dao.AppointmentDAO;
import model.Service;
import model.Patients;
import model.User;
import model.Bill;
import model.SlotReservation;
import com.google.gson.Gson;
import utils.DBContext;
import utils.PayOSConfig;
import java.util.HashMap;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.math.BigDecimal;
import java.security.MessageDigest;
import java.time.LocalDateTime;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.UUID;
import java.sql.SQLException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.OutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Map;
import java.io.PrintWriter;

/**
 * Servlet x·ª≠ l√Ω thanh to√°n PayOS v·ªõi QR code + t√≠ch h·ª£p ƒë·∫∑t l·ªãch appointment
 */
@WebServlet("/payment")
public class PayOSServlet extends HttpServlet {
    
    private ServiceDAO serviceDAO = new ServiceDAO();
    private PatientDAO patientDAO = new PatientDAO();
    private BillDAO billDAO = new BillDAO();
    private Gson gson = new Gson();
    
    // PayOS Configuration - s·ª≠ d·ª•ng t·ª´ PayOSConfig
    private static final String PAYOS_CLIENT_ID = PayOSConfig.CLIENT_ID;
    private static final String PAYOS_API_KEY = PayOSConfig.API_KEY;
    private static final String PAYOS_CHECKSUM_KEY = PayOSConfig.CHECKSUM_KEY;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        String action = request.getParameter("action");
        if (action == null) {
            action = "create";
        }

        try {
            switch (action) {
                case "create":
                    handleCreatePayment(request, response);
                    break;
                case "success":
                    handlePaymentSuccess(request, response);
                    break;
                case "cancel":
                    handlePaymentCancel(request, response);
                    break;
                case "checkStatus":
                    handleCheckPaymentStatus(request, response);
                    break;
                default:
                    handleCreatePayment(request, response);
                    break;
            }
        } catch (Exception e) {
            System.err.println("L·ªói PayOSServlet: " + e.getMessage());
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, 
                             "L·ªói x·ª≠ l√Ω thanh to√°n: " + e.getMessage());
        }
    }

    /**
     * T·∫°o thanh to√°n m·ªõi - ENHANCED: Support appointment booking
     */
    private void handleCreatePayment(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // L·∫•y th√¥ng tin t·ª´ request
        String serviceIdStr = request.getParameter("serviceId");
        String doctorIdStr = request.getParameter("doctorId");
        String workDate = request.getParameter("workDate");
        String slotIdStr = request.getParameter("slotId");
        String reason = request.getParameter("reason");
        String reservationIdStr = request.getParameter("reservationId"); // T·ª´ slot reservation
        
        if (serviceIdStr == null || serviceIdStr.isEmpty()) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Thi·∫øu th√¥ng tin d·ªãch v·ª•");
            return;
        }

        try {
            int serviceId = Integer.parseInt(serviceIdStr);
            Service service = serviceDAO.getServiceById(serviceId);
            
            if (service == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•");
                return;
            }

            // L·∫•y th√¥ng tin user
            HttpSession session = request.getSession();
            User user = (User) session.getAttribute("user");
            if (user == null) {
                response.sendRedirect("login.jsp");
                return;
            }

            // L·∫•y th√¥ng tin patient
            Patients patient = patientDAO.getPatientByUserId(user.getId());
            if (patient == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n");
                return;
            }

            // KI·ªÇM TRA: N·∫øu c√≥ appointment th√¥ng tin, validate slot
            if (doctorIdStr != null && workDate != null && slotIdStr != null) {
                int doctorId = Integer.parseInt(doctorIdStr);
                int slotId = Integer.parseInt(slotIdStr);
                LocalDate appointmentDate = LocalDate.parse(workDate);
                
                // Ki·ªÉm tra slot c√≥ available kh√¥ng
                if (!AppointmentDAO.isSlotAvailable(doctorId, appointmentDate, slotId)) {
                    response.sendError(HttpServletResponse.SC_CONFLICT, 
                        "Slot ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi ng∆∞·ªùi kh√°c. Vui l√≤ng ch·ªçn slot kh√°c.");
                    return;
                }
                
                // RESERVATION: T·∫°m kh√≥a slot trong 5 ph√∫t ƒë·ªÉ thanh to√°n
                SlotReservation reservation = AppointmentDAO.createReservation(
                    doctorId, appointmentDate, slotId, patient.getPatientId(), reason);
                
                if (reservation == null) {
                    response.sendError(HttpServletResponse.SC_CONFLICT, 
                        "Kh√¥ng th·ªÉ t·∫°m kh√≥a slot. Vui l√≤ng th·ª≠ l·∫°i.");
                    return;
                }
                
                // L∆∞u reservation ID ƒë·ªÉ confirm sau khi thanh to√°n
                session.setAttribute("activeReservation", reservation);
                System.out.println("üîí ƒê√É T·∫†M KH√ìA: Slot " + slotId + " cho l·ªãch h·∫πn " + reservation.getAppointmentId());
                System.out.println("üìÖ B√°c sƒ©: " + reservation.getDoctorId() + " | Ng√†y: " + reservation.getWorkDate());
                System.out.println("‚è∞ Slot hi·ªán t·∫°i: ƒêANG GI·ªÆ CH·ªñ (5 ph√∫t)");
            }

            // T·∫°o order ID v√† bill ID
            String orderId = generateOrderId();
            String billId = generateBillId();
            
            // T·∫°o Bill object - ENHANCED: L∆∞u th√¥ng tin appointment
            Bill bill = new Bill();
            bill.setBillId(billId);
            bill.setOrderId(orderId);
            bill.setServiceId(serviceId);
            bill.setPatientId(patient.getPatientId());
            bill.setUserId(user.getId());
            bill.setAmount(BigDecimal.valueOf(service.getPrice()));
            bill.setOriginalPrice(BigDecimal.valueOf(service.getPrice()));
            bill.setCustomerName(patient.getFullName());
            bill.setCustomerPhone(patient.getPhone());
            bill.setPaymentMethod("PayOS");
            bill.setPaymentStatus("pending");
            
            // Th√¥ng tin appointment n·∫øu c√≥
            if (doctorIdStr != null && !doctorIdStr.isEmpty()) {
                try {
                    bill.setDoctorId(Integer.parseInt(doctorIdStr));
                } catch (NumberFormatException e) {
                    // Ignore invalid doctor ID
                }
            }
            
            if (workDate != null && !workDate.isEmpty()) {
                try {
                    bill.setAppointmentDate(java.sql.Date.valueOf(workDate));
                } catch (IllegalArgumentException e) {
                    // Ignore invalid date format
                }
            }
            
            if (slotIdStr != null && !slotIdStr.isEmpty()) {
                try {
                    // L∆∞u slot ID v√†o notes field
                    String appointmentNotes = (reason != null ? reason : "") + 
                                            " | SlotID:" + slotIdStr;
                    bill.setAppointmentNotes(appointmentNotes);
                } catch (NumberFormatException e) {
                    // Ignore invalid slot ID
                }
            }
            
            // L∆∞u Bill v√†o database
            Bill savedBill = billDAO.createBill(bill);
            if (savedBill == null) {
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n");
                return;
            }
            
            // T·∫°o payment request v·ªõi PayOS API
            String payosQRCode = createPayOSPaymentRequest(savedBill, service);
            
            // T·∫°o th√¥ng tin thanh to√°n ƒë·ªÉ hi·ªÉn th·ªã
            PaymentInfo paymentInfo = new PaymentInfo(
                savedBill.getOrderId(),
                savedBill.getBillId(),
                service.getServiceName(),
                service.getDescription(),
                savedBill.getAmount().intValue(),
                savedBill.getCustomerName(),
                savedBill.getCustomerPhone(),
                doctorIdStr,
                workDate,
                slotIdStr,
                reason,
                payosQRCode  // QR code th·∫≠t t·ª´ PayOS
            );

            // L∆∞u th√¥ng tin v√†o session
            session.setAttribute("paymentInfo", paymentInfo);
            session.setAttribute("serviceInfo", service);
            session.setAttribute("currentBill", savedBill);

            // Forward t·ªõi JSP thanh to√°n
            request.setAttribute("paymentInfo", paymentInfo);
            request.setAttribute("service", service);
            request.setAttribute("patient", patient);
            request.getRequestDispatcher("/payment.jsp").forward(request, response);
            
        } catch (NumberFormatException e) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Tham s·ªë kh√¥ng h·ª£p l·ªá: " + e.getMessage());
        } catch (SQLException e) {
            System.err.println("Database error: " + e.getMessage());
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "L·ªói c∆° s·ªü d·ªØ li·ªáu");
        }
    }

    /**
     * X·ª≠ l√Ω khi thanh to√°n th√†nh c√¥ng - ENHANCED: T·∫°o appointment record
     */
    private void handlePaymentSuccess(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        HttpSession session = request.getSession();
        PaymentInfo paymentInfo = (PaymentInfo) session.getAttribute("paymentInfo");
        Bill currentBill = (Bill) session.getAttribute("currentBill");
        SlotReservation activeReservation = (SlotReservation) session.getAttribute("activeReservation");
        
        if (paymentInfo == null || currentBill == null) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n");
            return;
        }

        try {
            // 1. C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n trong database
            boolean paymentUpdated = billDAO.updatePaymentStatus(
                currentBill.getBillId(), 
                "success", 
                generateTransactionId(), 
                "Payment completed successfully"
            );
            
            if (!paymentUpdated) {
                System.err.println("‚ùå KH√îNG TH·ªÇ C·∫¨P NH·∫¨T: Tr·∫°ng th√°i thanh to√°n cho h√≥a ƒë∆°n " + currentBill.getBillId());
            } else {
                System.out.println("‚úÖ C·∫¨P NH·∫¨T TH√ÄNH C√îNG: Thanh to√°n cho h√≥a ƒë∆°n " + currentBill.getBillId());
            }
            
            // 2. T·∫†O APPOINTMENT RECORD n·∫øu c√≥ th√¥ng tin appointment
            boolean appointmentCreated = false;
            if (activeReservation != null) {
                try {
                    // Complete reservation - chuy·ªÉn status th√†nh "ƒê√É ƒê·∫∂T"
                    boolean reservationCompleted = AppointmentDAO.completeReservation(
                        activeReservation.getAppointmentId());
                    
                    if (reservationCompleted) {
                        appointmentCreated = true;
                        System.out.println("üéâ T·∫†O L·ªäCH H·∫∏N TH√ÄNH C√îNG: " + activeReservation.getAppointmentId());
                        System.out.println("üë®‚Äç‚öïÔ∏è B√°c sƒ©: " + activeReservation.getDoctorId());
                        System.out.println("üìÖ Ng√†y kh√°m: " + activeReservation.getWorkDate());
                        System.out.println("‚è∞ Ca kh√°m: Slot " + activeReservation.getSlotId());
                        System.out.println("üë§ B·ªánh nh√¢n: " + activeReservation.getPatientId());
                        System.out.println("üìù Tr·∫°ng th√°i: ƒê√É ƒê·∫∂T");
                    } else {
                        System.err.println("‚ùå TH·∫§T B·∫†I: Kh√¥ng th·ªÉ ho√†n th√†nh ƒë·∫∑t ch·ªó " + activeReservation.getAppointmentId());
                    }
                } catch (Exception e) {
                    System.err.println("‚ùå L·ªñI T·∫†O L·ªäCH H·∫∏N: " + e.getMessage());
                    e.printStackTrace();
                }
            } else if (currentBill.getDoctorId() != null && currentBill.getAppointmentDate() != null) {
                // Fallback: T·∫°o appointment tr·ª±c ti·∫øp n·∫øu kh√¥ng c√≥ reservation
                try {
                    // Extract slot ID from notes
                    int slotId = extractSlotIdFromNotes(currentBill.getAppointmentNotes());
                    if (slotId > 0) {
                        boolean directAppointment = AppointmentDAO.insertAppointmentBySlotId(
                            slotId,
                            currentBill.getPatientId(),
                            currentBill.getDoctorId(),
                            currentBill.getAppointmentDate().toLocalDate(),
                            LocalTime.of(9, 0), // Default time, s·∫Ω ƒë∆∞·ª£c override b·ªüi slot
                            currentBill.getAppointmentNotes()
                        );
                        
                        if (directAppointment) {
                            appointmentCreated = true;
                            System.out.println("üéØ T·∫†O L·ªäCH H·∫∏N TR·ª∞C TI·∫æP TH√ÄNH C√îNG");
                        }
                    }
                } catch (Exception e) {
                    System.err.println("‚ùå L·ªñI T·∫†O L·ªäCH H·∫∏N TR·ª∞C TI·∫æP: " + e.getMessage());
                }
            }
            
            // 3. Log k·∫øt qu·∫£
            if (appointmentCreated) {
                System.out.println("üéâ === THANH TO√ÅN & L·ªäCH H·∫∏N HO√ÄN T·∫§T ===");
                System.out.println("üí∞ H√≥a ƒë∆°n: " + currentBill.getBillId() + " ‚Üí ƒê√É THANH TO√ÅN");
                System.out.println("üìÖ L·ªãch h·∫πn: ƒê√É T·∫†O V√Ä X√ÅC NH·∫¨N");
                System.out.println("=============================================");
            }

            // Chuy·ªÉn t·ªõi trang th√†nh c√¥ng
            request.setAttribute("paymentInfo", paymentInfo);
            request.setAttribute("appointmentCreated", appointmentCreated);
            request.getRequestDispatcher("/payment-success.jsp").forward(request, response);
            
            // X√≥a session
            session.removeAttribute("paymentInfo");
            session.removeAttribute("serviceInfo");
            session.removeAttribute("currentBill");
            session.removeAttribute("activeReservation");
            
        } catch (SQLException e) {
            System.err.println("‚ùå L·ªñI C∆† S·ªû D·ªÆ LI·ªÜU khi x·ª≠ l√Ω thanh to√°n th√†nh c√¥ng: " + e.getMessage());
            e.printStackTrace();
            // V·∫´n hi·ªÉn th·ªã success page nh∆∞ng log l·ªói
            request.setAttribute("paymentInfo", paymentInfo);
            request.setAttribute("appointmentCreated", false);
            request.getRequestDispatcher("/payment-success.jsp").forward(request, response);
        }
    }

    /**
     * Extract slot ID t·ª´ appointment notes
     */
    private int extractSlotIdFromNotes(String notes) {
        if (notes == null) return 0;
        
        try {
            // T√¨m pattern "SlotID:X"
            String[] parts = notes.split("\\|");
            for (String part : parts) {
                part = part.trim();
                if (part.startsWith("SlotID:")) {
                    return Integer.parseInt(part.substring(7));
                }
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI TR√çCH XU·∫§T Slot ID t·ª´ ghi ch√∫: " + notes);
        }
        return 0;
    }

    /**
     * X·ª≠ l√Ω khi h·ªßy thanh to√°n - ENHANCED: H·ªßy slot reservation
     */
    private void handlePaymentCancel(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        HttpSession session = request.getSession();
        Bill currentBill = (Bill) session.getAttribute("currentBill");
        SlotReservation activeReservation = (SlotReservation) session.getAttribute("activeReservation");
        
        System.out.println("üö´ === PAYMENT CANCELLATION ===");
        
        try {
            // 1. H·ª¶Y SLOT RESERVATION - Tr·∫£ slot v·ªÅ h√†ng ƒë·ª£i
            if (activeReservation != null) {
                boolean reservationCancelled = AppointmentDAO.cancelReservation(
                    activeReservation.getAppointmentId());
                
                if (reservationCancelled) {
                    System.out.println("‚úÖ TR·∫¢ SLOT V·ªÄ H√ÄNG ƒê·ª¢I: Slot " + activeReservation.getSlotId() + 
                                     " ƒë√£ ƒë∆∞·ª£c tr·∫£ v·ªÅ h√†ng ƒë·ª£i");
                    System.out.println("üë®‚Äç‚öïÔ∏è B√°c sƒ©: " + activeReservation.getDoctorId() + 
                                     " | üìÖ Ng√†y: " + activeReservation.getWorkDate());
                    System.out.println("üîì Tr·∫°ng th√°i: Slot hi·ªán ƒë√£ S·∫¥N S√ÄNG cho ng∆∞·ªùi kh√°c ƒë·∫∑t");
                } else {
                    System.err.println("‚ùå KH√îNG TH·ªÇ H·ª¶Y: ƒê·∫∑t ch·ªó " + activeReservation.getAppointmentId());
                }
            }
            
            // 2. C·∫≠p nh·∫≠t tr·∫°ng th√°i bill th√†nh cancelled
        if (currentBill != null) {
            try {
                    boolean billCancelled = billDAO.updatePaymentStatus(
                    currentBill.getBillId(), 
                    "cancelled", 
                    null, 
                        "Payment cancelled by user - Slot returned to queue"
                    );
                    
                    if (billCancelled) {
                        System.out.println("‚úÖ H·ª¶Y H√ìA ƒê∆†N TH√ÄNH C√îNG: " + currentBill.getBillId());
                    } else {
                        System.err.println("‚ùå KH√îNG TH·ªÇ H·ª¶Y: H√≥a ƒë∆°n " + currentBill.getBillId());
                    }
            } catch (SQLException e) {
                    System.err.println("‚ùå L·ªñI H·ª¶Y H√ìA ƒê∆†N: " + e.getMessage());
                }
            }
            
            // 3. Cleanup expired reservations (ƒë·ªÉ d·ªçn d·∫πp c√°c slot kh√°c ƒë√£ expired)
            try {
                int cleanedUp = AppointmentDAO.cleanupExpiredReservations();
                if (cleanedUp > 0) {
                    System.out.println("üßπ D·ªåN D·∫∏P TH√ÄNH C√îNG: ƒê√£ x√≥a " + cleanedUp + " ƒë·∫∑t ch·ªó h·∫øt h·∫°n");
                }
            } catch (Exception e) {
                System.err.println("‚ùå L·ªñI D·ªåN D·∫∏P: " + e.getMessage());
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI TRONG QU√Å TR√åNH H·ª¶Y: " + e.getMessage());
            e.printStackTrace();
        }
        
        // 4. Clear session data
        session.removeAttribute("paymentInfo");
        session.removeAttribute("serviceInfo");
        session.removeAttribute("currentBill");
        session.removeAttribute("activeReservation");
        
        System.out.println("üîÑ X√ìA SESSION: T·∫•t c·∫£ d·ªØ li·ªáu thanh to√°n ƒë√£ ƒë∆∞·ª£c x√≥a");
        System.out.println("=====================================");
        
        // 5. Forward t·ªõi trang cancel v·ªõi th√¥ng b√°o slot ƒë√£ ƒë∆∞·ª£c tr·∫£ v·ªÅ
        request.setAttribute("slotReleased", activeReservation != null);
        request.setAttribute("reservationInfo", activeReservation);
        request.getRequestDispatcher("/payment-cancel.jsp").forward(request, response);
    }
    
    /**
     * ENHANCED: Check payment status - support both PayOS and MB Bank
     */
    private void handleCheckPaymentStatus(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        response.setContentType("application/json;charset=UTF-8");
        PrintWriter out = response.getWriter();
        
        String orderId = request.getParameter("orderId");
        
        if (orderId == null || orderId.isEmpty()) {
            out.println("{\"status\": \"error\", \"message\": \"Missing orderId\"}");
            return;
        }
        
        try {
            // Ki·ªÉm tra trong database tr∆∞·ªõc
            BillDAO billDAO = new BillDAO();
            Bill bill = billDAO.getBillByOrderId(orderId);
            
            if (bill == null) {
                out.println("{\"status\": \"error\", \"message\": \"Order not found\"}");
                return;
            }
            
            // N·∫øu ƒë√£ thanh to√°n trong database
            if ("success".equals(bill.getPaymentStatus())) {
                System.out.println("üíæ THANH TO√ÅN TH·∫¨T: T√¨m th·∫•y trong c∆° s·ªü d·ªØ li·ªáu " + bill.getTransactionId());
                out.println("{\"status\": \"success\", \"message\": \"Payment completed\"}");
                return;
            }
            
            // SIMULATE: MB Bank payment detection (v√¨ kh√¥ng c√≥ API th·ª±c)
            // Trong th·ª±c t·∫ø, ƒë√¢y s·∫Ω l√† API check t·ª´ MB Bank ho·∫∑c webhook
            boolean isMBBankPaid = simulateMBBankPaymentCheck(orderId, bill.getAmount().intValue());
            
            if (isMBBankPaid) {
                // C·∫≠p nh·∫≠t database th√†nh c√¥ng
                String transactionId = "MBBANK_" + System.currentTimeMillis();
                boolean updated = billDAO.updatePaymentStatus(
                    bill.getBillId(),
                    "success", 
                    transactionId,
                    "Payment detected via MB Bank simulation"
                );
                
                if (updated) {
                    System.out.println("üéâ C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI: Thanh to√°n cho ƒë∆°n h√†ng " + orderId);
                    out.println("{\"status\": \"success\", \"message\": \"Payment completed via MB Bank\"}");
                } else {
                    out.println("{\"status\": \"error\", \"message\": \"Failed to update payment status\"}");
                }
            } else {
                // V·∫´n pending
                out.println("{\"status\": \"pending\", \"message\": \"Payment not detected yet\"}");
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI KI·ªÇM TRA TR·∫†NG TH√ÅI: " + e.getMessage());
            e.printStackTrace();
            out.println("{\"status\": \"error\", \"message\": \"Check failed: " + e.getMessage() + "\"}");
        }
    }
    
    /**
     * REAL: Multi-bank payment detection - FIXED: Only detect REAL payments
     * Support t·∫•t c·∫£ ng√¢n h√†ng Vi·ªát Nam via VietQR - NO FALSE POSITIVES
     */
    private boolean simulateMBBankPaymentCheck(String orderId, int amount) {
        
        System.out.println("üîç KI·ªÇM TRA THANH TO√ÅN TH·∫¨T: " + orderId);
        System.out.println("üè¶ Ch·ªâ ph√°t hi·ªán giao d·ªãch ng√¢n h√†ng TH·ª∞C S·ª∞");
        
        // METHOD 1: Check database for REAL payment status updates
        boolean realDBResult = checkRealDatabasePayment(orderId);
        if (realDBResult) {
            System.out.println("‚úÖ PH√ÅT HI·ªÜN: Thanh to√°n th·∫≠t trong c∆° s·ªü d·ªØ li·ªáu!");
            return true;
        }
        
        // METHOD 2: Check webhook notifications table for REAL notifications
        boolean realWebhookResult = checkRealWebhookNotifications(orderId);
        if (realWebhookResult) {
            System.out.println("‚úÖ PH√ÅT HI·ªÜN: Th√¥ng b√°o webhook th·∫≠t!");
            return true;
        }
        
        // METHOD 3: Future - Real VietQR API integration
        boolean realVietQRResult = checkRealVietQRAPI(orderId, amount);
        if (realVietQRResult) {
            System.out.println("‚úÖ PH√ÅT HI·ªÜN: Giao d·ªãch VietQR th·∫≠t!");
            return true;
        }
        
        // METHOD 4: Future - Real bank API integration
        boolean realBankAPIResult = checkRealBankAPI(orderId, amount);
        if (realBankAPIResult) {
            System.out.println("‚úÖ PH√ÅT HI·ªÜN: X√°c nh·∫≠n t·ª´ API ng√¢n h√†ng th·∫≠t!");
            return true;
        }
        
        System.out.println("‚è≥ CH∆ØA PH√ÅT HI·ªÜN: Thanh to√°n th·∫≠t cho " + orderId);
        return false; // ONLY return true for REAL payments
    }
    
    /**
     * METHOD 1: Check database for REAL payment updates (manual or webhook)
     */
    private boolean checkRealDatabasePayment(String orderId) {
        try {
            BillDAO billDAO = new BillDAO();
            Bill bill = billDAO.getBillByOrderId(orderId);
            
            if (bill != null && "success".equals(bill.getPaymentStatus())) {
                System.out.println("üíæ THANH TO√ÅN TH·∫¨T: T√¨m th·∫•y trong c∆° s·ªü d·ªØ li·ªáu " + bill.getTransactionId());
                return true;
            }
            
            return false;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI KI·ªÇM TRA C∆† S·ªû D·ªÆ LI·ªÜU: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * METHOD 2: Check REAL webhook notifications
     */
    private boolean checkRealWebhookNotifications(String orderId) {
        try {
            // TODO: Check webhook_notifications table for REAL bank notifications
            // SELECT * FROM webhook_notifications 
            // WHERE order_id = ? AND status = 'SUCCESS' AND verified = 1
            
            System.out.println("üìã ƒêang ki·ªÉm tra th√¥ng b√°o webhook TH·∫¨T...");
            
            // For now, return false until real webhook table is implemented
            return false;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI KI·ªÇM TRA WEBHOOK: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * METHOD 3: Future - Real VietQR API integration
     */
    private boolean checkRealVietQRAPI(String orderId, int amount) {
        try {
            // TODO: Integrate with REAL VietQR API
            // String apiUrl = "https://api.vietqr.io/v2/transaction/search";
            // Check for actual transaction with exact amount and order description
            
            System.out.println("üáªüá≥ ƒêang ki·ªÉm tra API VietQR TH·∫¨T...");
            System.out.println("‚ùå API VietQR th·∫≠t ch∆∞a ƒë∆∞·ª£c t√≠ch h·ª£p");
            
            return false; // Only return true when REAL API integration is done
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI API VIETQR: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * METHOD 4: Future - Real bank API integration
     */
    private boolean checkRealBankAPI(String orderId, int amount) {
        try {
            // TODO: Integrate with REAL bank APIs
            // Check MB Bank, Vietcombank, BIDV APIs for actual transactions
            
            System.out.println("üè¶ ƒêang ki·ªÉm tra API ng√¢n h√†ng TH·∫¨T...");
            System.out.println("‚ùå API ng√¢n h√†ng th·∫≠t ch∆∞a ƒë∆∞·ª£c t√≠ch h·ª£p");
            
            return false; // Only return true when REAL API integration is done
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI API NG√ÇN H√ÄNG: " + e.getMessage());
            return false;
        }
    }

    /**
     * Extract timestamp from Order ID
     */
    private long extractOrderTime(String orderId) {
        try {
            if (orderId != null && orderId.startsWith("ORDER_")) {
                String timeStr = orderId.replace("ORDER_", "");
                return Long.parseLong(timeStr);
            }
        } catch (NumberFormatException e) {
            System.out.println("‚ùå KH√îNG TH·ªÇ PH√ÇN T√çCH: Th·ªùi gian t·ª´ m√£ ƒë∆°n h√†ng " + orderId);
        }
        return System.currentTimeMillis(); // Fallback
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // X·ª≠ l√Ω webhook t·ª´ PayOS ho·∫∑c MB Bank
        String action = request.getParameter("action");
        String contentType = request.getContentType();
        
        if ("webhook".equals(action) || (contentType != null && contentType.contains("application/json"))) {
            handleMBBankWebhook(request, response);
        } else {
            doGet(request, response);
        }
    }

    /**
     * ENHANCED: X·ª≠ l√Ω webhook t·ª´ MB Bank (Real-time payment notification)
     * Endpoint: POST /payment?action=webhook
     * Content-Type: application/json
     */
    private void handleMBBankWebhook(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        
        response.setContentType("application/json;charset=UTF-8");
        PrintWriter out = response.getWriter();
        
        System.out.println("üîî === NH·∫¨N WEBHOOK ===");
        System.out.println("Ph∆∞∆°ng th·ª©c: " + request.getMethod());
        System.out.println("Lo·∫°i n·ªôi dung: " + request.getContentType());
        
        try {
            // ƒê·ªçc JSON payload t·ª´ webhook
            StringBuilder sb = new StringBuilder();
            String line;
            try (BufferedReader reader = request.getReader()) {
                while ((line = reader.readLine()) != null) {
                    sb.append(line);
                }
            }
            
            String webhookPayload = sb.toString();
            System.out.println("D·ªØ li·ªáu Webhook: " + webhookPayload);
            
            if (webhookPayload.isEmpty()) {
                System.out.println("‚ö†Ô∏è D·ªØ li·ªáu webhook tr·ªëng");
                out.println("{\"status\": \"error\", \"message\": \"Empty payload\"}");
                return;
            }
            
            // Parse webhook data
            Map webhookData = gson.fromJson(webhookPayload, Map.class);
            
            // L·∫•y th√¥ng tin transaction
            String transactionId = (String) webhookData.get("transactionId");
            String description = (String) webhookData.get("description");
            Double amount = (Double) webhookData.get("amount");
            String status = (String) webhookData.get("status");
            String bankCode = (String) webhookData.get("bankCode");
            
            System.out.println("üè¶ X·ª≠ l√Ω webhook MB Bank:");
            System.out.println("   M√£ giao d·ªãch: " + transactionId);
            System.out.println("   M√¥ t·∫£: " + description);
            System.out.println("   S·ªë ti·ªÅn: " + amount);
            System.out.println("   Tr·∫°ng th√°i: " + status);
            System.out.println("   Ng√¢n h√†ng: " + bankCode);
            
            // T√¨m Order/Bill t·ª´ description
            String billId = extractBillIdFromDescription(description);
            
            if (billId != null && "SUCCESS".equalsIgnoreCase(status)) {
                // C·∫≠p nh·∫≠t payment status trong database
                BillDAO billDAO = new BillDAO();
                Bill bill = billDAO.getBillById(billId);
                
                if (bill != null && "pending".equals(bill.getPaymentStatus())) {
                    boolean updated = billDAO.updatePaymentStatus(
                        billId,
                        "success",
                        transactionId,
                        "Payment confirmed via MB Bank webhook"
                    );
                    
                    if (updated) {
                        System.out.println("üéâ WEBHOOK TH√ÄNH C√îNG: ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n cho " + billId);
                        out.println("{\"status\": \"success\", \"message\": \"Payment updated\"}");
                        
                        // TODO: Trigger real-time notification to client (WebSocket/SSE)
                        triggerClientNotification(bill.getOrderId(), "success");
                        
                    } else {
                        System.err.println("‚ùå TH·∫§T B·∫†I: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n cho " + billId);
                        out.println("{\"status\": \"error\", \"message\": \"Update failed\"}");
                    }
                } else {
                    System.out.println("‚ÑπÔ∏è H√ìA ƒê∆†N ƒê√É X·ª¨ L√ù: Ho·∫∑c kh√¥ng t√¨m th·∫•y " + billId);
                    out.println("{\"status\": \"already_processed\", \"message\": \"Bill already updated\"}");
                }
            } else {
                System.out.println("‚ö†Ô∏è D·ªÆ LI·ªÜU WEBHOOK KH√îNG H·ª¢P L·ªÜ: Ho·∫∑c giao d·ªãch th·∫•t b·∫°i");
                out.println("{\"status\": \"ignored\", \"message\": \"Invalid data or failed transaction\"}");
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI X·ª¨ L√ù WEBHOOK: " + e.getMessage());
            e.printStackTrace();
            out.println("{\"status\": \"error\", \"message\": \"Processing failed: " + e.getMessage() + "\"}");
        }
        
        System.out.println("=========================");
    }
    
    /**
     * Extract Bill ID t·ª´ transaction description
     */
    private String extractBillIdFromDescription(String description) {
        if (description == null) return null;
        
        // T√¨m pattern BILL_XXXXXXXX trong description
        String[] parts = description.split("\\s+");
        for (String part : parts) {
            if (part.startsWith("BILL_") && part.length() >= 13) {
                return part;
            }
        }
        
        // Alternative: n·∫øu description ch·ªâ ch·ª©a bill ID
        if (description.startsWith("BILL_")) {
            return description;
        }
        
        return null;
    }
    
    /**
     * Trigger real-time notification to client browser
     * TODO: Implement v·ªõi WebSocket ho·∫∑c Server-Sent Events
     */
    private void triggerClientNotification(String orderId, String status) {
        System.out.println("üîî TH√îNG B√ÅO KH√ÅCH H√ÄNG: " + orderId + " ‚Üí " + status);
        // TODO: WebSocket push notification
        // TODO: Server-Sent Events
        // TODO: Database flag for polling
    }

    /**
     * T·∫°o Order ID unique
     */
    private String generateOrderId() {
        return "ORDER_" + System.currentTimeMillis();
    }

    /**
     * T·∫°o Bill ID unique
     */
    private String generateBillId() {
        return "BILL_" + UUID.randomUUID().toString().replace("-", "").substring(0, 8).toUpperCase();
    }
    
    /**
     * T·∫°o Transaction ID
     */
    private String generateTransactionId() {
        return "TXN_" + System.currentTimeMillis() + "_" + UUID.randomUUID().toString().substring(0, 8);
    }

    /**
     * T·∫°o signature cho PayOS
     */
    private String generateSignature(String data) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hash = md.digest((data + PAYOS_CHECKSUM_KEY).getBytes("UTF-8"));
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    /**
     * T·∫°o payment request th·∫≠t v·ªõi PayOS API
     */
    private String createPayOSPaymentRequest(Bill bill, Service service) {
        try {
            // Log ƒë·ªÉ debug
            System.out.println("=== Y√äU C·∫¶U API PAYOS ===");
            System.out.println("M√£ ƒë∆°n h√†ng: " + bill.getOrderId());
            System.out.println("S·ªë ti·ªÅn: " + bill.getAmount().intValue());
            
            // T·∫°o JSON payload cho PayOS
            Map<String, Object> paymentData = new HashMap<>();
            
            // Fix: PayOS payload format ƒë√∫ng
            String orderIdStr = bill.getOrderId().replace("ORDER_", "");
            long orderCode = Math.abs(orderIdStr.hashCode()) % 999999L; // Positive long
            
            paymentData.put("orderCode", orderCode);
            paymentData.put("amount", bill.getAmount().intValue());
            paymentData.put("description", service.getServiceName());
            paymentData.put("buyerName", bill.getCustomerName());
            paymentData.put("buyerPhone", bill.getCustomerPhone());
            paymentData.put("buyerEmail", bill.getCustomerEmail() != null ? bill.getCustomerEmail() : "customer@example.com");
            paymentData.put("cancelUrl", "http://localhost:8080/RoleStaff/payment?action=cancel");
            paymentData.put("returnUrl", "http://localhost:8080/RoleStaff/payment?action=success");
            
            // Th√™m expiredAt (required)
            paymentData.put("expiredAt", System.currentTimeMillis() / 1000 + 900); // 15 ph√∫t
            
            // Items array (required)
            Map<String, Object> item = new HashMap<>();
            item.put("name", service.getServiceName());
            item.put("quantity", 1);
            item.put("price", bill.getAmount().intValue());
            paymentData.put("items", new Object[]{item});
            
            // Convert to JSON
            String jsonPayload = gson.toJson(paymentData);
            System.out.println("D·ªØ li·ªáu PayOS: " + jsonPayload);
            
            // G·ª≠i request t·ªõi PayOS API
            URL url = new URL(PayOSConfig.CREATE_PAYMENT_URL);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("x-client-id", PAYOS_CLIENT_ID);
            conn.setRequestProperty("x-api-key", PAYOS_API_KEY);
            conn.setDoOutput(true);
            
            // G·ª≠i payload
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = jsonPayload.getBytes("utf-8");
                os.write(input, 0, input.length);
            }
            
            // ƒê·ªçc response
            int responseCode = conn.getResponseCode();
            System.out.println("M√£ ph·∫£n h·ªìi PayOS: " + responseCode);
            
            if (responseCode == 200) {
                try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"))) {
                    StringBuilder response = new StringBuilder();
                    String responseLine;
                    while ((responseLine = br.readLine()) != null) {
                        response.append(responseLine.trim());
                    }
                    
                    System.out.println("Ph·∫£n h·ªìi th√†nh c√¥ng PayOS: " + response.toString());
                    
                    // Parse JSON response ƒë·ªÉ l·∫•y QR code
                    Map responseMap = gson.fromJson(response.toString(), Map.class);
                    Map data = (Map) responseMap.get("data");
                    if (data != null && data.containsKey("qrCode")) {
                        String qrCode = (String) data.get("qrCode");
                        System.out.println("M√£ QR PayOS: " + qrCode);
                        return qrCode;
                    }
                }
            } else {
                System.err.println("L·ªói API PayOS - M√£ ph·∫£n h·ªìi: " + responseCode);
                // ƒê·ªçc error response
                try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getErrorStream(), "utf-8"))) {
                    StringBuilder errorResponse = new StringBuilder();
                    String responseLine;
                    while ((responseLine = br.readLine()) != null) {
                        errorResponse.append(responseLine.trim());
                    }
                    System.err.println("Ph·∫£n h·ªìi l·ªói PayOS: " + errorResponse.toString());
                }
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI T·∫†O Y√äU C·∫¶U THANH TO√ÅN PAYOS: " + e.getMessage());
            e.printStackTrace();
        }
        
        // Fallback: tr·∫£ v·ªÅ QR code test n·∫øu API call fail
        System.out.println("S·ª≠ d·ª•ng QR d·ª± ph√≤ng cho MB Bank...");
        
        // Th·ª≠ nhi·ªÅu format QR kh√°c nhau
        String qrUrl1 = generateFallbackQR(bill);
        String qrUrl2 = generateAlternativeQR(bill);
        
        System.out.println("ƒê·ªãnh d·∫°ng QR 1 (VietQR): " + qrUrl1);
        System.out.println("ƒê·ªãnh d·∫°ng QR 2 (Thay th·∫ø): " + qrUrl2);
        
        // Tr·∫£ v·ªÅ QR alternative ƒë·ªÉ test
        return generateMBBankDirectQR(bill);
    }
    
    /**
     * T·∫°o QR code d·ª± ph√≤ng t∆∞∆°ng th√≠ch MB Bank
     */
    private String generateFallbackQR(Bill bill) {
        String accountNumber = "5529062004";
        String accountName = "TRAN HONG PHUOC";
        String amount = String.valueOf(bill.getAmount().intValue());
        String description = "Thanh toan " + bill.getBillId();
        
        // THAY ƒê·ªîI: S·ª≠ d·ª•ng format QR code kh√°c t∆∞∆°ng th√≠ch MB Bank
        // Option 1: S·ª≠ d·ª•ng VietQR v·ªõi format kh√°c
        String vietQRUrl = String.format(
            "https://img.vietqr.io/image/MB-%s-print.png?amount=%s&addInfo=%s&accountName=%s",
            accountNumber,
            amount,
            java.net.URLEncoder.encode(description, java.nio.charset.StandardCharsets.UTF_8),
            java.net.URLEncoder.encode(accountName, java.nio.charset.StandardCharsets.UTF_8)
        );
        
        System.out.println("=== TH·ª¨ ƒê·ªäNH D·∫†NG QR KH√ÅC ===");
        System.out.println("T√†i kho·∫£n: " + accountNumber);
        System.out.println("S·ªë ti·ªÅn: " + amount + " VND");
        System.out.println("URL QR: " + vietQRUrl);
        
        return vietQRUrl;
    }
    
    /**
     * PH∆Ø∆†NG √ÅN D·ª∞ PH√íNG: T·∫°o QR code v·ªõi format kh√°c n·∫øu VietQR kh√¥ng ho·∫°t ƒë·ªông
     */
    private String generateAlternativeQR(Bill bill) {
        // T·∫°o QR Code ƒë∆°n gi·∫£n v·ªõi format text
        String paymentData = String.format(
            "STK: %s | Bank: MB | Amount: %s VND | Desc: %s",
            "1234567890", // Thay b·∫±ng STK th·∫≠t
            bill.getAmount().intValue(),
            "Thanh toan " + bill.getBillId()
        );
        
        // Ho·∫∑c s·ª≠ d·ª•ng QR Code generator API kh√°c
        String qrCodeApiUrl = String.format(
            "https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=%s",
            java.net.URLEncoder.encode(paymentData, java.nio.charset.StandardCharsets.UTF_8)
        );
        
        System.out.println("QR thay th·∫ø: " + qrCodeApiUrl);
        return qrCodeApiUrl;
    }

    /**
     * T·∫°o QR code cho T·∫§T C·∫¢ ng√¢n h√†ng Vi·ªát Nam (VietQR format)
     */
    private String generateMBBankDirectQR(Bill bill) {
        // Default account cho demo (c√≥ th·ªÉ config nhi·ªÅu account kh√°c nhau)
        String defaultBankCode = "970422"; // MB Bank
        String defaultAccountNumber = "5529062004";
        
        // TODO: Support multiple receiving accounts
        // Map<String, String> bankAccounts = new HashMap<>();
        // bankAccounts.put("970422", "5529062004"); // MB Bank
        // bankAccounts.put("970436", "1234567890"); // Vietcombank  
        // bankAccounts.put("970418", "0987654321"); // BIDV
        
        String amount = String.valueOf(bill.getAmount().intValue());
        String description = bill.getBillId(); // ƒê∆°n gi·∫£n h√≥a
        
        // T·∫°o VietQR universal format (h·ªó tr·ª£ t·∫•t c·∫£ ng√¢n h√†ng)
        String qrUrl = String.format(
            "https://img.vietqr.io/image/%s-%s-compact.jpg?amount=%s&addInfo=%s",
            defaultBankCode,
            defaultAccountNumber,
            amount,
            java.net.URLEncoder.encode(description, java.nio.charset.StandardCharsets.UTF_8)
        );
        
        System.out.println("=== M√É QR NG√ÇN H√ÄNG VI·ªÜT NAM TO√ÄN DI·ªÜN (VIETQR) ===");
        System.out.println("üè¶ Ng√¢n h√†ng: " + getBankName(defaultBankCode));
        System.out.println("üì± M√£ BIN: " + defaultBankCode);
        System.out.println("üí≥ T√†i kho·∫£n: " + defaultAccountNumber);
        System.out.println("üí∞ S·ªë ti·ªÅn: " + amount + " VNƒê");
        System.out.println("üìù M√¥ t·∫£: " + description);
        System.out.println("üîó URL QR: " + qrUrl);
        System.out.println("‚úÖ C√≥ th·ªÉ thanh to√°n b·∫±ng B·∫§T K·ª≤ ng√¢n h√†ng n√†o t·∫°i Vi·ªát Nam!");
        
        return qrUrl;
    }
    
    /**
     * Get bank name t·ª´ BIN code
     */
    private String getBankName(String binCode) {
        Map<String, String> bankNames = new HashMap<>();
        bankNames.put("970422", "MB Bank");
        bankNames.put("970436", "Vietcombank");
        bankNames.put("970418", "BIDV");
        bankNames.put("970405", "Agribank");
        bankNames.put("970415", "VietinBank");
        bankNames.put("970407", "Techcombank");
        bankNames.put("970416", "ACB");
        bankNames.put("970443", "SHB");
        bankNames.put("970432", "VPBank");
        bankNames.put("970423", "TPBank");
        bankNames.put("970403", "Sacombank");
        bankNames.put("970437", "HDBank");
        
        return bankNames.getOrDefault(binCode, "Unknown Bank");
    }

    /**
     * Class ch·ª©a th√¥ng tin thanh to√°n (for JSP display)
     */
    public static class PaymentInfo {
        private String orderId;
        private String billId;
        private String serviceName;
        private String description;
        private int amount;
        private String customerName;
        private String customerPhone;
        private String doctorId;
        private String workDate;
        private String slotId;
        private String reason;
        private String createdAt;
        private String qrCode;

        public PaymentInfo(String orderId, String billId, String serviceName, String description,
                          int amount, String customerName, String customerPhone,
                          String doctorId, String workDate, String slotId, String reason,
                          String qrCode) {
            this.orderId = orderId;
            this.billId = billId;
            this.serviceName = serviceName;
            this.description = description;
            this.amount = amount;
            this.customerName = customerName;
            this.customerPhone = customerPhone;
            this.doctorId = doctorId;
            this.workDate = workDate;
            this.slotId = slotId;
            this.reason = reason;
            this.createdAt = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
            this.qrCode = qrCode;
        }

        // Getters
        public String getOrderId() { return orderId; }
        public String getBillId() { return billId; }
        public String getServiceName() { return serviceName; }
        public String getDescription() { return description; }
        public int getAmount() { return amount; }
        public String getFormattedAmount() { 
            return String.format("%,d", amount) + " VNƒê"; 
        }
        public String getCustomerName() { return customerName; }
        public String getCustomerPhone() { return customerPhone; }
        public String getDoctorId() { return doctorId; }
        public String getWorkDate() { return workDate; }
        public String getSlotId() { return slotId; }
        public String getReason() { return reason; }
        public String getCreatedAt() { return createdAt; }
        public String getQrCode() { return qrCode; }
    }
} 