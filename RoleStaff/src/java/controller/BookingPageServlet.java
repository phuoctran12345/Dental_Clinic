/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller;

import dao.AppointmentDAO;
import dao.DoctorDAO;
import dao.ServiceDAO;
import model.Appointment;
import model.Doctors;
import model.Service;

import java.io.IOException;
import java.io.PrintWriter;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.util.List;
import com.google.gson.Gson;
import dao.DoctorScheduleDAO;
import model.DoctorSchedule;
import model.User;
import java.time.LocalDate;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

/**
 *
 * @author Home & TranHongPhuoc
 */

public class BookingPageServlet extends HttpServlet {

    private List<DoctorSchedule> schedules;
    private List<String> workDates;

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet BookingPageServlet</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet BookingPageServlet at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        request.setCharacterEncoding("UTF-8");
        
        HttpSession session = request.getSession();
        User patient = (User) session.getAttribute("user");
        
        // Ki·ªÉm tra session v√† role
        if (session == null || patient == null) {
            response.sendRedirect("login.jsp");
            return;
        }
        
        // Ki·ªÉm tra role PATIENT
        if (!"PATIENT".equalsIgnoreCase(patient.getRole())) {
            request.setAttribute("error", "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!");
            request.getRequestDispatcher("/jsp/error/404.jsp").forward(request, response);
            return;
        }
        
        try {
            // X·ª¨ L√ù SERVICEID - L·∫•y th√¥ng tin d·ªãch v·ª• n·∫øu c√≥
            String serviceIdStr = request.getParameter("serviceId");
            Service selectedService = null;
            if (serviceIdStr != null && !serviceIdStr.isEmpty()) {
                try {
                    int serviceId = Integer.parseInt(serviceIdStr);
                    ServiceDAO serviceDAO = new ServiceDAO();
                    selectedService = serviceDAO.getServiceById(serviceId);
                    request.setAttribute("selectedService", selectedService);
                    System.out.println("üéØ Service ƒë∆∞·ª£c ch·ªçn: " + selectedService.getServiceName() + " - " + selectedService.getPrice() + " VNƒê");
                } catch (NumberFormatException e) {
                    System.err.println("ServiceId kh√¥ng h·ª£p l·ªá: " + serviceIdStr);
                }
            }
            
            // X·ª≠ l√Ω request AJAX
            if (request.getParameter("ajax") != null) {
                String doctorId = request.getParameter("doctorId");
                String workDate = request.getParameter("workDate");
                
                if (doctorId != null && workDate != null) {
                    Connection conn = utils.DBContext.getConnection();
                    // Tr∆∞·ªõc ti√™n ki·ªÉm tra b√°c sƒ© c√≥ l√†m vi·ªác ng√†y n√†y kh√¥ng
                    String checkSql = "SELECT slot_id FROM DoctorSchedule WHERE doctor_id = ? AND work_date = ? AND status IN (N'approved', N'ƒê√£ x√°c nh·∫≠n ƒëƒÉng k√≠ l·ªãch h·∫πn v·ªõi b√°c sƒ©')";
                    java.util.List<java.util.Map<String, Object>> slots = new java.util.ArrayList<>();
                    try {
                        PreparedStatement checkPs = conn.prepareStatement(checkSql);
                        checkPs.setInt(1, Integer.parseInt(doctorId));
                        checkPs.setDate(2, java.sql.Date.valueOf(workDate));
                        ResultSet checkRs = checkPs.executeQuery();
                        
                        boolean hasFullDaySchedule = false;
                        while (checkRs.next()) {
                            int slotId = checkRs.getInt("slot_id");
                            if (slotId == 3) { // C·∫£ ng√†y (08:00-17:00)
                                hasFullDaySchedule = true;
                                break;
                            }
                        }
                        checkRs.close();
                        checkPs.close();
                        
                        // N·∫øu b√°c sƒ© l√†m c·∫£ ng√†y, l·∫•y t·∫•t c·∫£ slot 30 ph√∫t trong kho·∫£ng 08:00-17:00
                        if (hasFullDaySchedule) {
                            String slotsSql = "SELECT slot_id, start_time, end_time FROM TimeSlot " +
                                            "WHERE start_time >= '08:00:00' AND end_time <= '17:00:00' " +
                                            "AND slot_id >= 3002 AND slot_id <= 3019 ORDER BY start_time";
                            PreparedStatement slotsPs = conn.prepareStatement(slotsSql);
                            ResultSet slotsRs = slotsPs.executeQuery();
                            while (slotsRs.next()) {
                                java.util.Map<String, Object> slot = new java.util.HashMap<>();
                                slot.put("slotId", slotsRs.getInt("slot_id"));
                                slot.put("startTime", slotsRs.getTime("start_time").toString().substring(0,5));
                                slot.put("endTime", slotsRs.getTime("end_time").toString().substring(0,5));
                                slots.add(slot);
                            }
                            slotsRs.close();
                            slotsPs.close();
                        }
                        
                        conn.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println("Error in AJAX: " + e.getMessage());
                    }
                    response.setContentType("application/json");
                    response.setCharacterEncoding("UTF-8");
                    System.out.println("Returning " + slots.size() + " slots for doctor " + doctorId + " on " + workDate);
                    response.getWriter().write(new Gson().toJson(slots));
                    response.getWriter().flush();
                    return;
                } else {
                    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                    response.getWriter().write("{\"error\":\"Thi·∫øu tham s·ªë\"}");
                    response.getWriter().flush();
                    return;
                }
            }
            
            // X·ª≠ l√Ω request th√¥ng th∆∞·ªùng
            List<Appointment> appointments = AppointmentDAO.getAppointmentsByPatientId(patient.getId());
            request.setAttribute("appointments", appointments);
            System.out.println("Appointments: " + appointments);
            
            // L·∫•y danh s√°ch b√°c sƒ©
            List<Doctors> doctors = DoctorDAO.getAllDoctors();
            if (doctors != null) {
                DoctorScheduleDAO dsDAO = new DoctorScheduleDAO();
                for (Doctors doctor : doctors) {
                    List<DoctorSchedule> schedules = dsDAO.getSchedulesByDoctorId(doctor.getDoctor_id());
                    doctor.setSchedules(schedules);

                    Set<String> workDates = schedules.stream()
                        .map(sch -> sch.getWorkDate().toString())
                        .collect(Collectors.toSet());
                    doctor.setWorkDates(new ArrayList<>(workDates));
                }
            }
            request.setAttribute("doctors", doctors);
            System.out.println("Doctors: " + doctors);
            
            // L·∫•y danh s√°ch chuy√™n khoa
            List<String> specialties = DoctorDAO.getAllSpecialties();
            request.setAttribute("specialties", specialties);
            System.out.println("Specialties: " + specialties);
            
            // L·∫•y danh s√°ch ng√†y l√†m vi·ªác c·ªßa b√°c sƒ© (n·∫øu c√≥ doctorId)
            String doctorIdStr = request.getParameter("doctor_id");
            List<String> workDates = new ArrayList<>();
            if (doctorIdStr != null && !doctorIdStr.isEmpty()) {
                try {
                    int doctorId = Integer.parseInt(doctorIdStr);
                    workDates = DoctorScheduleDAO.getWorkDatesByDoctorId(doctorId);
                } catch (NumberFormatException e) {
                    // B·ªè qua n·∫øu kh√¥ng h·ª£p l·ªá
                }
            }
            request.setAttribute("workDates", workDates);
            
            request.getRequestDispatcher("/jsp/patient/user_datlich.jsp").forward(request, response);
            
        } catch (ServletException | IOException | NumberFormatException e) {
            if (!response.isCommitted()) {
                request.setAttribute("error", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
                request.getRequestDispatcher("/WEB-INF/jsp/error/404.jsp").forward(request, response);
            } else {
                System.err.println("Kh√¥ng th·ªÉ forward v√¨ response ƒë√£ commit: " + e.getMessage());
            }
        }
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        request.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");
        
        // L·∫•y d·ªØ li·ªáu t·ª´ form ƒë·∫∑t l·ªãch
        String doctorIdStr = request.getParameter("doctorId");
        String workDate = request.getParameter("workDate");
        String slotIdStr = request.getParameter("slotId");
        String reason = request.getParameter("reason");
        String serviceIdStr = request.getParameter("serviceId"); // Nh·∫≠n serviceId t·ª´ form
        
        HttpSession session = request.getSession();
        User patient = (User) session.getAttribute("user");

        // Ki·ªÉm tra session
        if (patient == null) {
            response.sendRedirect("login.jsp");
            return;
        }

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (doctorIdStr == null || workDate == null || slotIdStr == null) {
            request.setAttribute("error", "Thi·∫øu th√¥ng tin ƒë·∫∑t l·ªãch!");
            doGet(request, response);
            return;
        }

        try {
            int doctorId = Integer.parseInt(doctorIdStr);
            int slotId = Integer.parseInt(slotIdStr);
            LocalDate appointmentDate = LocalDate.parse(workDate);
            
            // Ki·ªÉm tra slot c√≥ available kh√¥ng tr∆∞·ªõc khi chuy·ªÉn sang thanh to√°n
            if (!AppointmentDAO.isSlotAvailable(doctorId, appointmentDate, slotId)) {
                request.setAttribute("error", "Slot ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t. Vui l√≤ng ch·ªçn slot kh√°c!");
                doGet(request, response);
                return;
            }
            
            // CHUY·ªÇN H∆Ø·ªöNG ƒê·∫æN PAYOSSERVLET ƒê·ªÇ THANH TO√ÅN
            // S·ª≠ d·ª•ng serviceId t·ª´ form, n·∫øu kh√¥ng c√≥ th√¨ d√πng m·∫∑c ƒë·ªãnh
            String finalServiceId = (serviceIdStr != null && !serviceIdStr.isEmpty()) ? serviceIdStr : "1";
            
            String paymentUrl = String.format(
                "%s/payment?serviceId=%s&doctorId=%s&workDate=%s&slotId=%s&reason=%s",
                request.getContextPath(),
                finalServiceId,
                doctorId,
                workDate,
                slotId,
                reason != null ? java.net.URLEncoder.encode(reason, "UTF-8") : ""
            );
            
            System.out.println("üéØ BOOKING REQUEST -> PAYMENT");
            System.out.println("üè• Service: " + finalServiceId + " | Doctor: " + doctorId + " | Date: " + workDate + " | Slot: " + slotId);
            System.out.println("üîó Redirecting to: " + paymentUrl);
            
            response.sendRedirect(paymentUrl);
            
        } catch (NumberFormatException e) {
            request.setAttribute("error", "Th√¥ng tin kh√¥ng h·ª£p l·ªá: " + e.getMessage());
            doGet(request, response);
        } catch (Exception e) {
            System.err.println("Error in booking: " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
            doGet(request, response);
        }
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
