package utils;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;


/**
 *
 * @author tranhongphuoc
 */

public class GeminiAiService {
        private static final String GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";
    private static final String API_KEY= "abc";

    
    
    public static String getAIResponse(String userMessage) throws IOException {
        System.out.println("Starting getAIResponse with message: " + userMessage);
        
        try (CloseableHttpClient client = HttpClients.createDefault()) {
            HttpPost httpPost = new HttpPost(GEMINI_API_URL + "?key=" + API_KEY);
            httpPost.setHeader("Content-Type", "application/json");

            // Prompt ng·∫Øn g·ªçn, y√™u c·∫ßu tr·∫£ l·ªùi s√∫c t√≠ch, lu√¥n h∆∞·ªõng ƒë·∫øn ph√≤ng kh√°m
            String prompt = "B·∫°n l√† tr·ª£ l√Ω y t·∫ø. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch, d·ªÖ hi·ªÉu, b√¥i ƒë·∫≠m t·ª´ kho√° y t·∫ø. "
                + "Lu√¥n nh·∫Øc b·ªánh nh√¢n n√™n ƒë·∫øn ph√≤ng kh√°m ƒë·ªÉ ƒë∆∞·ª£c b√°c sƒ© ki·ªÉm tra tr·ª±c ti·∫øp. "
                + "C√¢u h·ªèi: " + userMessage;

            String requestBody = String.format(
                "{\"contents\": [{\"parts\": [{\"text\": \"%s\"}]}]}", prompt);
            
            System.out.println("Request body: " + requestBody);

            httpPost.setEntity(new StringEntity(requestBody, "UTF-8"));

            System.out.println("Sending request to Gemini API...");
            try (CloseableHttpResponse response = client.execute(httpPost)) {
                HttpEntity entity = response.getEntity();
                String responseString = EntityUtils.toString(entity, "UTF-8");
                System.out.println("Gemini raw response: " + responseString);

                ObjectMapper mapper = new ObjectMapper();
                JsonNode root = mapper.readTree(responseString);

                try {
                    String result = root.path("candidates")
                               .get(0)
                               .path("content")
                               .path("parts")
                               .get(0)
                               .path("text")
                               .asText();
                    System.out.println("Extracted text: " + result);
                    
                    if (result != null && !result.trim().isEmpty()) {
                        return result;
                    } else {
                        System.out.println("Extracted text is null or empty");
                        return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi. Vui l√≤ng th·ª≠ l·∫°i sau.";
                    }
                } catch (Exception e) {
                    System.out.println("Error parsing JSON: " + e.getMessage());
                    e.printStackTrace();
                    return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi. Vui l√≤ng th·ª≠ l·∫°i sau.";
                }
            }
        } catch (Exception e) {
            System.out.println("Exception in getAIResponse: " + e.getMessage());
            e.printStackTrace();
            throw new IOException("Error calling Gemini API", e);
        }
    }
    
    /**
     * Method chuy√™n bi·ªát ƒë·ªÉ t·∫°o ghi ch√∫ y t·∫ø d·ª±a tr√™n th√¥ng tin kh√°m b·ªánh x·ª≠ l√Ω ch·ªó MedicalNoteAiServlet
     */
    public static String getMedicalNoteResponse(String medicalPrompt) throws IOException {
        System.out.println("Starting getMedicalNoteResponse with prompt: " + medicalPrompt);
        
        try (CloseableHttpClient client = HttpClients.createDefault()) {
            HttpPost httpPost = new HttpPost(GEMINI_API_URL + "?key=" + API_KEY);
            httpPost.setHeader("Content-Type", "application/json");

            String requestBody = String.format(
                "{\"contents\": [{\"parts\": [{\"text\": \"%s\"}]}]}", 
                medicalPrompt.replace("\"", "\\\"").replace("\n", "\\n"));
            
            System.out.println("Medical note request body: " + requestBody);

            httpPost.setEntity(new StringEntity(requestBody, "UTF-8"));

            System.out.println("Sending medical note request to Gemini API...");
            try (CloseableHttpResponse response = client.execute(httpPost)) {
                HttpEntity entity = response.getEntity();
                String responseString = EntityUtils.toString(entity, "UTF-8");
                System.out.println("Gemini medical note raw response: " + responseString);

                ObjectMapper mapper = new ObjectMapper();
                JsonNode root = mapper.readTree(responseString);

                try {
                    String result = root.path("candidates")
                               .get(0)
                               .path("content")
                               .path("parts")
                               .get(0)
                               .path("text")
                               .asText();
                    System.out.println("Extracted medical note: " + result);
                    
                    if (result != null && !result.trim().isEmpty()) {
                        // L√†m s·∫°ch v√† format ghi ch√∫ y t·∫ø
                        return formatMedicalNote(result);
                    } else {
                        System.out.println("Extracted medical note is null or empty");
                        return "B·ªánh nh√¢n n√™n tu√¢n th·ªß theo h∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã v√† t√°i kh√°m theo l·ªãch h·∫πn.";
                    }
                } catch (Exception e) {
                    System.out.println("Error parsing medical note JSON: " + e.getMessage());
                    e.printStackTrace();
                    return "B·ªánh nh√¢n n√™n tu√¢n th·ªß theo h∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã v√† t√°i kh√°m theo l·ªãch h·∫πn.";
                }
            }
        } catch (Exception e) {
            System.out.println("Exception in getMedicalNoteResponse: " + e.getMessage());
            e.printStackTrace();
            throw new IOException("Error calling Gemini API for medical note", e);
        }
    }
    
    /**
     * Format ghi ch√∫ y t·∫ø ƒë·ªÉ ph√π h·ª£p v·ªõi form
     */
    private static String formatMedicalNote(String note) {
        System.out.println("Formatting medical note: " + note);
        
        // Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng mong mu·ªën v√† header
        note = note.trim();
        note = note.replaceAll("\\*+", ""); // Lo·∫°i b·ªè d·∫•u *
        note = note.replaceAll("#+", ""); // Lo·∫°i b·ªè d·∫•u #
        note = note.replaceAll("‚ïê+", ""); // Lo·∫°i b·ªè k√Ω t·ª± box drawing
        note = note.replaceAll("üìã|üìù|üîç|‚öïÔ∏è|üíä|üí¨|‚úÖ|‚ö†Ô∏è", ""); // Lo·∫°i b·ªè emoji
        
        // Lo·∫°i b·ªè c√°c header kh√¥ng c·∫ßn thi·∫øt
        note = note.replaceAll("(?i).*H√£y\\s+vi·∫øt\\s+ghi\\s+ch√∫.*", "");
        note = note.replaceAll("(?i).*TH√îNG\\s+TIN\\s+KH√ÅM.*", "");
        note = note.replaceAll("(?i).*Y√äU\\s+C·∫¶U\\s+VI·∫æT.*", "");
        note = note.replaceAll("(?i).*PHONG\\s+C√ÅCH\\s+VI·∫æT.*", "");
        
        // Lo·∫°i b·ªè c√°c d√≤ng tr·ªëng th·ª´a
        note = note.replaceAll("\n{3,}", "\n\n");
        note = note.trim();
        
        // ƒê·∫£m b·∫£o b·∫Øt ƒë·∫ßu b·∫±ng "Ghi ch√∫ nha khoa" n·∫øu ch∆∞a c√≥
        if (!note.toLowerCase().startsWith("ghi ch√∫ nha khoa")) {
            if (note.length() > 20) {
                note = "Ghi ch√∫ nha khoa\n\n" + note;
            }
        }
        
        // ƒê·∫£m b·∫£o ghi ch√∫ c√≥ ƒë·ªô d√†i ph√π h·ª£p (t·ªëi ƒëa 600 k√Ω t·ª± cho ghi ch√∫ chi ti·∫øt)
        if (note.length() > 600) {
            // T√¨m ƒëi·ªÉm c·∫Øt h·ª£p l√Ω (cu·ªëi c√¢u)
            int cutPoint = note.lastIndexOf(".", 597);
            if (cutPoint > 200) {
                note = note.substring(0, cutPoint + 1);
            } else {
                note = note.substring(0, 597) + "...";
            }
        }
        
        // N·∫øu ghi ch√∫ r·ªóng ho·∫∑c qu√° ng·∫Øn, tr·∫£ v·ªÅ ghi ch√∫ m·∫∑c ƒë·ªãnh chuy√™n nghi·ªáp
        if (note.isEmpty() || note.length() < 30) {
            note = "Ghi ch√∫ nha khoa\n\n" +
                   "B·ªánh nh√¢n ƒë√£ ƒë∆∞·ª£c kh√°m v√† ƒëi·ªÅu tr·ªã theo ƒë√∫ng ch·ªâ ƒë·ªãnh y khoa. " +
                   "Vui l√≤ng tu√¢n th·ªß ƒë√∫ng li·ªÅu l∆∞·ª£ng thu·ªëc ƒë√£ ƒë∆∞·ª£c k√™ v√† theo d√µi s·ª©c kh·ªèe th∆∞·ªùng xuy√™n. " +
                   "N·∫øu c√≥ b·∫•t k·ª≥ tri·ªáu ch·ª©ng b·∫•t th∆∞·ªùng n√†o, xin vui l√≤ng li√™n h·ªá v·ªõi b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n k·ªãp th·ªùi. " +
                   "Ch√∫c b·∫°n s·ªõm h·ªìi ph·ª•c s·ª©c kh·ªèe!";
        }
        
        // ƒê·∫£m b·∫£o ghi ch√∫ k·∫øt th√∫c ƒë√∫ng c√°ch
        if (!note.endsWith(".") && !note.endsWith("!") && !note.endsWith("?")) {
            note += ".";
        }
        
        // L√†m s·∫°ch format cu·ªëi c√πng
        note = note.replaceAll("(?m)^\\s*$", ""); // Lo·∫°i b·ªè d√≤ng tr·ªëng
        note = note.replaceAll("\n{2,}", "\n\n"); // Chu·∫©n h√≥a xu·ªëng d√≤ng
        
        System.out.println("Formatted medical note: " + note);
        return note;
    }
    
    public static String formatAIResponse(String answer) {
        System.out.println("Starting formatAIResponse with: " + answer);
        
        // Danh s√°ch t·ª´ kho√° y t·∫ø c·∫ßn b√¥i ƒë·∫≠m
        String[] keywords = {
            "ƒëau rƒÉng", "s·ªët", "vi√™m", "b√°c sƒ©", "ph√≤ng kh√°m", "ƒëi·ªÅu tr·ªã", "thu·ªëc", "tri·ªáu ch·ª©ng",
            "nguy hi·ªÉm", "c·∫•p c·ª©u", "kh√°m", "ch·∫©n ƒëo√°n", "huy·∫øt √°p", "nhi·ªÖm tr√πng", "kh√°ng sinh",
            "Happy Smile", "s·ª©c kh·ªèe"
        };
        for (String kw : keywords) {
            answer = answer.replaceAll("(?i)\\b(" + kw + ")\\b",
                "<b style='color:#e74c3c;background:#fffbe6;padding:2px 4px;border-radius:4px;'>$1</b>");
        }
        // Xu·ªëng d√≤ng cho d·ªÖ ƒë·ªçc
        answer = answer.replaceAll("\\*\\*", "<b>").replaceAll("\\*", "</b>");
        answer = answer.replaceAll("\n", "<br>");
        // Lu√¥n nh·∫Øc ƒë·∫øn ph√≤ng kh√°m
        if (!answer.toLowerCase().contains("ph√≤ng kh√°m")) {
            answer += "<br><b style='color:#1976d2;'>B·∫°n n√™n ƒë·∫øn ph√≤ng kh√°m <span style='color:#e67e22;'>Happy Smile</span> ƒë·ªÉ ƒë∆∞·ª£c b√°c sƒ© ki·ªÉm tra v√† t∆∞ v·∫•n k·ªãp th·ªùi!</b>";
        }
        
        System.out.println("Formatted response: " + answer);
        return answer;
    }
}