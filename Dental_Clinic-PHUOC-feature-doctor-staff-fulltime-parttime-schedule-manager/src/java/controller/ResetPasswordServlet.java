package controller;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.User;
import dao.UserDAO;
import utils.EmailService;

import utils.OTPService;
import utils.OTPService.OTPData;

import java.io.IOException;

/**
 * Servlet x·ª≠ l√Ω reset password v·ªõi OTP
 * @author ASUS
 */
@WebServlet(name = "ResetPasswordServlet", urlPatterns = {"/ResetPasswordServlet"})
public class ResetPasswordServlet extends HttpServlet {
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String action = request.getParameter("action");
        
        if ("forgot-password".equals(action)) {
            // Hi·ªÉn th·ªã form nh·∫≠p email t·ª´ login
            request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
            
        } else if ("change-password-from-profile".equals(action)) {
            // ‚úÖ TH√äM: Action m·ªõi cho ƒë·ªïi m·∫≠t kh·∫©u t·ª´ trang t√†i kho·∫£n
            HttpSession session = request.getSession();
            User user = (User) session.getAttribute("user");
            
            if (user == null) {
                response.sendRedirect("login.jsp?error=session_expired");
                return;
            }
            
            // ƒê·∫∑t email t·ª´ user hi·ªán t·∫°i v√† chuy·ªÉn ƒë·∫øn verify OTP
            request.setAttribute("email", user.getEmail());
            request.setAttribute("from_profile", true); // ƒê√°nh d·∫•u t·ª´ trang profile
            request.getRequestDispatcher("change-password-profile.jsp").forward(request, response);
            
        } else if ("verify-otp".equals(action)) {
            // Hi·ªÉn th·ªã form nh·∫≠p OTP
            HttpSession session = request.getSession();
            OTPData otpData = (OTPData) session.getAttribute("resetOTPData");
            
            if (otpData == null || OTPService.isExpired(otpData)) {
                // Ki·ªÉm tra xem c√≥ ph·∫£i t·ª´ profile kh√¥ng
                Boolean fromProfile = (Boolean) session.getAttribute("from_profile");
                if (fromProfile != null && fromProfile) {
                    request.setAttribute("error", "Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª±c hi·ªán l·∫°i.");
                    response.sendRedirect("ResetPasswordServlet?action=change-password-from-profile");
                } else {
                    request.setAttribute("error", "Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª±c hi·ªán l·∫°i.");
                    request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
                }
                return;
            }
            
            long remainingSeconds = OTPService.getRemainingSeconds(otpData);
            request.setAttribute("remainingSeconds", remainingSeconds);
            request.setAttribute("email", otpData.getEmail());
            
            // Ki·ªÉm tra xem c√≥ ph·∫£i t·ª´ profile kh√¥ng ƒë·ªÉ chuy·ªÉn h∆∞·ªõng ph√π h·ª£p
            Boolean fromProfile = (Boolean) session.getAttribute("from_profile");
            request.setAttribute("from_profile", fromProfile);
            
            request.getRequestDispatcher("verify-otp.jsp").forward(request, response);
            
        } else if ("reset-password".equals(action)) {
            // Hi·ªÉn th·ªã form ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
            HttpSession session = request.getSession();
            Boolean otpVerified = (Boolean) session.getAttribute("otpVerified");
            
            if (otpVerified == null || !otpVerified) {
                // Ki·ªÉm tra xem c√≥ ph·∫£i t·ª´ profile kh√¥ng
                Boolean fromProfile = (Boolean) session.getAttribute("from_profile");
                if (fromProfile != null && fromProfile) {
                    request.setAttribute("error", "B·∫°n c·∫ßn x√°c th·ª±c OTP tr∆∞·ªõc.");
                    response.sendRedirect("ResetPasswordServlet?action=change-password-from-profile");
                } else {
                    request.setAttribute("error", "B·∫°n c·∫ßn x√°c th·ª±c OTP tr∆∞·ªõc.");
                    request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
                }
                return;
            }
            
            // Ki·ªÉm tra xem c√≥ ph·∫£i t·ª´ profile kh√¥ng ƒë·ªÉ chuy·ªÉn h∆∞·ªõng ph√π h·ª£p
            Boolean fromProfile = (Boolean) session.getAttribute("from_profile");
            request.setAttribute("from_profile", fromProfile);
            
            request.getRequestDispatcher("reset-password.jsp").forward(request, response);
            
        } else {
            // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã form forgot password
            request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
        }
    }
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        
        String action = request.getParameter("action");
        
        if ("send-otp".equals(action)) {
            handleSendOTP(request, response);
            
        } else if ("send-otp-profile".equals(action)) {
            // ‚úÖ TH√äM: X·ª≠ l√Ω g·ª≠i OTP t·ª´ trang profile
            handleSendOTPFromProfile(request, response);
            
        } else if ("verify-otp".equals(action)) {
            handleVerifyOTP(request, response);
            
        } else if ("reset-password".equals(action)) {
            handleResetPassword(request, response);
            
        } else {
            response.sendRedirect("ResetPasswordServlet");
        }
    }
    
    /**
     * ‚úÖ TH√äM: X·ª≠ l√Ω g·ª≠i OTP t·ª´ trang profile
     */
    private void handleSendOTPFromProfile(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");
        
        if (user == null) {
            response.sendRedirect("login.jsp?error=session_expired");
            return;
        }
        
        String email = user.getEmail();
        
        if (email == null || email.trim().isEmpty()) {
            request.setAttribute("error", "Kh√¥ng t√¨m th·∫•y email trong t√†i kho·∫£n.");
            response.sendRedirect("user_taikhoan.jsp?error=no_email");
            return;
        }
        
        try {
            // T·∫°o OTP
            String otp = OTPService.generateOTP();
            OTPData otpData = OTPService.createOTPData(otp);
            otpData.setEmail(email);
            
            boolean emailSent = false;
            String successMessage = "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email: " + email;
            
            // Th·ª≠ g·ª≠i email
            if (EmailService.isConfigured()) {
                System.out.println("üîÑ ƒêang th·ª≠ g·ª≠i email t·ª´ profile...");
                emailSent = EmailService.sendOTPEmailWithFallback(email, otp);
                
                if (emailSent) {
                    System.out.println("‚úÖ G·ª≠i email t·ª´ profile th√†nh c√¥ng!");
                } else {
                    System.out.println("‚ùå Kh√¥ng th·ªÉ g·ª≠i email t·ª´ profile.");
                }
            }
            
            if (emailSent) {
                // L∆∞u OTP v√†o session v√† ƒë√°nh d·∫•u t·ª´ profile
                session.setAttribute("resetOTPData", otpData);
                session.setAttribute("from_profile", true); // ‚úÖ ƒê√°nh d·∫•u t·ª´ profile
                session.removeAttribute("otpVerified"); // Reset tr·∫°ng th√°i x√°c th·ª±c
                
                // Th√¥ng b√°o th√†nh c√¥ng
                session.setAttribute("otpSentMessage", successMessage);
                
                // Chuy·ªÉn ƒë·∫øn trang nh·∫≠p OTP
                response.sendRedirect("ResetPasswordServlet?action=verify-otp");
                
            } else {
                request.setAttribute("error", "Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.");
                response.sendRedirect("user_taikhoan.jsp?error=email_send_failed");
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói g·ª≠i OTP t·ª´ profile: " + e.getMessage());
            e.printStackTrace();
            
            response.sendRedirect("user_taikhoan.jsp?error=otp_send_error");
        }
    }
    
    /**
     * X·ª≠ l√Ω g·ª≠i OTP qua email (t·ª´ forgot password)
     */
    private void handleSendOTP(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String email = request.getParameter("email");
        
        // Validate input
        if (email == null || email.trim().isEmpty()) {
            request.setAttribute("error", "Vui l√≤ng nh·∫≠p email.");
            request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
            return;
        }
        
        email = email.trim().toLowerCase();
        
        // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng
        User user = UserDAO.getUserByEmail(email);
        if (user == null) {
            request.setAttribute("error", "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.");
            request.setAttribute("email", email);
            request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
            return;
        }
        
        try {
            // T·∫°o OTP
            String otp = OTPService.generateOTP();
            OTPData otpData = OTPService.createOTPData(otp);
            otpData.setEmail(email);
            
            boolean emailSent = false;
            String successMessage = "";
            
            // Th·ª≠ g·ª≠i email th·∫≠t tr∆∞·ªõc v·ªõi multiple configs
            if (EmailService.isConfigured()) {
                System.out.println("üîÑ ƒêang th·ª≠ g·ª≠i email th·∫≠t v·ªõi fallback configs...");
                emailSent = EmailService.sendOTPEmailWithFallback(email, otp);
                
                if (emailSent) {
                    successMessage = "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email " + email + ". Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n.";
                    System.out.println("‚úÖ G·ª≠i email th·∫≠t th√†nh c√¥ng!");
                } else {
                    System.out.println("‚ùå Kh√¥ng th·ªÉ g·ª≠i email qua t·∫•t c·∫£ ph∆∞∆°ng th·ª©c.");
                }
            } else {
                System.out.println("‚ùå Email ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng!");
            }
            
            if (emailSent) {
                // L∆∞u OTP v√†o session
                HttpSession session = request.getSession();
                session.setAttribute("resetOTPData", otpData);
                session.removeAttribute("from_profile"); // ‚úÖ X√≥a flag profile n·∫øu c√≥
                session.removeAttribute("otpVerified"); // Reset tr·∫°ng th√°i x√°c th·ª±c
                
                // Th√¥ng b√°o th√†nh c√¥ng
                session.setAttribute("otpSentMessage", successMessage);
                
                // Chuy·ªÉn ƒë·∫øn trang nh·∫≠p OTP
                response.sendRedirect("ResetPasswordServlet?action=verify-otp");
                
            } else {
                request.setAttribute("error", "Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.");
                request.setAttribute("email", email);
                request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói g·ª≠i OTP: " + e.getMessage());
            e.printStackTrace();
            
            request.setAttribute("error", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
            request.setAttribute("email", email);
            request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
        }
    }
    
    /**
     * X·ª≠ l√Ω x√°c th·ª±c OTP
     */
    private void handleVerifyOTP(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String inputOTP = request.getParameter("otp");
        HttpSession session = request.getSession();
        OTPData otpData = (OTPData) session.getAttribute("resetOTPData");
        
        // Validate input
        if (inputOTP == null || inputOTP.trim().isEmpty()) {
            request.setAttribute("error", "Vui l√≤ng nh·∫≠p m√£ OTP.");
            if (otpData != null) {
                long remainingSeconds = OTPService.getRemainingSeconds(otpData);
                request.setAttribute("remainingSeconds", remainingSeconds);
                request.setAttribute("email", otpData.getEmail());
            }
            request.getRequestDispatcher("verify-otp.jsp").forward(request, response);
            return;
        }
        
        // Ki·ªÉm tra OTP c√≥ t·ªìn t·∫°i trong session kh√¥ng
        if (otpData == null) {
            // Ki·ªÉm tra xem c√≥ ph·∫£i t·ª´ profile kh√¥ng ƒë·ªÉ chuy·ªÉn h∆∞·ªõng ph√π h·ª£p
            Boolean fromProfile = (Boolean) session.getAttribute("from_profile");
            if (fromProfile != null && fromProfile) {
                request.setAttribute("error", "Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª±c hi·ªán l·∫°i.");
                response.sendRedirect("ResetPasswordServlet?action=change-password-from-profile");
            } else {
                request.setAttribute("error", "Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª±c hi·ªán l·∫°i.");
                request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
            }
            return;
        }
        
        // X√°c th·ª±c OTP
        if (OTPService.verifyOTP(otpData, inputOTP.trim())) {
            // OTP ƒë√∫ng
            session.setAttribute("otpVerified", true);
            session.setAttribute("resetEmail", otpData.getEmail());
            session.removeAttribute("otpSentMessage"); // X√≥a message
            
            // Chuy·ªÉn ƒë·∫øn trang ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
            response.sendRedirect("ResetPasswordServlet?action=reset-password");
            
        } else {
            // OTP sai ho·∫∑c h·∫øt h·∫°n
            if (OTPService.isExpired(otpData)) {
                session.removeAttribute("resetOTPData");
                Boolean fromProfile = (Boolean) session.getAttribute("from_profile");
                if (fromProfile != null && fromProfile) {
                    request.setAttribute("error", "M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi.");
                    response.sendRedirect("ResetPasswordServlet?action=change-password-from-profile");
                } else {
                    request.setAttribute("error", "M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi.");
                    request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
                }
            } else {
                request.setAttribute("error", "M√£ OTP kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i.");
                long remainingSeconds = OTPService.getRemainingSeconds(otpData);
                request.setAttribute("remainingSeconds", remainingSeconds);
                request.setAttribute("email", otpData.getEmail());
                request.getRequestDispatcher("verify-otp.jsp").forward(request, response);
            }
        }
    }
    
    /**
     * X·ª≠ l√Ω ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
     */
    private void handleResetPassword(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        HttpSession session = request.getSession();
        Boolean otpVerified = (Boolean) session.getAttribute("otpVerified");
        String email = (String) session.getAttribute("resetEmail");
        Boolean fromProfile = (Boolean) session.getAttribute("from_profile");
        
        System.out.println("üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω reset password...");
        System.out.println("üìß Email: " + email);
        System.out.println("‚úÖ OTP verified: " + otpVerified);
        System.out.println("üë§ From profile: " + fromProfile);
        
        // Ki·ªÉm tra ƒë√£ x√°c th·ª±c OTP ch∆∞a
        if (otpVerified == null || !otpVerified || email == null) {
            System.err.println("‚ùå Phi√™n l√†m vi·ªác kh√¥ng h·ª£p l·ªá");
            if (fromProfile != null && fromProfile) {
                request.setAttribute("error", "Phi√™n l√†m vi·ªác kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª±c hi·ªán l·∫°i.");
                response.sendRedirect("ResetPasswordServlet?action=change-password-from-profile");
            } else {
                request.setAttribute("error", "Phi√™n l√†m vi·ªác kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª±c hi·ªán l·∫°i.");
                request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
            }
            return;
        }
        
        String newPassword = request.getParameter("newPassword");
        String confirmPassword = request.getParameter("confirmPassword");
        
        System.out.println("üîç Ki·ªÉm tra input parameters:");
        System.out.println("   - newPassword: " + (newPassword != null ? "[HIDDEN]" : "null"));
        System.out.println("   - confirmPassword: " + (confirmPassword != null ? "[HIDDEN]" : "null"));
        
        // Validate input
        if (newPassword == null || newPassword.trim().isEmpty()) {
            System.err.println("‚ùå M·∫≠t kh·∫©u m·ªõi tr·ªëng");
            request.setAttribute("error", "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi.");
            request.getRequestDispatcher("reset-password.jsp").forward(request, response);
            return;
        }
        
        if (confirmPassword == null || !newPassword.equals(confirmPassword)) {
            System.err.println("‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
            request.setAttribute("error", "X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp.");
            request.getRequestDispatcher("reset-password.jsp").forward(request, response);
            return;
        }
        
        if (newPassword.length() < 6) {
            System.err.println("‚ùå M·∫≠t kh·∫©u qu√° ng·∫Øn: " + newPassword.length() + " k√Ω t·ª±");
            request.setAttribute("error", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.");
            request.getRequestDispatcher("reset-password.jsp").forward(request, response);
            return;
        }
        
        // Ki·ªÉm tra m·∫≠t kh·∫©u c√≥ ch·ªØ c√°i v√† s·ªë
        if (!newPassword.matches(".*[a-zA-Z].*") || !newPassword.matches(".*\\d.*")) {
            System.err.println("‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√°p ·ª©ng y√™u c·∫ßu");
            request.setAttribute("error", "M·∫≠t kh·∫©u ph·∫£i bao g·ªìm c·∫£ ch·ªØ c√°i v√† s·ªë.");
            request.getRequestDispatcher("reset-password.jsp").forward(request, response);
            return;
        }
        
        System.out.println("‚úÖ Validation th√†nh c√¥ng, b·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t database...");
        
        try {
            // Ki·ªÉm tra email t·ªìn t·∫°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t
            User existingUser = UserDAO.getUserByEmail(email);
            if (existingUser == null) {
                System.err.println("‚ùå Email kh√¥ng t·ªìn t·∫°i trong database: " + email);
                request.setAttribute("error", "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.");
                if (fromProfile != null && fromProfile) {
                    response.sendRedirect("ResetPasswordServlet?action=change-password-from-profile");
                } else {
                    request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
                }
                return;
            }
            
            System.out.println("‚úÖ Email t·ªìn t·∫°i, UserID: " + existingUser.getUserId());
            
            // Test database connection tr∆∞·ªõc
            System.out.println("üß™ Test database connection...");
            UserDAO.testDatabaseConnection();
            
            // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong database - s·ª≠ d·ª•ng method ch√≠nh ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán
            System.out.println("üîÑ ƒêang g·ªçi UserDAO.updatePasswordByEmail...");
            boolean updated = UserDAO.updatePasswordByEmail(email, newPassword);
            
            if (updated) {
                System.out.println("‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng trong database!");
                
                // Verify update b·∫±ng c√°ch th·ª≠ ƒëƒÉng nh·∫≠p
                System.out.println("üîç X√°c minh b·∫±ng c√°ch test ƒëƒÉng nh·∫≠p...");
                User testLogin = UserDAO.loginUser(email, newPassword);
                
                if (testLogin != null) {
                    System.out.println("‚úÖ X√°c minh th√†nh c√¥ng - c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi!");
                    
                    // X√≥a session data
                    session.removeAttribute("resetOTPData");
                    session.removeAttribute("otpVerified");
                    session.removeAttribute("resetEmail");
                    session.removeAttribute("from_profile");
                    
                    System.out.println("üßπ ƒê√£ x√≥a session data");
                    
                    // ‚úÖ Chuy·ªÉn h∆∞·ªõng kh√°c nhau t√πy theo ngu·ªìn
                    if (fromProfile != null && fromProfile) {
                        // T·ª´ trang profile - c·∫≠p nh·∫≠t session user v√† quay v·ªÅ trang t√†i kho·∫£n
                        session.setAttribute("user", testLogin); // C·∫≠p nh·∫≠t user trong session
                        response.sendRedirect("user_taikhoan.jsp?success=password_changed");
                    } else {
                        // T·ª´ qu√™n m·∫≠t kh·∫©u - v·ªÅ trang login
                        request.setAttribute("success", "üéâ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi.");
                        request.getRequestDispatcher("login.jsp").forward(request, response);
                    }
                    
                } else {
                    System.err.println("‚ùå Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi - c√≥ l·ªói x·∫£y ra");
                    request.setAttribute("error", "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.");
                    request.getRequestDispatcher("reset-password.jsp").forward(request, response);
                }
                
            } else {
                System.err.println("‚ùå C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th·∫•t b·∫°i trong database");
                request.setAttribute("error", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong database. Vui l√≤ng th·ª≠ l·∫°i.");
                request.getRequestDispatcher("reset-password.jsp").forward(request, response);
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå Exception trong qu√° tr√¨nh reset password:");
            System.err.println("   - Message: " + e.getMessage());
            System.err.println("   - Class: " + e.getClass().getName());
            e.printStackTrace();
            
            request.setAttribute("error", "C√≥ l·ªói h·ªá th·ªëng x·∫£y ra: " + e.getMessage());
            request.getRequestDispatcher("reset-password.jsp").forward(request, response);
        }
    }
} 