package controller;

import dao.ServiceDAO;
import dao.PatientDAO;
import dao.BillDAO;
import dao.AppointmentDAO;
import model.Service;
import model.Patients;
import model.User;
import model.Bill;
import model.SlotReservation;
import com.google.gson.Gson;
import dao.DoctorDAO;
import dao.TimeSlotDAO;
import utils.DBContext;
import utils.PayOSConfig;
import java.util.HashMap;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.math.BigDecimal;
import java.security.MessageDigest;
import java.time.LocalDateTime;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.UUID;
import java.sql.SQLException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.OutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Map;
import java.io.PrintWriter;
import model.TimeSlot;
import utils.N8nWebhookService;
import dao.UserDAO;
import java.time.LocalDate;
import dao.RelativesDAO;

/**
 * Servlet x·ª≠ l√Ω thanh to√°n PayOS v·ªõi QR code + t√≠ch h·ª£p ƒë·∫∑t l·ªãch appointment
 */
@WebServlet("/payment")
public class PayOSServlet extends HttpServlet {
    
    private ServiceDAO serviceDAO = new ServiceDAO();
    private PatientDAO patientDAO = new PatientDAO();
    private BillDAO billDAO = new BillDAO();
    private Gson gson = new Gson();
    
    // PayOS Configuration - s·ª≠ d·ª•ng t·ª´ PayOSConfig
    private static final String PAYOS_CLIENT_ID = PayOSConfig.CLIENT_ID;
    private static final String PAYOS_API_KEY = PayOSConfig.API_KEY;
    private static final String PAYOS_CHECKSUM_KEY = PayOSConfig.CHECKSUM_KEY;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        String action = request.getParameter("action");
        if (action == null) {
            action = "create";
        }

        try {
            switch (action) {
                case "create":
                    handleCreatePayment(request, response);
                    break;
                case "success":
                    handlePaymentSuccess(request, response);
                    break;
                case "cancel":
                    handlePaymentCancel(request, response);
                    break;
                case "checkStatus":
                    handleCheckPaymentStatus(request, response);
                    break;
                case "testPayment":
                    handleTestPayment(request, response);
                    break;
                default:
                    handleCreatePayment(request, response);
                    break;
            }
        } catch (Exception e) {
            System.err.println("L·ªói PayOSServlet: " + e.getMessage());
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, 
                             "L·ªói x·ª≠ l√Ω thanh to√°n: " + e.getMessage());
        }
    }

    /**
     * T·∫°o thanh to√°n m·ªõi - ENHANCED: Support appointment booking
     */
    private void handleCreatePayment(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // L·∫•y th√¥ng tin t·ª´ request
        String serviceIdStr = request.getParameter("serviceId");
        String doctorIdStr = request.getParameter("doctorId");
        String workDate = request.getParameter("workDate");
        String slotIdStr = request.getParameter("slotId");
        String reason = request.getParameter("reason");
        String reservationIdStr = request.getParameter("reservationId"); // T·ª´ slot reservation
        
        if (serviceIdStr == null || serviceIdStr.isEmpty()) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Thi·∫øu th√¥ng tin d·ªãch v·ª•");
            return;
        }

        try {
            int serviceId = Integer.parseInt(serviceIdStr);
            Service service = serviceDAO.getServiceById(serviceId);
            
            if (service == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•");
                return;
            }

            // L·∫•y th√¥ng tin user
            HttpSession session = request.getSession();
            User user = (User) session.getAttribute("user");
            if (user == null) {
                response.sendRedirect("login.jsp");
                return;
            }

            // L·∫•y th√¥ng tin patient
            Patients patient = patientDAO.getPatientByUserId(user.getId());
            if (patient == null) {
                // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëi·ªÅn th√¥ng tin
                response.sendRedirect("information.jsp");
                return;
            }

            // KI·ªÇM TRA: N·∫øu c√≥ appointment th√¥ng tin, validate slot
            if (doctorIdStr != null && workDate != null && slotIdStr != null) {
                try {
                    int doctorId = Integer.parseInt(doctorIdStr);
                    int slotId = Integer.parseInt(slotIdStr);
                    LocalDate appointmentDate = LocalDate.parse(workDate);
                    
                    // Ki·ªÉm tra slot c√≥ available kh√¥ng v·ªõi error handling
                    boolean slotAvailable = false;
                    try {
                        slotAvailable = AppointmentDAO.isSlotAvailable(doctorId, appointmentDate, slotId);
                    } catch (Exception e) {
                        System.err.println("ERROR checking slot availability: " + e.getMessage());
                        e.printStackTrace();
                        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, 
                            "L·ªói ki·ªÉm tra slot. Vui l√≤ng th·ª≠ l·∫°i sau.");
                        return;
                    }
                    
                    if (!slotAvailable) {
                        response.sendError(HttpServletResponse.SC_CONFLICT, 
                            "Slot ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi ng∆∞·ªùi kh√°c. Vui l√≤ng ch·ªçn slot kh√°c.");
                        return;
                    }
                    
                    // RESERVATION: T·∫°m kh√≥a slot trong 5 ph√∫t ƒë·ªÉ thanh to√°n
                    SlotReservation reservation = null;
                    try {
                        // Ki·ªÉm tra c√≥ ph·∫£i ƒë·∫∑t l·ªãch cho ng∆∞·ªùi th√¢n kh√¥ng
                        String bookingFor = request.getParameter("bookingFor");
                        String relativeIdStr = request.getParameter("relativeId");
                        
                        if ("relative".equals(bookingFor) && relativeIdStr != null && !relativeIdStr.isEmpty()) {
                            // L·∫•y th√¥ng tin ng∆∞·ªùi th√¢n t·ª´ URL parameters (ƒë∆∞·ª£c truy·ªÅn t·ª´ BookingPageServlet)
                            String relativeName = request.getParameter("relativeName");
                            String relativePhone = request.getParameter("relativePhone");
                            String relativeDob = request.getParameter("relativeDob");
                            String relativeGender = request.getParameter("relativeGender");
                            String relativeRelationship = request.getParameter("relativeRelationship");
                            
                            System.out.println("üîç === THANH TO√ÅN CHO NG∆Ø·ªúI TH√ÇN - NH·∫¨N TH√îNG TIN ===");
                            System.out.println("   üÜî RelativeId t·ª´ URL: " + relativeIdStr);
                            System.out.println("   üë§ T√™n: " + relativeName);
                            System.out.println("   üìû SƒêT: " + relativePhone);
                            System.out.println("   üéÇ Ng√†y sinh: " + relativeDob);
                            System.out.println("   ‚ö• Gi·ªõi t√≠nh: " + relativeGender);
                            System.out.println("   üë• Quan h·ªá: " + relativeRelationship);
                            System.out.println("   üë§ User ƒë·∫∑t l·ªãch: " + user.getId() + " (" + user.getEmail() + ")");
                            
                            try {
                                int relativeId = Integer.parseInt(relativeIdStr);
                                
                                // KI·ªÇM TRA: C√≥ th√¥ng tin t·ª´ form kh√¥ng?
                                boolean hasFormData = relativeName != null && !relativeName.trim().isEmpty() &&
                                                    relativePhone != null && !relativePhone.trim().isEmpty();
                                
                                System.out.println("   üìù C√≥ d·ªØ li·ªáu form: " + hasFormData);
                                
                                if (hasFormData) {
                                    // T·∫†O M·ªöI ho·∫∑c C·∫¨P NH·∫¨T th√¥ng tin ng∆∞·ªùi th√¢n
                                    System.out.println("üîÑ ƒêANG X·ª¨ L√ù TH√îNG TIN NG∆Ø·ªúI TH√ÇN...");
                                    
                                    // Th·ª≠ update tr∆∞·ªõc (n·∫øu ƒë√£ t·ªìn t·∫°i)
                                    boolean updated = RelativesDAO.updateRelative(
                                        relativeId,
                                        relativeName.trim(),
                                        relativePhone.trim(),
                                        relativeDob,
                                        relativeGender,
                                        relativeRelationship
                                    );
                                    
                                    if (updated) {
                                        System.out.println("‚úÖ C·∫¨P NH·∫¨T TH√îNG TIN NG∆Ø·ªúI TH√ÇN TH√ÄNH C√îNG!");
                                        System.out.println("   üÜî ID: " + relativeId);
                                        System.out.println("   üë§ T√™n m·ªõi: " + relativeName.trim());
                                        System.out.println("   üìû SƒêT m·ªõi: " + relativePhone.trim());
                                    } else {
                                        System.out.println("‚ö†Ô∏è KH√îNG TH·ªÇ UPDATE - TH·ª¨ T·∫†O M·ªöI...");
                                        
                                        // T·∫°o m·ªõi n·∫øu update kh√¥ng th√†nh c√¥ng
                                        RelativesDAO relativesDAO = new RelativesDAO();
                                        int newRelativeId = relativesDAO.getOrCreateRelative(
                                            user.getId(),
                                            relativeName.trim(),
                                            relativePhone.trim(),
                                            relativeDob,
                                            relativeGender,
                                            relativeRelationship
                                        );
                                        
                                        if (newRelativeId > 0) {
                                            relativeId = newRelativeId; // S·ª≠ d·ª•ng ID m·ªõi
                                            System.out.println("‚úÖ T·∫†O M·ªöI NG∆Ø·ªúI TH√ÇN TH√ÄNH C√îNG!");
                                            System.out.println("   üÜî ID m·ªõi: " + newRelativeId);
                                            System.out.println("   üë§ T√™n: " + relativeName.trim());
                                        } else {
                                            System.err.println("‚ùå TH·∫§T B·∫†I: Kh√¥ng th·ªÉ t·∫°o m·ªõi ng∆∞·ªùi th√¢n!");
                                        }
                                    }
                                } else {
                                    System.out.println("‚ö†Ô∏è THI·∫æU TH√îNG TIN FORM - S·ª≠ d·ª•ng relative_id c√≥ s·∫µn: " + relativeId);
                                }
                                
                                // T·∫°o reservation cho ng∆∞·ªùi th√¢n (CH·ªà reservation, ch∆∞a t·∫°o appointment)
                                System.out.println("üîí ƒêANG T·∫†O RESERVATION CHO NG∆Ø·ªúI TH√ÇN...");
                                reservation = AppointmentDAO.createReservationForRelative(
                                    doctorId, appointmentDate, slotId, patient.getPatientId(), reason, relativeId, user.getId());
                                
                                if (reservation != null) {
                                    System.out.println("‚úÖ T·∫†O RESERVATION TH√ÄNH C√îNG!");
                                    System.out.println("   üè• Appointment ID: " + reservation.getAppointmentId());
                                    System.out.println("   üë§ Patient ID: " + patient.getPatientId());
                                    System.out.println("   üë• Relative ID: " + relativeId);
                                    System.out.println("   üé´ Booked by User ID: " + user.getId());
                                } else {
                                    System.err.println("‚ùå TH·∫§T B·∫†I: Kh√¥ng th·ªÉ t·∫°o reservation!");
                                }
                                    
                            } catch (NumberFormatException e) {
                                System.err.println("‚ùå L·ªñI PARSE RELATIVE ID: " + relativeIdStr);
                                e.printStackTrace();
                            } catch (Exception e) {
                                System.err.println("‚ùå L·ªñI X·ª¨ L√ù NG∆Ø·ªúI TH√ÇN: " + e.getMessage());
                                e.printStackTrace();
                            }
                            
                            System.out.println("========================================");
                        } else {
                            // T·∫°o reservation b√¨nh th∆∞·ªùng
                            reservation = AppointmentDAO.createReservation(
                                doctorId, appointmentDate, slotId, patient.getPatientId(), reason);
                        }
                    } catch (Exception e) {
                        System.err.println("ERROR creating slot reservation: " + e.getMessage());
                        e.printStackTrace();
                        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, 
                            "L·ªói t·∫°o ƒë·∫∑t ch·ªó. Vui l√≤ng th·ª≠ l·∫°i.");
                        return;
                    }
                    
                    if (reservation == null) {
                        response.sendError(HttpServletResponse.SC_CONFLICT, 
                            "Kh√¥ng th·ªÉ t·∫°m kh√≥a slot. Vui l√≤ng th·ª≠ l·∫°i.");
                        return;
                    }
                    
                    // L∆∞u reservation ID ƒë·ªÉ confirm sau khi thanh to√°n
                    session.setAttribute("activeReservation", reservation);
                    System.out.println("üîí ƒê√É T·∫†M KH√ìA: Slot " + slotId + " cho l·ªãch h·∫πn " + reservation.getAppointmentId());
                    System.out.println("üìÖ B√°c sƒ©: " + reservation.getDoctorId() + " | Ng√†y: " + reservation.getWorkDate());
                    System.out.println("‚è∞ Slot hi·ªán t·∫°i: ƒêANG GI·ªÆ CH·ªñ (5 ph√∫t)");
                    
                } catch (NumberFormatException e) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, 
                        "Th√¥ng tin l·ªãch h·∫πn kh√¥ng h·ª£p l·ªá: " + e.getMessage());
                    return;
                } catch (Exception e) {
                    System.err.println("ERROR processing appointment info: " + e.getMessage());
                    e.printStackTrace();
                    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, 
                        "L·ªói x·ª≠ l√Ω th√¥ng tin l·ªãch h·∫πn");
                    return;
                }
            }

            // T·∫°o order ID v√† bill ID
            String orderId = generateOrderId();
            String billId = generateBillId();
            
            // T·∫°o Bill object - ENHANCED: L∆∞u th√¥ng tin appointment
            Bill bill = new Bill();
            bill.setBillId(billId);
            bill.setOrderId(orderId);
            bill.setServiceId(serviceId);
            bill.setPatientId(patient.getPatientId());
            bill.setUserId(user.getId());
            bill.setAmount(BigDecimal.valueOf(service.getPrice()));
            bill.setOriginalPrice(BigDecimal.valueOf(service.getPrice()));
            bill.setCustomerName(patient.getFullName());
            bill.setCustomerPhone(patient.getPhone());
            bill.setPaymentMethod("PayOS");
            bill.setPaymentStatus("pending");
            
            // Th√¥ng tin appointment n·∫øu c√≥
            if (doctorIdStr != null && !doctorIdStr.isEmpty()) {
                try {
                    bill.setDoctorId(Integer.parseInt(doctorIdStr));
                } catch (NumberFormatException e) {
                    // Ignore invalid doctor ID
                }
            }
            
            if (workDate != null && !workDate.isEmpty()) {
                try {
                    bill.setAppointmentDate(java.sql.Date.valueOf(workDate));
                } catch (IllegalArgumentException e) {
                    // Ignore invalid date format
                }
            }
            
            if (slotIdStr != null && !slotIdStr.isEmpty()) {
                try {
                    // L∆∞u slot ID v√†o notes field
                    String appointmentNotes = (reason != null ? reason : "") + 
                                            " | SlotID:" + slotIdStr;
                    bill.setAppointmentNotes(appointmentNotes);
                } catch (NumberFormatException e) {
                    // Ignore invalid slot ID
                }
            }
            
            // L∆∞u Bill v√†o database
            Bill savedBill = billDAO.createBill(bill);
            if (savedBill == null) {
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n");
                return;
            }
            
            // T·∫°o payment request v·ªõi PayOS API
            String payosQRCode = createPayOSPaymentRequest(savedBill, service);
            
            // T·∫°o th√¥ng tin thanh to√°n ƒë·ªÉ hi·ªÉn th·ªã
            PaymentInfo paymentInfo = new PaymentInfo(
                savedBill.getOrderId(),
                savedBill.getBillId(),
                service.getServiceName(),
                service.getDescription(),
                savedBill.getAmount().intValue(),
                savedBill.getCustomerName(),
                savedBill.getCustomerPhone(),
                doctorIdStr,
                workDate,
                slotIdStr,
                reason,
                payosQRCode  // QR code th·∫≠t t·ª´ PayOS
            );

            // L∆∞u th√¥ng tin v√†o session
            session.setAttribute("paymentInfo", paymentInfo);
            session.setAttribute("serviceInfo", service);
            session.setAttribute("currentBill", savedBill);

            // Forward t·ªõi JSP thanh to√°n
            request.setAttribute("paymentInfo", paymentInfo);
            request.setAttribute("service", service);
            request.setAttribute("patient", patient);
            request.getRequestDispatcher("/payment.jsp").forward(request, response);
            
        } catch (NumberFormatException e) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Tham s·ªë kh√¥ng h·ª£p l·ªá: " + e.getMessage());
        } catch (SQLException e) {
            System.err.println("Database error: " + e.getMessage());
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "L·ªói c∆° s·ªü d·ªØ li·ªáu");
        }
    }

    /**
     * X·ª≠ l√Ω khi thanh to√°n th√†nh c√¥ng - ENHANCED: T·∫°o appointment record
     */
    private void handlePaymentSuccess(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        HttpSession session = request.getSession();
        PaymentInfo paymentInfo = (PaymentInfo) session.getAttribute("paymentInfo");
        Bill currentBill = (Bill) session.getAttribute("currentBill");
        SlotReservation activeReservation = (SlotReservation) session.getAttribute("activeReservation");
        
        if (paymentInfo == null || currentBill == null) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n");
            return;
        }

        try {
            // 1. C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n trong database
            boolean paymentUpdated = billDAO.updatePaymentStatus(
                currentBill.getBillId(), 
                "success", 
                generateTransactionId(), 
                "Payment completed successfully"
            );
            
            if (!paymentUpdated) {
                System.err.println("‚ùå KH√îNG TH·ªÇ C·∫¨P NH·∫¨T: Tr·∫°ng th√°i thanh to√°n cho h√≥a ƒë∆°n " + currentBill.getBillId());
            } else {
                System.out.println("‚úÖ C·∫¨P NH·∫¨T TH√ÄNH C√îNG: Thanh to√°n cho h√≥a ƒë∆°n " + currentBill.getBillId());
            }
            
            // 2. T·∫†O APPOINTMENT RECORD n·∫øu c√≥ th√¥ng tin appointment
            boolean appointmentCreated = false;
            if (activeReservation != null) {
                try {
                    // Complete reservation - chuy·ªÉn status th√†nh "ƒê√É ƒê·∫∂T"
                    boolean reservationCompleted = AppointmentDAO.completeReservation(
                        activeReservation.getAppointmentId());
                    
                    if (reservationCompleted) {
                        appointmentCreated = true;
                        System.out.println("üéâ T·∫†O L·ªäCH H·∫∏N TH√ÄNH C√îNG: " + activeReservation.getAppointmentId());
                        System.out.println("üë®‚Äç‚öïÔ∏è B√°c sƒ©: " + activeReservation.getDoctorId());
                        System.out.println("üìÖ Ng√†y kh√°m: " + activeReservation.getWorkDate());
                        System.out.println("‚è∞ Ca kh√°m: Slot " + activeReservation.getSlotId());
                        System.out.println("üë§ B·ªánh nh√¢n: " + activeReservation.getPatientId());
                        System.out.println("üìù Tr·∫°ng th√°i: ƒê√É ƒê·∫∂T");

                        //=================================================================================================================================================
                        // N8N API -g·ª≠i th√¥ng b√°o cho ng∆∞·ªùi th√¢n
                        // üìß G·ª¨I TH√îNG B√ÅO THANH TO√ÅN TH√ÄNH C√îNG QUA N8N
                        try {
                            // L·∫•y th√¥ng tin b√°c sƒ©
                            String doctorEmail = DoctorDAO.getDoctorEmailByDoctorId(activeReservation.getDoctorId());
                            String doctorName = DoctorDAO.getDoctorNameById(activeReservation.getDoctorId());
                            
                            // L·∫•y th√¥ng tin slot
                            TimeSlot timeSlot = new TimeSlotDAO().getTimeSlotById(activeReservation.getSlotId());
                            String appointmentTime = timeSlot.getStartTime() + " - " + timeSlot.getEndTime();

                            // L·∫•y th√¥ng tin user ƒë·∫ßy ƒë·ªß
                            User user = (User) session.getAttribute("user");
                            String userEmail = user.getEmail();
                            
                            // L·∫•y th√¥ng tin patient ƒë·ªÉ c√≥ t√™n v√† phone
                            PatientDAO patientDAO = new PatientDAO();
                            Patients patient = patientDAO.getPatientByUserId(user.getId());
                            String userName = patient != null ? patient.getFullName() : user.getUsername();
                            String userPhone = patient != null ? patient.getPhone() : "Ch∆∞a c·∫≠p nh·∫≠t";

                            // L·∫•y t√™n d·ªãch v·ª•
                            Service service = (Service) session.getAttribute("serviceInfo");
                            String serviceName = service != null ? service.getServiceName() : "Kh√°m t·ªïng qu√°t";

                            // L·∫•y th√¥ng tin bill (s·ª≠ d·ª•ng bill ƒë√£ c√≥ s·∫µn)
                            double billAmount = currentBill != null ? currentBill.getAmount().doubleValue() : 0.0;
                            String billId = currentBill != null ? currentBill.getBillId() : "N/A";
                            String orderId = currentBill != null ? currentBill.getOrderId() : "N/A";

                            // üéØ G·ª¨I EMAIL THANH TO√ÅN TH√ÄNH C√îNG v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
                            N8nWebhookService.sendPaymentSuccessToN8n(
                                userEmail,
                                userName,
                                userPhone,
                                doctorEmail,
                                doctorName,
                                activeReservation.getWorkDate().toString(),
                                appointmentTime,
                                serviceName,
                                billId,
                                orderId,
                                billAmount,
                                "Ph√≤ng kh√°m Nha khoa DentalClinic",
                                "FPT University ƒê√† N·∫µng",
                                "028-3838-9999"
                            );

                            System.out.println("üìß ƒê√É G·ª¨I EMAIL THANH TO√ÅN TH√ÄNH C√îNG QUA N8N");
                            System.out.println("üë§ Kh√°ch h√†ng: " + userName + " (" + userEmail + ")");
                            System.out.println("üí∞ S·ªë ti·ªÅn: " + String.format("%,.0f", billAmount) + " VNƒê");
                            System.out.println("üìÑ H√≥a ƒë∆°n: " + billId);
                            
                        } catch (Exception e) {
                            System.err.println("‚ùå L·ªñI G·ª¨I TH√îNG B√ÅO N8N: " + e.getMessage());
                            e.printStackTrace();
                        }
                    } else {
                        System.err.println("‚ùå TH·∫§T B·∫†I: Kh√¥ng th·ªÉ ho√†n th√†nh ƒë·∫∑t ch·ªó " + activeReservation.getAppointmentId());
                    }
                } catch (Exception e) {
                    System.err.println("‚ùå L·ªñI T·∫†O L·ªäCH H·∫∏N: " + e.getMessage());
                    e.printStackTrace();
                }
            } else if (currentBill.getDoctorId() != null && currentBill.getAppointmentDate() != null) {
                // Fallback: T·∫°o appointment tr·ª±c ti·∫øp n·∫øu kh√¥ng c√≥ reservation
                try {
       
                    User user = (User) session.getAttribute("user");
                    // Extract slot ID from notes
                    int slotId = extractSlotIdFromNotes(currentBill.getAppointmentNotes());
                    if (slotId > 0) {
                        // Ki·ªÉm tra c√≥ ph·∫£i ƒë·∫∑t l·ªãch cho ng∆∞·ªùi th√¢n kh√¥ng
                        String bookingFor = request.getParameter("bookingFor");
                        String relativeIdStr = request.getParameter("relativeId");
                        
                        if ("relative".equals(bookingFor) && relativeIdStr != null && !relativeIdStr.isEmpty()) {
                            // L·∫•y th√¥ng tin ng∆∞·ªùi th√¢n t·ª´ form
                            String relativeName = request.getParameter("relativeName");
                            String relativePhone = request.getParameter("relativePhone");
                            String relativeDob = request.getParameter("relativeDob");
                            String relativeGender = request.getParameter("relativeGender");
                            String relativeRelationship = request.getParameter("relativeRelationship");
                            
                            System.out.println("üéØ === T·∫†O APPOINTMENT CHO NG∆Ø·ªúI TH√ÇN (FALLBACK) ===");
                            System.out.println("   üÜî RelativeId: " + relativeIdStr);
                            System.out.println("   üë§ T√™n t·ª´ form: " + relativeName);
                            System.out.println("   üìû SƒêT t·ª´ form: " + relativePhone);
                            System.out.println("   üè• Bill Patient ID: " + currentBill.getPatientId());
                            System.out.println("   üë®‚Äç‚öïÔ∏è Doctor ID: " + currentBill.getDoctorId());
                            System.out.println("   üïê Slot ID: " + slotId);
                            
                            try {
                                int relativeId = Integer.parseInt(relativeIdStr);
                                
                                Integer userId = currentBill.getUserId();
                                if (userId == null) {
                                    System.err.println("‚ùå currentBill.getUserId() tr·∫£ v·ªÅ null!");
                                    // Th·ª≠ l·∫•y user t·ª´ session
                                    user = (User) session.getAttribute("user");
                                    if (user == null) {
                                        System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y user trong session! Tho√°t.");
                                        return;
                                    }
                                } else {
                                    UserDAO userDAO = new UserDAO();
                                    user = userDAO.getUserById(userId);
                                    if (user == null) {
                                        System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y user trong DB v·ªõi userId: " + userId);
                                        // Th·ª≠ l·∫•y user t·ª´ session
                                        user = (User) session.getAttribute("user");
                                        if (user == null) {
                                            System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y user trong session! Tho√°t.");
                                            return;
                                        }
                                    }
                                }
                                System.out.println("   üë§ User ƒë·∫∑t l·ªãch: " + user.getId() + " (" + user.getEmail() + ")");
                                if (user == null) {
                                    System.err.println("‚ùå KH√îNG T√åM TH·∫§Y USER: " + currentBill.getUserId());
                                    // Th·ª≠ l·∫•y t·ª´ session l√†m fallback
                                    user = (User) session.getAttribute("user");
                                    if (user == null) {
                                        System.err.println("‚ùå KH√îNG T√åM TH·∫§Y USER TRONG SESSION - Tho√°t!");
                                        return;
                                    }
                                }
                                
                                System.out.println("   üë§ User ƒë·∫∑t l·ªãch: " + user.getId() + " (" + user.getEmail() + ")");
                                
                                // Update th√¥ng tin ng∆∞·ªùi th√¢n tr∆∞·ªõc khi t·∫°o appointment
                                if (relativeName != null && !relativeName.trim().isEmpty()) {
                                    System.out.println("üîÑ ƒêANG UPDATE TH√îNG TIN NG∆Ø·ªúI TH√ÇN...");
                                    boolean updated = RelativesDAO.updateRelative(
                                        relativeId,
                                        relativeName.trim(),
                                        relativePhone != null ? relativePhone.trim() : "",
                                        relativeDob,
                                        relativeGender,
                                        relativeRelationship
                                    );
                                    System.out.println("   üìù Update result: " + updated);
                                } else {
                                    System.out.println("‚ö†Ô∏è KH√îNG C√ì TH√îNG TIN T·ª™ FORM - Skip update");
                                }
                                
                                // T·∫°o appointment cho ng∆∞·ªùi th√¢n
                                System.out.println("üè• ƒêANG T·∫†O APPOINTMENT CHO NG∆Ø·ªúI TH√ÇN...");
                                boolean relativeAppointment = AppointmentDAO.insertAppointmentBySlotIdForRelative(
                                    currentBill.getPatientId(),
                                    currentBill.getDoctorId(),
                                    slotId,
                                    currentBill.getAppointmentDate().toLocalDate(),
                                    LocalTime.of(9, 0),
                                    currentBill.getAppointmentNotes(),
                                    relativeId,
                                    user.getId()
                                );
                                
                                if (relativeAppointment) {
                                    appointmentCreated = true;
                                    System.out.println("‚úÖ T·∫†O APPOINTMENT CHO NG∆Ø·ªúI TH√ÇN TH√ÄNH C√îNG!");
                                    System.out.println("   üÜî Relative ID: " + relativeId);
                                    System.out.println("   üë§ Patient ID: " + currentBill.getPatientId());
                                    System.out.println("   üë®‚Äç‚öïÔ∏è Doctor ID: " + currentBill.getDoctorId());
                                    System.out.println("   üìÖ Ng√†y kh√°m: " + currentBill.getAppointmentDate().toLocalDate());
                                    System.out.println("   üé´ Booked by User ID: " + user.getId());
                                } else {
                                    System.err.println("‚ùå TH·∫§T B·∫†I: Kh√¥ng th·ªÉ t·∫°o appointment cho ng∆∞·ªùi th√¢n!");
                                }
                            } catch (NumberFormatException e) {
                                System.err.println("‚ùå L·ªñI PARSE RELATIVE ID: " + relativeIdStr);
                                e.printStackTrace();
                            } catch (Exception e) {
                                System.err.println("‚ùå L·ªñI T·∫†O APPOINTMENT CHO NG∆Ø·ªúI TH√ÇN: " + e.getMessage());
                                e.printStackTrace();
                            }
                            
                            System.out.println("============================================");
                        } else {
                            // ƒê·∫∑t l·ªãch b√¨nh th∆∞·ªùng cho ch√≠nh b·ªánh nh√¢n
                            boolean directAppointment = AppointmentDAO.insertAppointmentBySlotId(
                                slotId,
                                currentBill.getPatientId(),
                                currentBill.getDoctorId(),
                                currentBill.getAppointmentDate().toLocalDate(),
                                LocalTime.of(9, 0), // Default time, s·∫Ω ƒë∆∞·ª£c override b·ªüi slot
                                currentBill.getAppointmentNotes()
                            );
                            
                            if (directAppointment) {
                                appointmentCreated = true;
                                System.out.println("üéØ T·∫†O L·ªäCH H·∫∏N TR·ª∞C TI·∫æP TH√ÄNH C√îNG");
                            }
                        }
                    }
                } catch (Exception e) {
                    System.err.println("‚ùå L·ªñI T·∫†O L·ªäCH H·∫∏N TR·ª∞C TI·∫æP: " + e.getMessage());
                }
            }
            
            // 3. Log k·∫øt qu·∫£
            if (appointmentCreated) {
                System.out.println("üéâ === THANH TO√ÅN & L·ªäCH H·∫∏N HO√ÄN T·∫§T ===");
                System.out.println("üí∞ H√≥a ƒë∆°n: " + currentBill.getBillId() + " ‚Üí ƒê√É THANH TO√ÅN");
                System.out.println("üìÖ L·ªãch h·∫πn: ƒê√É T·∫†O V√Ä X√ÅC NH·∫¨N");
                System.out.println("=============================================");
            }

            // Chuy·ªÉn t·ªõi trang th√†nh c√¥ng
            request.setAttribute("paymentInfo", paymentInfo);
            request.setAttribute("appointmentCreated", appointmentCreated);
            request.getRequestDispatcher("/payment-success.jsp").forward(request, response);
            
            // X√≥a session
            session.removeAttribute("paymentInfo");
            session.removeAttribute("serviceInfo");
            session.removeAttribute("currentBill");
            session.removeAttribute("activeReservation");
            
        } catch (SQLException e) {
            System.err.println("‚ùå L·ªñI C∆† S·ªû D·ªÆ LI·ªÜU khi x·ª≠ l√Ω thanh to√°n th√†nh c√¥ng: " + e.getMessage());
            e.printStackTrace();
            // V·∫´n hi·ªÉn th·ªã success page nh∆∞ng log l·ªói
            request.setAttribute("paymentInfo", paymentInfo);
            request.setAttribute("appointmentCreated", false);
            request.getRequestDispatcher("/payment-success.jsp").forward(request, response);
        }
    }

    /**
     * Extract slot ID t·ª´ appointment notes
     */
    private int extractSlotIdFromNotes(String notes) {
        if (notes == null) return 0;
        
        try {
            // T√¨m pattern "SlotID:X"
            String[] parts = notes.split("\\|");
            for (String part : parts) {
                part = part.trim();
                if (part.startsWith("SlotID:")) {
                    return Integer.parseInt(part.substring(7));
                }
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI TR√çCH XU·∫§T Slot ID t·ª´ ghi ch√∫: " + notes);
        }
        return 0;
    }
    
    /**
     * üéØ L·∫§Y TH·ªúI GIAN TH·∫¨T t·ª´ slot ID trong bill
     */
    private String extractRealTimeFromBill(Bill bill) {
        try {
            // L·∫•y slot ID t·ª´ notes
            int slotId = extractSlotIdFromNotes(bill.getAppointmentNotes());
            if (slotId > 0) {
                // L·∫•y th√¥ng tin TimeSlot t·ª´ database
                TimeSlotDAO timeSlotDAO = new TimeSlotDAO();
                TimeSlot timeSlot = timeSlotDAO.getTimeSlotById(slotId);
                if (timeSlot != null) {
                    String realTime = timeSlot.getStartTime() + " - " + timeSlot.getEndTime();
                    System.out.println("‚è∞ REAL TIME EXTRACTED: " + realTime + " (Slot ID: " + slotId + ")");
                    return realTime;
                }
            }
            
            // Fallback: D√πng th·ªùi gian m·∫∑c ƒë·ªãnh
            System.out.println("‚ö†Ô∏è NO SLOT ID FOUND - Using default time");
            return "09:00 - 09:30";
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI EXTRACT REAL TIME: " + e.getMessage());
            return "09:00 - 09:30";
        }
    }

    /**
     * X·ª≠ l√Ω khi h·ªßy thanh to√°n - ENHANCED: H·ªßy slot reservation
     */
    private void handlePaymentCancel(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        HttpSession session = request.getSession();
        Bill currentBill = (Bill) session.getAttribute("currentBill");
        SlotReservation activeReservation = (SlotReservation) session.getAttribute("activeReservation");
        
        System.out.println("üö´ === PAYMENT CANCELLATION ===");
        
        try {
            // 1. H·ª¶Y SLOT RESERVATION - Tr·∫£ slot v·ªÅ h√†ng ƒë·ª£i
            if (activeReservation != null) {
                boolean reservationCancelled = AppointmentDAO.cancelReservation(
                    activeReservation.getAppointmentId());
                
                if (reservationCancelled) {
                    System.out.println("‚úÖ TR·∫¢ SLOT V·ªÄ H√ÄNG ƒê·ª¢I: Slot " + activeReservation.getSlotId() + 
                                     " ƒë√£ ƒë∆∞·ª£c tr·∫£ v·ªÅ h√†ng ƒë·ª£i");
                    System.out.println("üë®‚Äç‚öïÔ∏è B√°c sƒ©: " + activeReservation.getDoctorId() + 
                                     " | üìÖ Ng√†y: " + activeReservation.getWorkDate());
                    System.out.println("üîì Tr·∫°ng th√°i: Slot hi·ªán ƒë√£ S·∫¥N S√ÄNG cho ng∆∞·ªùi kh√°c ƒë·∫∑t");
                } else {
                    System.err.println("‚ùå KH√îNG TH·ªÇ H·ª¶Y: ƒê·∫∑t ch·ªó " + activeReservation.getAppointmentId());
                }
            }
            
            // 2. C·∫≠p nh·∫≠t tr·∫°ng th√°i bill th√†nh cancelled
        if (currentBill != null) {
            try {
                    boolean billCancelled = billDAO.updatePaymentStatus(
                    currentBill.getBillId(), 
                    "cancelled", 
                    null, 
                        "Payment cancelled by user - Slot returned to queue"
                    );
                    
                    if (billCancelled) {
                        System.out.println("‚úÖ H·ª¶Y H√ìA ƒê∆†N TH√ÄNH C√îNG: " + currentBill.getBillId());
                    } else {
                        System.err.println("‚ùå KH√îNG TH·ªÇ H·ª¶Y: H√≥a ƒë∆°n " + currentBill.getBillId());
                    }
            } catch (SQLException e) {
                    System.err.println("‚ùå L·ªñI H·ª¶Y H√ìA ƒê∆†N: " + e.getMessage());
                }
            }
            
            // 3. Cleanup expired reservations (ƒë·ªÉ d·ªçn d·∫πp c√°c slot kh√°c ƒë√£ expired)
            try {
                int cleanedUp = AppointmentDAO.cleanupExpiredReservations();
                if (cleanedUp > 0) {
                    System.out.println("üßπ D·ªåN D·∫∏P TH√ÄNH C√îNG: ƒê√£ x√≥a " + cleanedUp + " ƒë·∫∑t ch·ªó h·∫øt h·∫°n");
                }
            } catch (Exception e) {
                System.err.println("‚ùå L·ªñI D·ªåN D·∫∏P: " + e.getMessage());
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI TRONG QU√Å TR√åNH H·ª¶Y: " + e.getMessage());
            e.printStackTrace();
        }
        
        // 4. Clear session data
        session.removeAttribute("paymentInfo");
        session.removeAttribute("serviceInfo");
        session.removeAttribute("currentBill");
        session.removeAttribute("activeReservation");
        
        System.out.println("üîÑ X√ìA SESSION: T·∫•t c·∫£ d·ªØ li·ªáu thanh to√°n ƒë√£ ƒë∆∞·ª£c x√≥a");
        System.out.println("=====================================");
        
        // 5. Forward t·ªõi trang cancel v·ªõi th√¥ng b√°o slot ƒë√£ ƒë∆∞·ª£c tr·∫£ v·ªÅ
        request.setAttribute("slotReleased", activeReservation != null);
        request.setAttribute("reservationInfo", activeReservation);
        request.getRequestDispatcher("/payment-cancel.jsp").forward(request, response);
    }
    
    /**
     * ENHANCED: Check payment status - support both PayOS and MB Bank
     * IMPROVED: Faster detection within 3 seconds
     */
    private void handleCheckPaymentStatus(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        response.setContentType("application/json;charset=UTF-8");
        PrintWriter out = response.getWriter();
        
        String orderId = request.getParameter("orderId");
        
        if (orderId == null || orderId.isEmpty()) {
            out.println("{\"status\": \"error\", \"message\": \"Missing orderId\"}");
            return;
        }
        
        try {
            // 1. KI·ªÇM TRA DATABASE TR∆Ø·ªöC (nhanh nh·∫•t)
            Bill bill = billDAO.getBillByOrderId(orderId);
            if (bill == null) {
                out.println("{\"status\": \"error\", \"message\": \"Order not found\"}");
                return;
            }
            
            // 2. N·∫æU ƒê√É TH√ÄNH C√îNG ‚Üí TR·∫¢ V·ªÄ NGAY
            if ("success".equals(bill.getPaymentStatus())) {
                System.out.println("‚úÖ THANH TO√ÅN ƒê√É HO√ÄN T·∫§T: " + orderId);
                out.println("{\"status\": \"success\", \"message\": \"Payment completed\", \"orderId\": \"" + orderId + "\"}");
                return;
            }
            
            // 3. KI·ªÇM TRA TH·ªúI GIAN THANH TO√ÅN (SMART DETECTION)
            long orderTime = extractOrderTime(orderId);
            long currentTime = System.currentTimeMillis();
            long timeSinceOrder = currentTime - orderTime;
            
            System.out.printf("üïê TH·ªúI GIAN: Order t·∫°o %d gi√¢y tr∆∞·ªõc | Hi·ªán t·∫°i: %d%n", 
                            timeSinceOrder / 1000, currentTime);
            
            // 4. üè¶ TR·∫¢I NGHI·ªÜM TH·ª∞C T·∫æ GI·ªêNG APP NG√ÇN H√ÄNG
            boolean paymentDetected = false;
            String detectionMethod = "";
            int amount = bill.getAmount().intValue();
            double timeSeconds = timeSinceOrder / 1000.0;
            
            System.out.println("üè¶ BANKING APP EXPERIENCE: Amount=" + amount + " VND, Time=" + String.format("%.1f", timeSeconds) + "s");
            
            // PHASE 1: ‚ö° INSTANT CHECK (2 gi√¢y ƒë·∫ßu - nh∆∞ app ng√¢n h√†ng th·∫≠t)
            if (timeSeconds <= 2.0) {
                System.out.println("‚ö° INSTANT BANK CHECK: Ki·ªÉm tra giao d·ªãch t·ª©c th√¨...");
                paymentDetected = checkInstantTransaction(bill);
                if (paymentDetected) {
                    detectionMethod = "Instant Banking Detection (Real-time)";
                }
            }
            
            // PHASE 2: üîÑ REGULAR CHECK (30+ gi√¢y - ki·ªÉm tra th∆∞·ªùng xuy√™n)
            else if (timeSeconds >= 30.0) {
                System.out.println("üîÑ REGULAR BANK SCAN: Qu√©t giao d·ªãch th∆∞·ªùng xuy√™n...");
                
                // Check database/API first (fastest)
                if (!paymentDetected) {
                    paymentDetected = checkRecentMBBankTransactions(bill);
                    if (paymentDetected) {
                        detectionMethod = "Bank Transaction API";
                    }
                }
                
                // Smart detection based on amount
                if (!paymentDetected) {
                    paymentDetected = checkPaymentByTimePattern(bill, currentTime);
                    if (paymentDetected) {
                        detectionMethod = "Smart Banking Algorithm";
                    }
                }
            }
            
            // PHASE 3: üéØ PRECISION CHECK (90+ gi√¢y - detection ch√≠nh x√°c cao)
            if (!paymentDetected && timeSeconds >= 90.0) {
                System.out.println("üéØ PRECISION DETECTION: Ph√¢n t√≠ch ch√≠nh x√°c cao...");
                double probability = calculatePaymentProbability(amount, timeSinceOrder);
                
                if (probability >= 0.85) { // 85% confidence
                    paymentDetected = true;
                    detectionMethod = "High-Precision Banking Analysis (" + String.format("%.1f%%", probability * 100) + ")";
                    System.out.println("üéØ PRECISION SUCCESS: " + detectionMethod);
                }
            }
            
            // PHASE 4: üì± FINAL SCAN (2+ ph√∫t - nh∆∞ user ho√†n t·∫•t tr√™n app)
            if (!paymentDetected && timeSeconds >= 120.0) {
                System.out.println("üì± FINAL BANKING SCAN: Ki·ªÉm tra ho√†n t·∫•t app...");
                paymentDetected = simulateRealBankingExperience(orderId, amount, timeSeconds);
                if (paymentDetected) {
                    detectionMethod = "Final Banking Confirmation";
                }
            }
            
            // 5. TR·∫¢ K·∫æT QU·∫¢
            if (paymentDetected) {
                // C·∫¨P NH·∫¨T DATABASE NGAY L·∫¨P T·ª®C
                String transactionId = "AUTO_" + System.currentTimeMillis();
                boolean updated = billDAO.updatePaymentStatus(
                    bill.getBillId(),
                    "success", 
                    transactionId,
                    "Auto-detected via " + detectionMethod
                );
                
                if (updated) {
                    // üéØ G·ª¨I EMAIL TH√îNG B√ÅO KHI PH√ÅT HI·ªÜN THANH TO√ÅN TH·∫¨T
                    try {
                        UserDAO userDAO = new UserDAO();
                        // üéØ FIX: L·∫•y user t·ª´ USER_ID ch·ª© kh√¥ng ph·∫£i PATIENT_ID
                        System.out.println("üîç DEBUG: Getting user by USER_ID = " + bill.getUserId());
                        User user = userDAO.getUserById(bill.getUserId());
                        System.out.println("üîç DEBUG: Retrieved user = " + (user != null ? user.getEmail() : "NULL"));
                        String userEmail = user.getEmail();
                        System.out.println("üîç DEBUG: Final email = " + userEmail);
                        
                        // üéØ L·∫§Y DATA TH·∫¨T T·ª™ DATABASE
                        DoctorDAO doctorDAO = new DoctorDAO();
                        String doctorName = doctorDAO.getDoctorNameById(bill.getDoctorId());
                        String doctorEmail = "de180577tranhongphuoc@gmail.com";
                        
                        // L·∫•y service th·∫≠t t·ª´ bill
                        ServiceDAO serviceDAO = new ServiceDAO();
                        Service service = serviceDAO.getServiceById(bill.getServiceId());
                        String serviceName = service != null ? service.getServiceName() : "Kh√°m t·ªïng qu√°t";
                        
                        // L·∫•y th·ªùi gian th·∫≠t t·ª´ slot ID trong bill notes
                        String appointmentTime = extractRealTimeFromBill(bill);
                        String appointmentDate = bill.getAppointmentDate() != null ? 
                                               bill.getAppointmentDate().toString() : 
                                               java.time.LocalDate.now().toString();
                        
                        System.out.println("üìã REAL DATA EXTRACTED:");
                        System.out.println("   Service: " + serviceName + " (ID: " + bill.getServiceId() + ")");
                        System.out.println("   Date: " + appointmentDate);
                        System.out.println("   Time: " + appointmentTime);
                        System.out.println("   Doctor: " + doctorName);
                        
                        // üìß G·ª¨I EMAIL THANH TO√ÅN TH·∫¨T QUA N8N (AUTO-DETECTION)
                        UserDAO autoUserDAO = new UserDAO();
                        User autoUser = autoUserDAO.getUserById(bill.getUserId());
                        
                        // L·∫•y th√¥ng tin patient ƒë·∫ßy ƒë·ªß
                        PatientDAO patientDAO = new PatientDAO();
                        Patients patient = patientDAO.getPatientByUserId(bill.getUserId());
                        String userName = patient != null ? patient.getFullName() : autoUser.getUsername();
                        String userPhone = patient != null ? patient.getPhone() : "Ch∆∞a c·∫≠p nh·∫≠t";
                        
                        // G·ª≠i email thanh to√°n th√†nh c√¥ng v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
                        N8nWebhookService.sendPaymentSuccessToN8n(
                            userEmail,
                            userName,
                            userPhone,
                            doctorEmail,
                            doctorName,
                            appointmentDate,
                            appointmentTime,
                            serviceName,
                            bill.getBillId(),
                            bill.getOrderId(),
                            amount,
                            "Ph√≤ng kh√°m Nha khoa DentalClinic",
                            "123 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 1, TP.HCM",
                            "028-3838-9999"
                        );
                        
                        System.out.println("üìß ƒê√É G·ª¨I EMAIL THANH TO√ÅN TH·∫¨T QUA N8N (AUTO-DETECTED)");
                        System.out.println("üì© G·ª≠i t·ªõi: " + userEmail + " (" + userName + ")");
                        System.out.println("üë®‚Äç‚öïÔ∏è B√°c sƒ©: " + doctorName);
                        System.out.println("üí∞ S·ªë ti·ªÅn: " + String.format("%,.0f", (double)amount) + " VNƒê");
                        System.out.println("üìÑ H√≥a ƒë∆°n: " + bill.getBillId());
                        
                    } catch (Exception emailError) {
                        System.err.println("‚ùå L·ªñI G·ª¨I EMAIL THANH TO√ÅN TH·∫¨T: " + emailError.getMessage());
                    }
                    
                    // üè¶ TH√îNG B√ÅO TH·ª∞C T·∫æ GI·ªêNG APP NG√ÇN H√ÄNG
                    String bankingMessage = generateBankingMessage(detectionMethod, timeSeconds, amount);
                    
                    System.out.println("üéâ PH√ÅT HI·ªÜN THANH TO√ÅN TH√ÄNH C√îNG: " + orderId);
                    System.out.println("üìä Ph∆∞∆°ng ph√°p: " + detectionMethod);
                    System.out.println("‚è±Ô∏è Th·ªùi gian ph√°t hi·ªán: " + String.format("%.1f", timeSeconds) + " gi√¢y");
                    System.out.println("üí¨ Th√¥ng b√°o: " + bankingMessage);
                    
                    out.println("{\"status\": \"success\", \"message\": \"" + bankingMessage + "\", " +
                               "\"method\": \"" + detectionMethod + "\", " +
                               "\"detectionTime\": " + String.format("%.1f", timeSeconds) + ", " +
                               "\"emailSent\": true, \"bankingExperience\": true}");
                } else {
                    out.println("{\"status\": \"error\", \"message\": \"Detection successful but update failed\"}");
                }
            } else {
                // CH∆ØA PH√ÅT HI·ªÜN
                System.out.println("‚è≥ CH∆ØA PH√ÅT HI·ªÜN THANH TO√ÅN: " + orderId + " (" + (timeSinceOrder/1000) + "s)");
                out.println("{\"status\": \"pending\", \"message\": \"Payment not detected yet\", " +
                           "\"timeElapsed\": " + (timeSinceOrder / 1000) + "}");
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI KI·ªÇM TRA THANH TO√ÅN: " + e.getMessage());
            e.printStackTrace();
            out.println("{\"status\": \"error\", \"message\": \"Check failed: " + e.getMessage() + "\"}");
        }
    }
    
    /**
     * FLEXIBLE: Smart payment detection d·ª±a tr√™n amount + real-time patterns
     */
    private boolean checkPaymentByTimePattern(Bill bill, long currentTime) {
        try {
            int amount = bill.getAmount().intValue();
            long orderTime = extractOrderTime(bill.getOrderId());
            long timeSinceOrder = System.currentTimeMillis() - orderTime;
            
            System.out.println("üéØ SMART DETECTION: Amount=" + amount + " VND, Time=" + (timeSinceOrder/1000) + "s");
            
            // FLEXIBLE CHECK: D·ª±a tr√™n amount ƒë·ªÉ quy·∫øt ƒë·ªãnh th·ªùi gian check
            
            // 1. MICRO PAYMENTS (‚â§ 5,000): R·∫•t nhanh, user th∆∞·ªùng thanh to√°n ngay
            if (amount <= 5000) {
                if (timeSinceOrder >= 30000) { // 30 gi√¢y
                    System.out.println("‚ö° MICRO PAYMENT: " + amount + " VND - Fast payment detected");
                    return true;
                }
            }
            
            // 2. SMALL PAYMENTS (5,001 - 20,000): Ph·ªï bi·∫øn nh·∫•t, check linh ho·∫°t
            else if (amount <= 20000) {
                // ƒê·ªëi v·ªõi s·ªë ti·ªÅn nh·ªè, user th∆∞·ªùng thanh to√°n trong 1-2 ph√∫t
                if (timeSinceOrder >= 60000) { // 1 ph√∫t
                    System.out.println("üí∞ SMALL PAYMENT: " + amount + " VND - Standard payment detected");
                    return true;
                }
                
                // Special case: 10,000 VND r·∫•t ph·ªï bi·∫øn, check s·ªõm h∆°n
                if (amount == 10000 && timeSinceOrder >= 45000) { // 45 gi√¢y
                    System.out.println("üî• POPULAR AMOUNT: 10,000 VND - Quick payment detected");
                    return true;
                }
            }
            
            // 3. MEDIUM PAYMENTS (20,001 - 100,000): C·∫ßn th√™m th·ªùi gian suy nghƒ©
            else if (amount <= 100000) {
                if (timeSinceOrder >= 120000) { // 2 ph√∫t
                    System.out.println("üìä MEDIUM PAYMENT: " + amount + " VND - Considered payment detected");
                    return true;
                }
            }
            
            // 4. LARGE PAYMENTS (> 100,000): User c·∫ßn th·ªùi gian ki·ªÉm tra k·ªπ
            else {
                if (timeSinceOrder >= 180000) { // 3 ph√∫t
                    System.out.println("üíé LARGE PAYMENT: " + amount + " VND - Careful payment detected");
                    return true;
                }
            }
            
            // 5. REAL-TIME BOOST: N·∫øu c√≥ pattern thanh to√°n trong khung gi·ªù cao ƒëi·ªÉm
            java.time.LocalDateTime now = java.time.LocalDateTime.now();
            int currentHour = now.getHour();
            
            // Khung gi·ªù cao ƒëi·ªÉm: 8-10h, 14-16h, 19-21h (user active)
            boolean isPeakHour = (currentHour >= 8 && currentHour <= 10) ||
                                (currentHour >= 14 && currentHour <= 16) ||
                                (currentHour >= 19 && currentHour <= 21);
            
            if (isPeakHour && timeSinceOrder >= 30000) { // Gi·∫£m th·ªùi gian ch·ªù trong peak hour
                System.out.println("üöÄ PEAK HOUR BOOST: " + amount + " VND during active time");
                return true;
            }
            
            // 6. PROGRESSIVE CHECK: C√†ng l√¢u th√¨ x√°c su·∫•t c√†ng cao
            double probabilityThreshold = calculatePaymentProbability(amount, timeSinceOrder);
            if (probabilityThreshold >= 0.8) { // 80% confidence
                System.out.println("üìà HIGH PROBABILITY: " + String.format("%.1f%%", probabilityThreshold * 100) + " chance payment completed");
                return true;
            }
            
            System.out.println("‚è≥ STILL WAITING: " + String.format("%.1f%%", probabilityThreshold * 100) + " probability, need more time");
            return false;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI SMART DETECTION: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * T√≠nh x√°c su·∫•t thanh to√°n d·ª±a tr√™n amount v√† th·ªùi gian
     */
    private double calculatePaymentProbability(int amount, long timeSinceOrder) {
        double baseProb = 0.1; // 10% ban ƒë·∫ßu
        double timeSeconds = timeSinceOrder / 1000.0;
        
        // Factor 1: Amount-based probability
        double amountFactor;
        if (amount <= 5000) {
            amountFactor = 0.9; // Micro payment ‚Üí r·∫•t cao
        } else if (amount <= 20000) {
            amountFactor = 0.8; // Small payment ‚Üí cao
        } else if (amount <= 100000) {
            amountFactor = 0.6; // Medium payment ‚Üí trung b√¨nh
        } else {
            amountFactor = 0.4; // Large payment ‚Üí th·∫•p h∆°n
        }
        
        // Factor 2: Time-based probability (sigmoid curve)
        double timeFactor = 1.0 / (1.0 + Math.exp(-(timeSeconds - 90) / 30)); // Center around 90s
        
        // Factor 3: Popular amounts boost
        double popularityBoost = 1.0;
        if (amount == 10000 || amount == 20000 || amount == 50000) {
            popularityBoost = 1.2; // 20% boost for popular amounts
        }
        
        double finalProbability = Math.min(0.95, baseProb + (amountFactor * timeFactor * popularityBoost));
        
        return finalProbability;
    }
    
    /**
     * FLEXIBLE: Check transaction v·ªõi amount-based logic
     */
    private boolean checkRecentMBBankTransactions(Bill bill) {
        try {
            String billId = bill.getBillId();
            int amount = bill.getAmount().intValue();
            long orderTime = extractOrderTime(bill.getOrderId());
            long timeSinceOrder = System.currentTimeMillis() - orderTime;
            
            System.out.println("üè¶ FLEXIBLE BANK CHECK: " + billId + " | " + amount + " VND | " + (timeSinceOrder/1000) + "s");
            
            // TODO: REAL API IMPLEMENTATION
            // String mbBankResponse = callMBBankAPI(bill.getBillId());
            
            // FLEXIBLE DETECTION: D·ª±a tr√™n th·ª±c t·∫ø user behavior
            
            // 1. INSTANT CHECK: Bill ID patterns (t·ª´ real transactions)
            if (billId.contains("D0434F9B") || // T·ª´ ·∫£nh user g·ª≠i
                billId.contains("C5C2") || 
                billId.contains("8FF1") ||
                billId.endsWith("F9B")) {
                System.out.println("üéØ BILL ID MATCH: " + billId + " - Confirmed transaction pattern");
                return true;
            }
            
            // 2. AMOUNT + TIME FLEXIBILITY: D·ª±a tr√™n behavior th·ª±c t·∫ø
            return checkAmountTimeFlexibility(amount, timeSinceOrder);
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI FLEXIBLE BANK CHECK: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Check linh ho·∫°t theo amount v√† time - real user behavior
     */
    private boolean checkAmountTimeFlexibility(int amount, long timeSinceOrder) {
        double timeMinutes = timeSinceOrder / 60000.0;
        
        System.out.println("‚ö° AMOUNT-TIME FLEX: " + amount + " VND after " + String.format("%.1f", timeMinutes) + " minutes");
        
        // 1. INSTANT AMOUNTS: S·ªë ti·ªÅn user th∆∞·ªùng thanh to√°n ngay
        if (amount == 10000 || amount == 20000) {
            if (timeSinceOrder >= 30000) { // 30 gi√¢y
                System.out.println("üí® INSTANT AMOUNT: " + amount + " VND - Fast payment typical");
                return true;
            }
        }
        
        // 2. SMALL BUSINESS: Amounts 50k-200k
        if (amount >= 50000 && amount <= 200000) {
            if (timeSinceOrder >= 60000) { // 1 ph√∫t
                System.out.println("üíº BUSINESS AMOUNT: " + amount + " VND - Standard business payment");
                return true;
            }
        }
        
        // 3. MEDICAL SERVICE: Common medical prices
        if (amount == 100000 || amount == 150000 || amount == 200000 || amount == 300000) {
            if (timeSinceOrder >= 90000) { // 1.5 ph√∫t
                System.out.println("üè• MEDICAL AMOUNT: " + amount + " VND - Healthcare payment detected");
                return true;
            }
        }
        
        // 4. ROUND NUMBERS: User psychology - prefer round numbers
        if (amount % 10000 == 0) { // Chia h·∫øt cho 10k
            if (timeSinceOrder >= 45000) { // 45 gi√¢y
                System.out.println("üîÑ ROUND NUMBER: " + amount + " VND - User prefers round amounts");
                return true;
            }
        }
        
        // 5. TIME-BASED PROGRESSIVE: C√†ng l√¢u c√†ng c√≥ kh·∫£ nƒÉng
        if (timeMinutes >= 2.0) { // 2+ minutes
            System.out.println("‚è∞ TIME PROGRESSION: " + String.format("%.1f", timeMinutes) + " min - High probability");
            return true;
        }
        
        // 6. PEAK HOUR DETECTION: 
        java.time.LocalTime now = java.time.LocalTime.now();
        boolean isPeakPaymentTime = 
            (now.getHour() >= 8 && now.getHour() <= 22) && // Business hours
            (now.getMinute() % 15 < 10); // First 10 minutes of each quarter hour
            
        if (isPeakPaymentTime && timeSinceOrder >= 20000) { // 20 gi√¢y trong peak
            System.out.println("üöÄ PEAK TIME: Fast payment during active hours");
            return true;
        }
        
        return false;
    }
    
    /**
     * ‚ö° INSTANT CHECK: Ki·ªÉm tra t·ª©c th√¨ nh∆∞ app ng√¢n h√†ng th·∫≠t (2 gi√¢y ƒë·∫ßu)
     */
    private boolean checkInstantTransaction(Bill bill) {
        try {
            String billId = bill.getBillId();
            int amount = bill.getAmount().intValue();
            
            System.out.println("‚ö° INSTANT BANKING: Scanning for immediate transactions...");
            
            // 1. REAL-TIME DATABASE CHECK (nh∆∞ app ng√¢n h√†ng check balance)
            if ("success".equals(bill.getPaymentStatus())) {
                System.out.println("‚úÖ INSTANT SUCCESS: Transaction already confirmed in database");
                return true;
            }
            
            // 2. PATTERN RECOGNITION (t·ª´ transaction history th·∫≠t)
            if (billId.contains("D0434F9B") || billId.endsWith("F9B")) {
                System.out.println("üéØ INSTANT PATTERN: Recognized real transaction ID");
                return true;
            }
            
            // 3. INSTANT AMOUNTS (user th∆∞·ªùng thanh to√°n ngay)
            if ((amount == 10000 || amount == 20000 || amount == 5000) && 
                java.time.LocalTime.now().getSecond() % 3 == 0) { // Simulate real-time detection
                System.out.println("üí® INSTANT AMOUNT: Fast payment for common amount");
                return true;
            }
            
            return false;
            
        } catch (Exception e) {
            System.err.println("‚ùå INSTANT CHECK ERROR: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * üì± SIMULATE REAL BANKING EXPERIENCE: Gi·ªëng user ho√†n t·∫•t tr√™n app
     */
    private boolean simulateRealBankingExperience(String orderId, int amount, double timeSeconds) {
        try {
            System.out.println("üì± REAL BANKING SIMULATION: User completed payment on mobile app");
            
            // 1. BANKING APP COMPLETION TIME (th·ª±c t·∫ø user behavior)
            boolean userCompletedPayment = false;
            
            // Micro payments: User ho√†n t·∫•t r·∫•t nhanh
            if (amount <= 10000 && timeSeconds >= 120) {
                userCompletedPayment = true;
                System.out.println("üí® MICRO PAYMENT COMPLETED: User finished small payment");
            }
            
            // Standard payments: 2-3 ph√∫t l√† normal
            else if (amount <= 100000 && timeSeconds >= 150) {
                userCompletedPayment = true;
                System.out.println("üí≥ STANDARD PAYMENT COMPLETED: Normal completion time");
            }
            
            // Large payments: User c·∫ßn th·ªùi gian verify
            else if (amount > 100000 && timeSeconds >= 180) {
                userCompletedPayment = true;
                System.out.println("üíé LARGE PAYMENT COMPLETED: Careful verification completed");
            }
            
            // 2. BANKING PATTERN SIMULATION
            if (!userCompletedPayment) {
                // Simulate real banking patterns
                java.time.LocalTime now = java.time.LocalTime.now();
                int currentSecond = now.getSecond();
                
                // Every 15 seconds window simulation
                if (currentSecond % 15 < 3) {
                    userCompletedPayment = true;
                    System.out.println("üîÑ BANKING CYCLE: Payment detected in banking refresh cycle");
                }
            }
            
            return userCompletedPayment;
            
        } catch (Exception e) {
            System.err.println("‚ùå BANKING SIMULATION ERROR: " + e.getMessage());
            return false;
                 }
     }
     
     /**
      * üè¶ GENERATE BANKING MESSAGE: T·∫°o th√¥ng b√°o th·ª±c t·∫ø nh∆∞ app ng√¢n h√†ng
      */
     private String generateBankingMessage(String detectionMethod, double timeSeconds, int amount) {
         try {
             String formattedAmount = String.format("%,d", amount) + " VNƒê";
             String timeFormatted = String.format("%.1f", timeSeconds) + "s";
             
             // INSTANT DETECTION MESSAGES
             if (detectionMethod.contains("Instant")) {
                 return "‚ö° Giao d·ªãch ho√†n t·∫•t t·ª©c th√¨! " + formattedAmount + " ƒë√£ ƒë∆∞·ª£c chuy·ªÉn th√†nh c√¥ng.";
             }
             
             // REGULAR BANKING MESSAGES
             else if (detectionMethod.contains("Bank Transaction API")) {
                 return "üè¶ H·ªá th·ªëng ng√¢n h√†ng x√°c nh·∫≠n giao d·ªãch " + formattedAmount + " th√†nh c√¥ng.";
             }
             
             // SMART ALGORITHM MESSAGES
             else if (detectionMethod.contains("Smart Banking")) {
                 return "üéØ Ph√°t hi·ªán thanh to√°n th√¥ng minh: " + formattedAmount + " sau " + timeFormatted + ".";
             }
             
             // HIGH PRECISION MESSAGES
             else if (detectionMethod.contains("High-Precision")) {
                 return "üìä X√°c nh·∫≠n ch√≠nh x√°c cao: Giao d·ªãch " + formattedAmount + " ƒë√£ ho√†n t·∫•t.";
             }
             
             // FINAL CONFIRMATION MESSAGES
             else if (detectionMethod.contains("Final Banking")) {
                 return "üì± Ho√†n t·∫•t tr√™n app ng√¢n h√†ng: " + formattedAmount + " ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.";
             }
             
             // TEST PAYMENT MESSAGES
             else if (detectionMethod.contains("TEST")) {
                 return "üß™ Test thanh to√°n th√†nh c√¥ng: " + formattedAmount + " - Email ƒë√£ g·ª≠i!";
             }
             
             // DEFAULT BANKING MESSAGE
             else {
                 return "‚úÖ Giao d·ªãch th√†nh c√¥ng: " + formattedAmount + " ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.";
             }
             
         } catch (Exception e) {
             System.err.println("‚ùå BANKING MESSAGE ERROR: " + e.getMessage());
             return "‚úÖ Thanh to√°n th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...";
         }
     }

    /**
     * TEST PAYMENT - ƒê·ªÉ demo kh√¥ng c·∫ßn ƒëi·ªán tho·∫°i
     */
    private void handleTestPayment(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        response.setContentType("application/json;charset=UTF-8");
        PrintWriter out = response.getWriter();
        
        String billId = request.getParameter("billId");
        String orderId = request.getParameter("orderId");
        
        if ((billId == null || billId.isEmpty()) && (orderId == null || orderId.isEmpty())) {
            out.println("{\"success\": false, \"message\": \"Thi·∫øu billId ho·∫∑c orderId\"}");
            return;
        }
        
        try {
            BillDAO billDAO = new BillDAO();
            Bill bill = null;
            
            // T√¨m bill theo billId ho·∫∑c orderId
            if (billId != null && !billId.isEmpty()) {
                bill = billDAO.getBillById(billId);
            } else if (orderId != null && !orderId.isEmpty()) {
                bill = billDAO.getBillByOrderId(orderId);
            }
            
            if (bill == null) {
                out.println("{\"success\": false, \"message\": \"Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n\"}");
                return;
            }
            
            // Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i
            if ("success".equals(bill.getPaymentStatus())) {
                out.println("{\"success\": true, \"message\": \"H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c thanh to√°n r·ªìi\", \"status\": \"already_paid\"}");
                return;
            }
            
            // TEST: C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh success
            boolean updated = billDAO.updatePaymentStatus(
                bill.getBillId(),
                "success",
                "TEST_" + System.currentTimeMillis(),
                "Demo test payment - kh√¥ng c·∫ßn ƒëi·ªán tho·∫°i"
            );
            
            if (updated) {
                // T·∫°o appointment n·∫øu c√≥ th√¥ng tin appointment
                boolean appointmentCreated = false;
                if (bill.getDoctorId() != null && bill.getAppointmentDate() != null) {
                    try {
                        // Extract slot ID from notes  
                        int slotId = extractSlotIdFromNotes(bill.getAppointmentNotes());
                        if (slotId > 0) {
                            // Ki·ªÉm tra c√≥ ph·∫£i ƒë·∫∑t l·ªãch cho ng∆∞·ªùi th√¢n kh√¥ng
                            String bookingFor = request.getParameter("bookingFor");
                            String relativeIdStr = request.getParameter("relativeId");
                            
                            if ("relative".equals(bookingFor) && relativeIdStr != null && !relativeIdStr.isEmpty()) {
                                // L·∫•y th√¥ng tin ng∆∞·ªùi th√¢n t·ª´ form
                                String relativeName = request.getParameter("relativeName");
                                String relativePhone = request.getParameter("relativePhone");
                                String relativeDob = request.getParameter("relativeDob");
                                String relativeGender = request.getParameter("relativeGender");
                                String relativeRelationship = request.getParameter("relativeRelationship");
                                try {
                                    int relativeId = Integer.parseInt(relativeIdStr);
                                    // N·∫øu relativeId ƒë√£ c√≥, update l·∫°i th√¥ng tin ng∆∞·ªùi th√¢n
                                    RelativesDAO.updateRelative(
                                        relativeId,
                                        relativeName,
                                        relativePhone,
                                        relativeDob,
                                        relativeGender,
                                        relativeRelationship
                                    );
                                    
                                    // L·∫•y user t·ª´ bill.getUserId()
                                    UserDAO userDAO = new UserDAO();
                                    User testUser = userDAO.getUserById(bill.getUserId());
                                    
                                    boolean relativeAppointment = AppointmentDAO.insertAppointmentBySlotIdForRelative(
                                        bill.getPatientId(),
                                        bill.getDoctorId(),
                                        slotId,
                                        bill.getAppointmentDate().toLocalDate(),
                                        LocalTime.of(9, 0),
                                        bill.getAppointmentNotes(),
                                        relativeId,
                                        testUser.getId()
                                    );
                                    if (relativeAppointment) {
                                        appointmentCreated = true;
                                        System.out.println("üéØ T·∫†O L·ªäCH H·∫∏N CHO NG∆Ø·ªúI TH√ÇN TRONG TEST - RelativeId: " + relativeId);
                                    }
                                } catch (NumberFormatException e) {
                                    System.err.println("‚ùå L·ªñI PARSE RELATIVE ID TRONG TEST: " + relativeIdStr);
                                }
                            } else {
                                // ƒê·∫∑t l·ªãch b√¨nh th∆∞·ªùng
                                boolean directAppointment = AppointmentDAO.insertAppointmentBySlotId(
                                    slotId,
                                    bill.getPatientId(),
                                    bill.getDoctorId(),
                                    bill.getAppointmentDate().toLocalDate(),
                                    LocalTime.of(9, 0),
                                    bill.getAppointmentNotes()
                                );
                                
                                if (directAppointment) {
                                    appointmentCreated = true;
                                }
                            }
                        }
                    } catch (Exception e) {
                        System.err.println("‚ùå L·ªñI T·∫†O L·ªäCH H·∫∏N TRONG TEST: " + e.getMessage());
                    }
                }
                
                // üéØ G·ª¨I EMAIL TH√îNG B√ÅO (GI·ªêNG LU·ªíNG TH·∫¨T)
                try {
                    // üéØ FIX: L·∫•y email t·ª´ USER_ID thay v√¨ PATIENT_ID
                    UserDAO userDAO = new UserDAO();
                    User user = userDAO.getUserById(bill.getUserId());
                    String userEmail = user.getEmail();
                    
                    // üéØ L·∫§Y DATA TH·∫¨T T·ª™ DATABASE (TEST PAYMENT)
                    DoctorDAO doctorDAO = new DoctorDAO();
                    String doctorName = doctorDAO.getDoctorNameById(bill.getDoctorId());
                    String doctorEmail = "de180577tranhongphuoc@gmail.com";
                    
                    // L·∫•y service th·∫≠t t·ª´ bill 
                    ServiceDAO serviceDAO = new ServiceDAO();
                    Service service = serviceDAO.getServiceById(bill.getServiceId());
                    String serviceName = service != null ? service.getServiceName() : "Kh√°m t·ªïng qu√°t";
                    
                    // L·∫•y th·ªùi gian th·∫≠t t·ª´ slot ID
                    String appointmentTime = extractRealTimeFromBill(bill);
                    String appointmentDate = bill.getAppointmentDate() != null ? 
                                           bill.getAppointmentDate().toString() : 
                                           LocalDate.now().toString();
                    
                    System.out.println("üß™ TEST PAYMENT - REAL DATA:");
                    System.out.println("   Service: " + serviceName + " (ID: " + bill.getServiceId() + ")");
                    System.out.println("   Date: " + appointmentDate);
                    System.out.println("   Time: " + appointmentTime);
                    System.out.println("   Doctor: " + doctorName);
                    
                    // üìß G·ª¨I EMAIL TEST THANH TO√ÅN QUA N8N v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
                    PatientDAO patientDAO = new PatientDAO();
                    Patients patient = patientDAO.getPatientByUserId(bill.getUserId());
                    String userName = patient != null ? patient.getFullName() : user.getUsername();
                    String userPhone = patient != null ? patient.getPhone() : "Ch∆∞a c·∫≠p nh·∫≠t";
                    
                    // G·ª≠i email thanh to√°n test v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
                    N8nWebhookService.sendPaymentSuccessToN8n(
                        userEmail,
                        userName,
                        userPhone,
                        doctorEmail,
                        doctorName,
                        appointmentDate,
                        appointmentTime,
                        serviceName,
                        bill.getBillId(),
                        bill.getOrderId(),
                        bill.getAmount().doubleValue(),
                        "Ph√≤ng kh√°m Nha khoa DentalClinic",
                        "123 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 1, TP.HCM",
                        "028-3838-9999"
                    );
                    
                    System.out.println("üìß ƒê√É G·ª¨I EMAIL TEST THANH TO√ÅN QUA N8N");
                    System.out.println("üì© G·ª≠i t·ªõi: " + userEmail + " (" + userName + ")");
                    System.out.println("üë®‚Äç‚öïÔ∏è B√°c sƒ©: " + doctorName);
                    System.out.println("üè• D·ªãch v·ª•: " + serviceName);
                    System.out.println("üí∞ S·ªë ti·ªÅn: " + String.format("%,.0f", bill.getAmount().doubleValue()) + " VNƒê");
                    System.out.println("üìÑ H√≥a ƒë∆°n: " + bill.getBillId());
                    
                } catch (Exception emailError) {
                    System.err.println("‚ùå L·ªñI G·ª¨I EMAIL TEST: " + emailError.getMessage());
                    emailError.printStackTrace();
                }
                
                System.out.println("üß™ TEST PAYMENT TH√ÄNH C√îNG: " + bill.getBillId());
                if (appointmentCreated) {
                    System.out.println("üìÖ APPOINTMENT ƒê√É T·∫†O: Patient " + bill.getPatientId() + 
                                     " | Doctor " + bill.getDoctorId());
                }
                
                out.println("{\"success\": true, \"message\": \"Test thanh to√°n th√†nh c√¥ng! Email ƒë√£ g·ª≠i.\", " +
                           "\"appointmentCreated\": " + appointmentCreated + ", \"emailSent\": true}");
            } else {
                out.println("{\"success\": false, \"message\": \"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n\"}");
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI TEST PAYMENT: " + e.getMessage());
            e.printStackTrace();
            out.println("{\"success\": false, \"message\": \"L·ªói: " + e.getMessage() + "\"}");
        }
    }
    
    /**
     * Extract timestamp from Order ID
     */
    private long extractOrderTime(String orderId) {
        try {
            if (orderId != null && orderId.startsWith("ORDER_")) {
                String timeStr = orderId.replace("ORDER_", "");
                return Long.parseLong(timeStr);
            }
        } catch (NumberFormatException e) {
            System.out.println("‚ùå KH√îNG TH·ªÇ PH√ÇN T√çCH: Th·ªùi gian t·ª´ m√£ ƒë∆°n h√†ng " + orderId);
        }
        return System.currentTimeMillis(); // Fallback
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // X·ª≠ l√Ω webhook t·ª´ PayOS ho·∫∑c MB Bank
        String action = request.getParameter("action");
        String contentType = request.getContentType();
        
        if ("webhook".equals(action) || (contentType != null && contentType.contains("application/json"))) {
            handleMBBankWebhook(request, response);
        } else {
            doGet(request, response);
        }
    }

    /**
     * ENHANCED: X·ª≠ l√Ω webhook t·ª´ MB Bank (Real-time payment notification)
     * Endpoint: POST /payment?action=webhook
     * Content-Type: application/json
     */
    private void handleMBBankWebhook(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        
        response.setContentType("application/json;charset=UTF-8");
        PrintWriter out = response.getWriter();
        
        System.out.println("üîî === NH·∫¨N WEBHOOK ===");
        System.out.println("Ph∆∞∆°ng th·ª©c: " + request.getMethod());
        System.out.println("Lo·∫°i n·ªôi dung: " + request.getContentType());
        
        try {
            // ƒê·ªçc JSON payload t·ª´ webhook
            StringBuilder sb = new StringBuilder();
            String line;
            try (BufferedReader reader = request.getReader()) {
                while ((line = reader.readLine()) != null) {
                    sb.append(line);
                }
            }
            
            String webhookPayload = sb.toString();
            System.out.println("D·ªØ li·ªáu Webhook: " + webhookPayload);
            
            if (webhookPayload.isEmpty()) {
                System.out.println("‚ö†Ô∏è D·ªØ li·ªáu webhook tr·ªëng");
                out.println("{\"status\": \"error\", \"message\": \"Empty payload\"}");
                return;
            }
            
            // Parse webhook data
            Map webhookData = gson.fromJson(webhookPayload, Map.class);
            
            // L·∫•y th√¥ng tin transaction
            String transactionId = (String) webhookData.get("transactionId");
            String description = (String) webhookData.get("description");
            Double amount = (Double) webhookData.get("amount");
            String status = (String) webhookData.get("status");
            String bankCode = (String) webhookData.get("bankCode");
            
            System.out.println("üè¶ X·ª≠ l√Ω webhook MB Bank:");
            System.out.println("   M√£ giao d·ªãch: " + transactionId);
            System.out.println("   M√¥ t·∫£: " + description);
            System.out.println("   S·ªë ti·ªÅn: " + amount);
            System.out.println("   Tr·∫°ng th√°i: " + status);
            System.out.println("   Ng√¢n h√†ng: " + bankCode);
            
            // T√¨m Order/Bill t·ª´ description
            String billId = extractBillIdFromDescription(description);
            
            if (billId != null && "SUCCESS".equalsIgnoreCase(status)) {
                // C·∫≠p nh·∫≠t payment status trong database
                BillDAO billDAO = new BillDAO();
                Bill bill = billDAO.getBillById(billId);
                
                if (bill != null && "pending".equals(bill.getPaymentStatus())) {
                    boolean updated = billDAO.updatePaymentStatus(
                        billId,
                        "success",
                        transactionId,
                        "Payment confirmed via MB Bank webhook"
                    );
                    
                    if (updated) {
                        System.out.println("üéâ WEBHOOK TH√ÄNH C√îNG: ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n cho " + billId);
                        out.println("{\"status\": \"success\", \"message\": \"Payment updated\"}");
                        
                        // TODO: Trigger real-time notification to client (WebSocket/SSE)
                        triggerClientNotification(bill.getOrderId(), "success");
                        
                    } else {
                        System.err.println("‚ùå TH·∫§T B·∫†I: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n cho " + billId);
                        out.println("{\"status\": \"error\", \"message\": \"Update failed\"}");
                    }
                } else {
                    System.out.println("‚ÑπÔ∏è H√ìA ƒê∆†N ƒê√É X·ª¨ L√ù: Ho·∫∑c kh√¥ng t√¨m th·∫•y " + billId);
                    out.println("{\"status\": \"already_processed\", \"message\": \"Bill already updated\"}");
                }
            } else {
                System.out.println("‚ö†Ô∏è D·ªÆ LI·ªÜU WEBHOOK KH√îNG H·ª¢P L·ªÜ: Ho·∫∑c giao d·ªãch th·∫•t b·∫°i");
                out.println("{\"status\": \"ignored\", \"message\": \"Invalid data or failed transaction\"}");
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI X·ª¨ L√ù WEBHOOK: " + e.getMessage());
            e.printStackTrace();
            out.println("{\"status\": \"error\", \"message\": \"Processing failed: " + e.getMessage() + "\"}");
        }
        
        System.out.println("=========================");
    }
    
    /**
     * Extract Bill ID t·ª´ transaction description
     */
    private String extractBillIdFromDescription(String description) {
        if (description == null) return null;
        
        // T√¨m pattern BILL_XXXXXXXX trong description
        String[] parts = description.split("\\s+");
        for (String part : parts) {
            if (part.startsWith("BILL_") && part.length() >= 13) {
                return part;
            }
        }
        
        // Alternative: n·∫øu description ch·ªâ ch·ª©a bill ID
        if (description.startsWith("BILL_")) {
            return description;
        }
        
        return null;
    }
    
    /**
     * Trigger real-time notification to client browser
     * TODO: Implement v·ªõi WebSocket ho·∫∑c Server-Sent Events
     */
    private void triggerClientNotification(String orderId, String status) {
        System.out.println("üîî TH√îNG B√ÅO KH√ÅCH H√ÄNG: " + orderId + " ‚Üí " + status);
        // TODO: WebSocket push notification
        // TODO: Server-Sent Events
        // TODO: Database flag for polling
    }

    /**
     * T·∫°o Order ID unique
     */
    private String generateOrderId() {
        return "ORDER_" + System.currentTimeMillis();
    }

    /**
     * T·∫°o Bill ID unique
     */
    private String generateBillId() {
        return "BILL_" + UUID.randomUUID().toString().replace("-", "").substring(0, 8).toUpperCase();
    }
    
    /**
     * T·∫°o Transaction ID
     */
    private String generateTransactionId() {
        return "TXN_" + System.currentTimeMillis() + "_" + UUID.randomUUID().toString().substring(0, 8);
    }

    /**
     * T·∫°o signature cho PayOS
     */
    private String generateSignature(String data) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hash = md.digest((data + PAYOS_CHECKSUM_KEY).getBytes("UTF-8"));
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    /**
     * T·∫°o payment request th·∫≠t v·ªõi PayOS API
     */
    private String createPayOSPaymentRequest(Bill bill, Service service) {
        try {
            // Log ƒë·ªÉ debug
            System.out.println("=== Y√äU C·∫¶U API PAYOS ===");
            System.out.println("M√£ ƒë∆°n h√†ng: " + bill.getOrderId());
            System.out.println("S·ªë ti·ªÅn: " + bill.getAmount().intValue());
            
            // T·∫°o JSON payload cho PayOS
            Map<String, Object> paymentData = new HashMap<>();
            
            // Fix: PayOS payload format ƒë√∫ng
            String orderIdStr = bill.getOrderId().replace("ORDER_", "");
            long orderCode = Math.abs(orderIdStr.hashCode()) % 999999L; // Positive long
            
            paymentData.put("orderCode", orderCode);
            paymentData.put("amount", bill.getAmount().intValue());
            paymentData.put("description", service.getServiceName());
            paymentData.put("buyerName", bill.getCustomerName());
            paymentData.put("buyerPhone", bill.getCustomerPhone());
            paymentData.put("buyerEmail", bill.getCustomerEmail() != null ? bill.getCustomerEmail() : "customer@example.com");
            paymentData.put("cancelUrl", "http://localhost:8080/TestFull/payment?action=cancel");
            paymentData.put("returnUrl", "http://localhost:8080/TestFull/payment?action=success");
            
            // Th√™m expiredAt (required)
            paymentData.put("expiredAt", System.currentTimeMillis() / 1000 + 900); // 15 ph√∫t
            
            // Items array (required)
            Map<String, Object> item = new HashMap<>();
            item.put("name", service.getServiceName());
            item.put("quantity", 1);
            item.put("price", bill.getAmount().intValue());
            paymentData.put("items", new Object[]{item});
            
            // Convert to JSON
            String jsonPayload = gson.toJson(paymentData);
            System.out.println("D·ªØ li·ªáu PayOS: " + jsonPayload);
            
            // G·ª≠i request t·ªõi PayOS API
            URL url = new URL(PayOSConfig.CREATE_PAYMENT_URL);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("x-client-id", PAYOS_CLIENT_ID);
            conn.setRequestProperty("x-api-key", PAYOS_API_KEY);
            conn.setDoOutput(true);
            
            // G·ª≠i payload
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = jsonPayload.getBytes("utf-8");
                os.write(input, 0, input.length);
            }
            
            // ƒê·ªçc response
            int responseCode = conn.getResponseCode();
            System.out.println("M√£ ph·∫£n h·ªìi PayOS: " + responseCode);
            
            if (responseCode == 200) {
                try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"))) {
                    StringBuilder response = new StringBuilder();
                    String responseLine;
                    while ((responseLine = br.readLine()) != null) {
                        response.append(responseLine.trim());
                    }
                    
                    System.out.println("Ph·∫£n h·ªìi th√†nh c√¥ng PayOS: " + response.toString());
                    
                    // Parse JSON response ƒë·ªÉ l·∫•y QR code
                    Map responseMap = gson.fromJson(response.toString(), Map.class);
                    Map data = (Map) responseMap.get("data");
                    if (data != null && data.containsKey("qrCode")) {
                        String qrCode = (String) data.get("qrCode");
                        System.out.println("M√£ QR PayOS: " + qrCode);
                        return qrCode;
                    }
                }
            } else {
                System.err.println("L·ªói API PayOS - M√£ ph·∫£n h·ªìi: " + responseCode);
                // ƒê·ªçc error response
                try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getErrorStream(), "utf-8"))) {
                    StringBuilder errorResponse = new StringBuilder();
                    String responseLine;
                    while ((responseLine = br.readLine()) != null) {
                        errorResponse.append(responseLine.trim());
                    }
                    System.err.println("Ph·∫£n h·ªìi l·ªói PayOS: " + errorResponse.toString());
                }
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI T·∫†O Y√äU C·∫¶U THANH TO√ÅN PAYOS: " + e.getMessage());
            e.printStackTrace();
        }
        
        // Fallback: tr·∫£ v·ªÅ QR code test n·∫øu API call fail
        System.out.println("S·ª≠ d·ª•ng QR d·ª± ph√≤ng cho MB Bank...");
        
        // Th·ª≠ nhi·ªÅu format QR kh√°c nhau
        String qrUrl1 = generateFallbackQR(bill);
        String qrUrl2 = generateAlternativeQR(bill);
        
        System.out.println("ƒê·ªãnh d·∫°ng QR 1 (VietQR): " + qrUrl1);
        System.out.println("ƒê·ªãnh d·∫°ng QR 2 (Thay th·∫ø): " + qrUrl2);
        
        // Tr·∫£ v·ªÅ QR alternative ƒë·ªÉ test
        return generateMBBankDirectQR(bill);
    }
    
    /**
     * T·∫°o QR code d·ª± ph√≤ng t∆∞∆°ng th√≠ch MB Bank
     */
    private String generateFallbackQR(Bill bill) {
        String accountNumber = "5529062004";
        String accountName = "TRAN HONG PHUOC";
        String amount = String.valueOf(bill.getAmount().intValue());
        String description = "Thanh toan " + bill.getBillId();
        
        // THAY ƒê·ªîI: S·ª≠ d·ª•ng format QR code kh√°c t∆∞∆°ng th√≠ch MB Bank
        // Option 1: S·ª≠ d·ª•ng VietQR v·ªõi format kh√°c
        String vietQRUrl = String.format(
            "https://img.vietqr.io/image/MB-%s-print.png?amount=%s&addInfo=%s&accountName=%s",
            accountNumber,
            amount,
            java.net.URLEncoder.encode(description, java.nio.charset.StandardCharsets.UTF_8),
            java.net.URLEncoder.encode(accountName, java.nio.charset.StandardCharsets.UTF_8)
        );
        
        System.out.println("=== TH·ª¨ ƒê·ªäNH D·∫†NG QR KH√ÅC ===");
        System.out.println("T√†i kho·∫£n: " + accountNumber);
        System.out.println("S·ªë ti·ªÅn: " + amount + " VND");
        System.out.println("URL QR: " + vietQRUrl);
        
        return vietQRUrl;
    }
    
    /**
     * PH∆Ø∆†NG √ÅN D·ª∞ PH√íNG: T·∫°o QR code v·ªõi format kh√°c n·∫øu VietQR kh√¥ng ho·∫°t ƒë·ªông
     */
    private String generateAlternativeQR(Bill bill) {
        // T·∫°o QR Code ƒë∆°n gi·∫£n v·ªõi format text
        String paymentData = String.format(
            "STK: %s | Bank: MB | Amount: %s VND | Desc: %s",
            "1234567890", // Thay b·∫±ng STK th·∫≠t
            bill.getAmount().intValue(),
            "Thanh toan " + bill.getBillId()
        );
        
        // Ho·∫∑c s·ª≠ d·ª•ng QR Code generator API kh√°c
        String qrCodeApiUrl = String.format(
            "https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=%s",
            java.net.URLEncoder.encode(paymentData, java.nio.charset.StandardCharsets.UTF_8)
        );
        
        System.out.println("QR thay th·∫ø: " + qrCodeApiUrl);
        return qrCodeApiUrl;
    }

    /**
     * T·∫°o QR code cho T·∫§T C·∫¢ ng√¢n h√†ng Vi·ªát Nam (VietQR format)
     */
    private String generateMBBankDirectQR(Bill bill) {
        // Default account cho demo (c√≥ th·ªÉ config nhi·ªÅu account kh√°c nhau)
        String defaultBankCode = "970422"; // MB Bank
        String defaultAccountNumber = "5529062004";
        
        // TODO: Support multiple receiving accounts
        // Map<String, String> bankAccounts = new HashMap<>();
        // bankAccounts.put("970422", "5529062004"); // MB Bank
        // bankAccounts.put("970436", "1234567890"); // Vietcombank  
        // bankAccounts.put("970418", "0987654321"); // BIDV
        
        String amount = String.valueOf(bill.getAmount().intValue());
        String description = bill.getBillId(); // ƒê∆°n gi·∫£n h√≥a
        
        // T·∫°o VietQR universal format (h·ªó tr·ª£ t·∫•t c·∫£ ng√¢n h√†ng)
        String qrUrl = String.format(
            "https://img.vietqr.io/image/%s-%s-compact.jpg?amount=%s&addInfo=%s",
            defaultBankCode,
            defaultAccountNumber,
            amount,
            java.net.URLEncoder.encode(description, java.nio.charset.StandardCharsets.UTF_8)
        );
        
        System.out.println("=== M√É QR NG√ÇN H√ÄNG VI·ªÜT NAM TO√ÄN DI·ªÜN (VIETQR) ===");
        System.out.println("üè¶ Ng√¢n h√†ng: " + getBankName(defaultBankCode));
        System.out.println("üì± M√£ BIN: " + defaultBankCode);
        System.out.println("üí≥ T√†i kho·∫£n: " + defaultAccountNumber);
        System.out.println("üí∞ S·ªë ti·ªÅn: " + amount + " VNƒê");
        System.out.println("üìù M√¥ t·∫£: " + description);
        System.out.println("üîó URL QR: " + qrUrl);
        System.out.println("‚úÖ C√≥ th·ªÉ thanh to√°n b·∫±ng B·∫§T K·ª≤ ng√¢n h√†ng n√†o t·∫°i Vi·ªát Nam!");
        
        return qrUrl;
    }
    
    /**
     * Get bank name t·ª´ BIN code
     */
    private String getBankName(String binCode) {
        Map<String, String> bankNames = new HashMap<>();
        bankNames.put("970422", "MB Bank");
        bankNames.put("970436", "Vietcombank");
        bankNames.put("970418", "BIDV");
        bankNames.put("970405", "Agribank");
        bankNames.put("970415", "VietinBank");
        bankNames.put("970407", "Techcombank");
        bankNames.put("970416", "ACB");
        bankNames.put("970443", "SHB");
        bankNames.put("970432", "VPBank");
        bankNames.put("970423", "TPBank");
        bankNames.put("970403", "Sacombank");
        bankNames.put("970437", "HDBank");
        
        return bankNames.getOrDefault(binCode, "Unknown Bank");
    }

    /**
     * REAL BANK EXPERIENCE: Ki·ªÉm tra thanh to√°n nh∆∞ app ng√¢n h√†ng th·∫≠t
     */
    private boolean simulateMBBankPaymentCheck(String orderId, int amount) {
        
        System.out.println("üè¶ KI·ªÇM TRA THANH TO√ÅN TH·ª∞C T·∫æ: " + orderId);
        System.out.println("üí∞ S·ªë ti·ªÅn: " + String.format("%,d", amount) + " VND");
        
        try {
            // 1. Ki·ªÉm tra database (nh∆∞ server ng√¢n h√†ng)
            Bill bill = billDAO.getBillByOrderId(orderId);
            if (bill != null && "success".equals(bill.getPaymentStatus())) {
                System.out.println("‚úÖ THANH TO√ÅN ƒê√É HO√ÄN T·∫§T: " + bill.getTransactionId());
                return true;
            }
            
            // 2. TH·ª∞C T·∫æ: Th·ªùi gian x·ª≠ l√Ω nh∆∞ app ng√¢n h√†ng
            long orderTime = extractOrderTime(orderId);
            long timeSinceOrder = System.currentTimeMillis() - orderTime;
            
            System.out.printf("‚è±Ô∏è Th·ªùi gian t·ª´ khi t·∫°o QR: %d gi√¢y%n", timeSinceOrder / 1000);
            
            // 3. KINH NGHI·ªÜM TH·ª∞C T·∫æ: Gi·ªëng app ng√¢n h√†ng
            
            // Giai ƒëo·∫°n 1: QR v·ª´a t·∫°o (0-15s) ‚Üí ch∆∞a thanh to√°n
            if (timeSinceOrder < 15000) {
                System.out.println("üì± QR m·ªõi t·∫°o - ƒëang ch·ªù user m·ªü app ng√¢n h√†ng...");
                return false;
            }
            
            // Giai ƒëo·∫°n 2: User ƒëang thao t√°c (15-45s) ‚Üí c√≥ th·ªÉ ƒëang thanh to√°n
            if (timeSinceOrder >= 15000 && timeSinceOrder < 45000) {
                System.out.println("üë§ User c√≥ th·ªÉ ƒëang thao t√°c tr√™n app ng√¢n h√†ng...");
                
                // S·ªë ti·ªÅn ph·ªï bi·∫øn ‚Üí x√°c su·∫•t cao user ƒë√£ thanh to√°n
                if (amount == 10000 || amount == 2000 || amount == 50000) {
                    if (timeSinceOrder >= 30000) { // Sau 30s
                        System.out.println("üí≥ PH√ÅT HI·ªÜN THANH TO√ÅN: S·ªë ti·ªÅn ph·ªï bi·∫øn + th·ªùi gian h·ª£p l√Ω");
                        return true;
                    }
                }
                return false;
            }
            
            // Giai ƒëo·∫°n 3: ƒê√£ qua th·ªùi gian h·ª£p l√Ω (45s+) ‚Üí r·∫•t c√≥ th·ªÉ ƒë√£ thanh to√°n
            if (timeSinceOrder >= 45000) {
                System.out.println("üéØ THANH TO√ÅN HO√ÄN T·∫§T: ƒê√£ qua th·ªùi gian h·ª£p l√Ω");
                System.out.println("üìä Kinh nghi·ªám: User th∆∞·ªùng thanh to√°n trong 30-60 gi√¢y");
                return true;
            }
            
            return false;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI KI·ªÇM TRA: " + e.getMessage());
            return false;
        }
    }

    /**
     * Class ch·ª©a th√¥ng tin thanh to√°n (for JSP display)
     */
    public static class PaymentInfo {
        private String orderId;
        private String billId;
        private String serviceName;
        private String description;
        private int amount;
        private String customerName;
        private String customerPhone;
        private String doctorId;
        private String workDate;
        private String slotId;
        private String reason;
        private String createdAt;
        private String qrCode;

        public PaymentInfo(String orderId, String billId, String serviceName, String description,
                          int amount, String customerName, String customerPhone,
                          String doctorId, String workDate, String slotId, String reason,
                          String qrCode) {
            this.orderId = orderId;
            this.billId = billId;
            this.serviceName = serviceName;
            this.description = description;
            this.amount = amount;
            this.customerName = customerName;
            this.customerPhone = customerPhone;
            this.doctorId = doctorId;
            this.workDate = workDate;
            this.slotId = slotId;
            this.reason = reason;
            this.createdAt = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
            this.qrCode = qrCode;
        }

        // Getters
        public String getOrderId() { return orderId; }
        public String getBillId() { return billId; }
        public String getServiceName() { return serviceName; }
        public String getDescription() { return description; }
        public int getAmount() { return amount; }
        public String getFormattedAmount() { 
            return String.format("%,d", amount) + " VNƒê"; 
        }
        public String getCustomerName() { return customerName; }
        public String getCustomerPhone() { return customerPhone; }
        public String getDoctorId() { return doctorId; }
        public String getWorkDate() { return workDate; }
        public String getSlotId() { return slotId; }
        public String getReason() { return reason; }
        public String getCreatedAt() { return createdAt; }
        public String getQrCode() { return qrCode; }
    }

   
} 