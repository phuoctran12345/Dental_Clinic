package controller;

import dao.AppointmentDAO;
import dao.DoctorDAO;
import static dao.AppointmentDAO.*;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.sql.SQLException;
import model.Appointment;
import model.Doctors;

import java.io.IOException;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

// @WebServlet annotation removed - using web.xml mapping instead
public class StaffHandleQueueServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession();
        String action = request.getParameter("action");
        
        try {
            if ("queue".equals(action)) {
                // X·ª≠ l√Ω trang qu·∫£n l√Ω h√†ng ƒë·ª£i
                handleQueueManagement(request, response);
            } else {
                // M·∫∑c ƒë·ªãnh c≈©ng hi·ªÉn th·ªã trang qu·∫£n l√Ω h√†ng ƒë·ª£i
                handleQueueManagement(request, response);
            }
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
            request.getRequestDispatcher("/jsp/staff/staff_quanlyhangdoibenhnhan.jsp").forward(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        request.setCharacterEncoding("UTF-8");
        String action = request.getParameter("action");
        
        try {
            if ("update_status".equals(action)) {
                handleUpdateStatus(request, response);
            } else if ("call_patient".equals(action)) {
                handleCallPatient(request, response);
            } else {
                doGet(request, response);
            }
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "C√≥ l·ªói khi c·∫≠p nh·∫≠t: " + e.getMessage());
            doGet(request, response);
        }
    }

    /**
     * X·ª≠ l√Ω trang qu·∫£n l√Ω h√†ng ƒë·ª£i b·ªánh nh√¢n
     */
    private void handleQueueManagement(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        try {
            System.out.println("üè• LOADING QUEUE MANAGEMENT PAGE...");
            
            // L·∫•y danh s√°ch b√°c sƒ©
            List<Doctors> doctors = new ArrayList<>();
            try {
                doctors = DoctorDAO.getAllDoctors();
                System.out.println("üìã Loaded " + doctors.size() + " doctors");
            } catch (Exception e) {
                System.err.println("ERROR loading doctors: " + e.getMessage());
                e.printStackTrace();
            }
            request.setAttribute("doctors", doctors);
            
            // L·∫•y l·ªãch h·∫πn h√¥m nay v√† t√≠nh to√°n statistics v·ªõi th·ªùi gian realtime  
            java.sql.Date today = new java.sql.Date(System.currentTimeMillis());
            AppointmentDAO appointmentDAO = new AppointmentDAO();
            
            // Th·ª≠ l·∫•y appointments theo ng√†y
            List<Appointment> todayAppointments = appointmentDAO.getAppointmentsByDate(today);
            System.out.println("üìÖ Today (" + today + "): Loaded " + todayAppointments.size() + " appointments from getAppointmentsByDate()");
            
            // ƒê√öNG LOGIC: Ch·ªâ l·∫•y l·ªãch h·∫πn c·ªßa ng√†y h√¥m nay
            List<Appointment> appointmentsToUse = todayAppointments;
            System.out.println("üìÖ Using " + appointmentsToUse.size() + " appointments for display (today only)");
            
            // Load th√¥ng tin b·ªánh nh√¢n v√† b√°c sƒ© th·∫≠t t·ª´ database
            dao.PatientDAO patientDAO = new dao.PatientDAO();
            dao.DoctorDAO doctorDAO = new dao.DoctorDAO();
            
            for (Appointment apt : appointmentsToUse) {
                try {
                    // L·∫•y t√™n b·ªánh nh√¢n th·∫≠t t·ª´ Patients table
                    model.Patients patient = dao.PatientDAO.getPatientById(apt.getPatientId());
                    if (patient != null) {
                        apt.setPatientName(patient.getFullName());
                        // S·ªë ƒëi·ªán tho·∫°i TH·∫¨T c·ªßa b·ªánh nh√¢n (ƒë·ªÉ staff g·ªçi ƒë·∫øn)
                        String actualPatientPhone = patient.getPhone();
                        if (actualPatientPhone != null && !actualPatientPhone.trim().isEmpty()) {
                            apt.setPatientPhone(actualPatientPhone);
                        } else {
                            // Fallback: s·ªë demo n·∫øu b·ªánh nh√¢n kh√¥ng c√≥ s·ªë
                            apt.setPatientPhone("0901234567"); // S·ªë demo ƒë·ªÉ test
                        }
                        System.out.println("üë§ Patient " + apt.getPatientId() + ": " + patient.getFullName() + " | Phone: " + apt.getPatientPhone());
                    } else {
                        apt.setPatientName("B·ªánh nh√¢n " + apt.getPatientId());
                        apt.setPatientPhone("0901234567"); // S·ªë demo
                    }
                    
                    // L·∫•y t√™n b√°c sƒ© th·∫≠t t·ª´ Doctors table
                    model.Doctors doctor = doctorDAO.getDoctorById((int)apt.getDoctorId());
                    if (doctor != null) {
                        apt.setDoctorName(doctor.getFull_name());
                        System.out.println("üë®‚Äç‚öïÔ∏è Doctor " + apt.getDoctorId() + ": " + doctor.getFull_name());
                    } else {
                        apt.setDoctorName("B√°c sƒ© " + apt.getDoctorId());
                    }
                    
                    // Set service name t·ª´ reason
                    apt.setServiceName(apt.getReason() != null ? apt.getReason() : "Kh√°m t·ªïng qu√°t");
                    
                } catch (Exception e) {
                    System.err.println("‚ùå Error loading info for appointment " + apt.getAppointmentId() + ": " + e.getMessage());
                    apt.setPatientName("B·ªánh nh√¢n " + apt.getPatientId());
                    apt.setDoctorName("B√°c sƒ© " + apt.getDoctorId());
                    apt.setPatientPhone("0936929381");
                    apt.setServiceName("Kh√°m t·ªïng qu√°t");
                }
            }
            
            // T√≠nh s·ªë l∆∞·ª£ng theo status TH·ªúI GIAN TH·ª∞C s·ª≠ d·ª•ng constants m·ªõi (3 tr·∫°ng th√°i ch√≠nh)
            int totalAppointments = appointmentsToUse.size();
            int bookedCount = 0, completedCount = 0, cancelledCount = 0;
            
            System.out.println("üìä REALTIME STATUS COUNT for all appointments:");
            for (Appointment apt : appointmentsToUse) {
                String status = apt.getStatus();
                System.out.println("  - ID:" + apt.getAppointmentId() + " | Status: '" + status + "' | Patient: " + apt.getPatientName());
                
                // S·ª≠ d·ª•ng constants m·ªõi ƒë·ªÉ ƒë·∫øm ch√≠nh x√°c (3 tr·∫°ng th√°i ch√≠nh)
                if (AppointmentDAO.STATUS_BOOKED.equals(status) || "ƒê√£ ƒë·∫∑t".equals(status) || 
                    AppointmentDAO.STATUS_WAITING_PAYMENT.equals(status) || "Ch·ªù thanh to√°n".equals(status)) {
                    bookedCount++;
                } else if (AppointmentDAO.STATUS_COMPLETED.equals(status) || "Ho√†n th√†nh".equals(status)) {
                    completedCount++;
                } else if (AppointmentDAO.STATUS_CANCELLED.equals(status) || "ƒê√£ h·ªßy".equals(status)) {
                    cancelledCount++;
                }
            }
            
            System.out.println("üìà FINAL COUNTS: Total=" + totalAppointments + 
                             " | Booked=" + bookedCount + 
                             " | Completed=" + completedCount + 
                             " | Cancelled=" + cancelledCount);
            
            // DEBUG: Ki·ªÉm tra appointments tr∆∞·ªõc khi g·ª≠i cho JSP
            System.out.println("üîç DEBUG - Appointments list before sending to JSP:");
            System.out.println("   - Size: " + appointmentsToUse.size());
            System.out.println("   - Is null? " + (appointmentsToUse == null));
            System.out.println("   - Is empty? " + appointmentsToUse.isEmpty());
            
            if (!appointmentsToUse.isEmpty()) {
                for (int i = 0; i < Math.min(3, appointmentsToUse.size()); i++) {
                    Appointment apt = appointmentsToUse.get(i);
                    System.out.println("   [" + i + "] ID:" + apt.getAppointmentId() + 
                                     " | Patient: '" + apt.getPatientName() + "'" +
                                     " | Status: '" + apt.getStatus() + "'");
                }
            }
            
            // G·ª≠i d·ªØ li·ªáu TH·ªúI GIAN TH·ª∞C cho JSP
            request.setAttribute("appointments", appointmentsToUse);
            request.setAttribute("totalAppointments", totalAppointments);
            request.setAttribute("bookedCount", bookedCount);
            request.setAttribute("completedCount", completedCount);
            request.setAttribute("cancelledCount", cancelledCount);
            
            System.out.println("‚úÖ Forwarding to JSP with " + appointmentsToUse.size() + " appointments");
            
            // Forward ƒë·∫øn trang qu·∫£n l√Ω h√†ng ƒë·ª£i
            request.getRequestDispatcher("/jsp/staff/staff_quanlyhangdoibenhnhan.jsp").forward(request, response);
            
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "C√≥ l·ªói khi t·∫£i d·ªØ li·ªáu h√†ng ƒë·ª£i: " + e.getMessage());
            request.getRequestDispatcher("/jsp/staff/staff_quanlyhangdoibenhnhan.jsp").forward(request, response);
        }
    }

    /**
     * X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i appointment (n·∫øu c·∫ßn)
     */
    private void handleUpdateStatus(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            String appointmentId = request.getParameter("appointmentId");
            String newStatus = request.getParameter("newStatus");
            
            if (appointmentId != null && newStatus != null) {
                AppointmentDAO appointmentDAO = new AppointmentDAO();
                
                // Update status
                boolean updated = appointmentDAO.updateAppointmentStatus(
                    Integer.parseInt(appointmentId), newStatus);
                
                if (updated) {
                    request.setAttribute("success", "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");
                    System.out.println("‚úÖ Updated appointment " + appointmentId + " to status: " + newStatus);
                } else {
                    request.setAttribute("error", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
                }
            }
            
            // Reload page
            handleQueueManagement(request, response);
            
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + e.getMessage());
            handleQueueManagement(request, response);
        }
    }

    /**
     * X·ª≠ l√Ω ch·ª©c nƒÉng g·ªçi b·ªánh nh√¢n t·ª´ s·ªë staff
     */
    private void handleCallPatient(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            String staffPhone = request.getParameter("staffPhone");
            String patientPhone = request.getParameter("patientPhone");
            String patientName = request.getParameter("patientName");
            
            if (staffPhone != null && patientPhone != null && patientName != null) {
                // Log cu·ªôc g·ªçi
                System.out.println("üìû CALL LOG:");
                System.out.println("  üë®‚Äçüíº Staff phone: " + staffPhone);
                System.out.println("  üë§ Patient: " + patientName);
                System.out.println("  üì± Patient phone: " + patientPhone);
                System.out.println("  üïê Time: " + new java.util.Date());
                
                // T·∫°o th√¥ng tin ph·∫£n h·ªìi
                String callInfo = String.format(
                    "‚úÖ CU·ªòC G·ªåI ƒê√É ƒê∆Ø·ª¢C TH·ª∞C HI·ªÜN%n%n" +
                    "üë®‚Äçüíº Staff: %s%n" +
                    "üë§ B·ªánh nh√¢n: %s%n" +
                    "üì± S·ªë BN: %s%n" +
                    "üïê Th·ªùi gian: %s",
                    staffPhone,
                    patientName,
                    patientPhone,
                    new java.util.Date().toString()
                );
                
                request.setAttribute("callInfo", callInfo);
                request.setAttribute("success", "ƒê√£ ghi nh·∫≠n cu·ªôc g·ªçi t·ª´ " + staffPhone + " ƒë·∫øn " + patientName);
                
            } else {
                request.setAttribute("error", "Thi·∫øu th√¥ng tin cu·ªôc g·ªçi!");
                System.err.println("‚ùå Missing call parameters: staffPhone=" + staffPhone + 
                                 ", patientPhone=" + patientPhone + ", patientName=" + patientName);
            }
            
            // Reload page
            handleQueueManagement(request, response);
            
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "L·ªói khi x·ª≠ l√Ω cu·ªôc g·ªçi: " + e.getMessage());
            handleQueueManagement(request, response);
        }
    }
} 