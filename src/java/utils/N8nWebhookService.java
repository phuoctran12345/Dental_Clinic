package utils;

import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

public class N8nWebhookService {
    // URL webhook production c·ªßa b·∫°n  
    // üîß C·∫¨P NH·∫¨T URL N8N WEBHOOK - KI·ªÇM TRA URL ENDPOINT ƒê√öNG
    private static final String WEBHOOK_URL = "https://kinggg123.app.n8n.cloud/webhook/send-appointment-email";

    // üö´ ANTI-SPAM: Cache ƒë·ªÉ tr√°nh g·ª≠i email duplicate
    private static final Set<String> sentEmails = ConcurrentHashMap.newKeySet();

    // ENHANCED: Method v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin thanh to√°n
    public static void sendPaymentSuccessToN8n(
            String userEmail,
            String userName, 
            String userPhone,
            String doctorEmail,
            String doctorName,
            String appointmentDate,
            String appointmentTime,
            String serviceName,
            String billId,
            String orderId,
            double billAmount,
            String clinicName,
            String clinicAddress,
            String clinicPhone
    ) {
        try {
            // üö´ KI·ªÇM TRA ANTI-SPAM: Kh√¥ng g·ª≠i email duplicate cho c√πng billId
            String emailKey = billId + "_" + userEmail;
            if (sentEmails.contains(emailKey)) {
                System.out.println("üö´ ANTI-SPAM: Email ƒë√£ ƒë∆∞·ª£c g·ª≠i cho " + billId + " ‚Üí " + userEmail);
                return;
            }

            // Ki·ªÉm tra email h·ª£p l·ªá
            if (userEmail == null || userEmail.trim().isEmpty() || !isValidEmail(userEmail)) {
                System.out.println("‚ùå User email kh√¥ng h·ª£p l·ªá: " + userEmail);
                return;
            }

            URL url = new URL(WEBHOOK_URL);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("POST");
            con.setRequestProperty("Content-Type", "application/json; utf-8");
            con.setDoOutput(true);

            // Format ti·ªÅn t·ªá VNƒê
            NumberFormat vndFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
            String formattedAmount = vndFormat.format(billAmount);

            // JSON payload ƒë·∫ßy ƒë·ªß th√¥ng tin
            String jsonInputString = String.format(
                "{" +
                "\"type\":\"payment_success\"," +
                "\"to\":\"%s\"," +
                "\"userName\":\"%s\"," +
                "\"userPhone\":\"%s\"," +
                "\"doctorEmail\":\"%s\"," +
                "\"doctorName\":\"%s\"," +
                "\"appointmentDate\":\"%s\"," +
                "\"appointmentTime\":\"%s\"," +
                "\"serviceName\":\"%s\"," +
                "\"billId\":\"%s\"," +
                "\"orderId\":\"%s\"," +
                "\"billAmount\":%.0f," +
                "\"formattedAmount\":\"%s\"," +
                "\"clinicName\":\"%s\"," +
                "\"clinicAddress\":\"%s\"," +
                "\"clinicPhone\":\"%s\"," +
                "\"timestamp\":\"%s\"" +
                "}",
                userEmail.trim(),
                escapeJson(userName),
                escapeJson(userPhone),
                doctorEmail != null ? doctorEmail.trim() : "contact@dentalclinic.vn",
                escapeJson(doctorName),
                appointmentDate,
                appointmentTime,
                escapeJson(serviceName),
                billId,
                orderId,
                billAmount,
                escapeJson(formattedAmount),
                escapeJson(clinicName != null ? clinicName : "Ph√≤ng kh√°m Nha khoa"),
                escapeJson(clinicAddress != null ? clinicAddress : "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM"),
                escapeJson(clinicPhone != null ? clinicPhone : "028-1234-5678"),
                java.time.LocalDateTime.now().toString()
            );

            System.out.println("üì§ === G·ª¨I TH√îNG B√ÅO THANH TO√ÅN TH√ÄNH C√îNG ƒê·∫æN N8N ===");
            System.out.println("üìß Email kh√°ch h√†ng: " + userEmail);
            System.out.println("üë§ T√™n kh√°ch h√†ng: " + userName);
            System.out.println("üìû SƒêT kh√°ch h√†ng: " + userPhone);
            System.out.println("üë®‚Äç‚öïÔ∏è B√°c sƒ©: " + doctorName);
            System.out.println("üìÖ Ng√†y kh√°m: " + appointmentDate);
            System.out.println("‚è∞ Gi·ªù kh√°m: " + appointmentTime);
            System.out.println("üè• D·ªãch v·ª•: " + serviceName);
            System.out.println("üí∞ S·ªë ti·ªÅn: " + formattedAmount);
            System.out.println("üìÑ M√£ h√≥a ƒë∆°n: " + billId);
            System.out.println("üì§ JSON payload: " + jsonInputString);
            System.out.println("üîó Webhook URL: " + WEBHOOK_URL);

            try (OutputStream os = con.getOutputStream()) {
                byte[] input = jsonInputString.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            int code = con.getResponseCode();
            System.out.println("üì® N8N webhook response: " + code);
            
            if (code == 200) {
                System.out.println("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o thanh to√°n th√†nh c√¥ng t·ªõi N8N!");
                // Th√™m email v√†o cache sau khi g·ª≠i th√†nh c√¥ng
                sentEmails.add(emailKey);
            } else {
                System.out.println("‚ö†Ô∏è N8N webhook tr·∫£ v·ªÅ code: " + code);
            }

        } catch (Exception e) {
            System.out.println("‚ùå L·ªói g·ª≠i webhook N8N: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // LEGACY: Method c≈© ƒë·ªÉ backward compatibility
    public static void sendAppointmentToN8n(
            String userEmail,
            String doctorEmail,
            String appointmentDate,
            String appointmentTime,
            String doctorName,
            String serviceName
    ) {
        // G·ªçi method m·ªõi v·ªõi th√¥ng tin c∆° b·∫£n
        sendPaymentSuccessToN8n(
            userEmail,
            "Kh√°ch h√†ng", // Default name
            "Ch∆∞a c·∫≠p nh·∫≠t", // Default phone
            doctorEmail,
            doctorName,
            appointmentDate,
            appointmentTime,
            serviceName,
            "N/A", // No bill ID
            "N/A", // No order ID
            0.0, // No amount
            "Ph√≤ng kh√°m Nha khoa", // Default clinic
            "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM", // Default address
            "028-1234-5678" // Default phone
        );
    }

    // Helper method ƒë·ªÉ escape JSON strings
    private static String escapeJson(String input) {
        if (input == null) return "";
        return input.replace("\\", "\\\\")
                   .replace("\"", "\\\"")
                   .replace("\n", "\\n")
                   .replace("\r", "\\r")
                   .replace("\t", "\\t");
    }

    // Ki·ªÉm tra email h·ª£p l·ªá v·ªõi regex ch·∫∑t ch·∫Ω h∆°n
    private static boolean isValidEmail(String email) {
        if (email == null || email.trim().isEmpty()) {
            return false;
        }
        // RFC 5322 Official Standard
        String emailRegex = "^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$";
        return email.matches(emailRegex);
    }

    // üîÑ UTILITY: Reset cache anti-spam (d√πng cho testing)
    public static void resetAntiSpamCache() {
        sentEmails.clear();
        System.out.println("üîÑ ƒê√É RESET CACHE ANTI-SPAM");
    }

    // üìä UTILITY: Ki·ªÉm tra s·ªë email ƒë√£ g·ª≠i
    public static int getSentEmailCount() {
        return sentEmails.size();
    }

    // ENHANCED: Method ri√™ng cho th√¥ng b√°o l·ªãch h·∫πn (kh√¥ng ph·∫£i thanh to√°n)
    public static void sendAppointmentReminderToN8n(
            String userEmail,
            String userName,
            String doctorName,
            String appointmentDate,
            String appointmentTime,
            String serviceName,
            String reminderType // "24h_before", "2h_before", "now"
    ) {
        try {
            if (userEmail == null || userEmail.trim().isEmpty() || !isValidEmail(userEmail)) {
                System.out.println("‚ùå User email kh√¥ng h·ª£p l·ªá: " + userEmail);
                return;
            }

            URL url = new URL(WEBHOOK_URL);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("POST");
            con.setRequestProperty("Content-Type", "application/json; utf-8");
            con.setDoOutput(true);

            String jsonInputString = String.format(
                "{" +
                "\"type\":\"appointment_reminder\"," +
                "\"to\":\"%s\"," +
                "\"userName\":\"%s\"," +
                "\"doctorName\":\"%s\"," +
                "\"appointmentDate\":\"%s\"," +
                "\"appointmentTime\":\"%s\"," +
                "\"serviceName\":\"%s\"," +
                "\"reminderType\":\"%s\"," +
                "\"timestamp\":\"%s\"" +
                "}",
                userEmail.trim(),
                escapeJson(userName),
                escapeJson(doctorName),
                appointmentDate,
                appointmentTime,
                escapeJson(serviceName),
                reminderType,
                java.time.LocalDateTime.now().toString()
            );

            System.out.println("‚è∞ === G·ª¨I NH·∫ÆC NH·ªû L·ªäCH H·∫∏N ƒê·∫æN N8N ===");
            System.out.println("üìß Email: " + userEmail);
            System.out.println("üë§ Kh√°ch h√†ng: " + userName);
            System.out.println("üîî Lo·∫°i nh·∫Øc nh·ªü: " + reminderType);

            try (OutputStream os = con.getOutputStream()) {
                byte[] input = jsonInputString.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            int code = con.getResponseCode();
            System.out.println("üì® N8N reminder response: " + code);

        } catch (Exception e) {
            System.out.println("‚ùå L·ªói g·ª≠i reminder N8N: " + e.getMessage());
            e.printStackTrace();
        }
    }
}